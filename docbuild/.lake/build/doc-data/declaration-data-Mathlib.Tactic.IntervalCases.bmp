{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.intervalCases\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">intervalCases</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`interval_cases n` searches for upper and lower bounds on a variable `n`,\nand if bounds are found,\nsplits into separate cases for each possible value of `n`.\n\nAs an example, in\n```\nexample (n : ℕ) (w₁ : n ≥ 3) (w₂ : n < 5) : n = 3 ∨ n = 4 := by\n  interval_cases n\n  all_goals simp\n```\nafter `interval_cases n`, the goals are `3 = 3 ∨ 3 = 4` and `4 = 3 ∨ 4 = 4`.\n\nYou can also explicitly specify a lower and upper bound to use,\nas `interval_cases using hl, hu`.\nThe hypotheses should be in the form `hl : a ≤ n` and `hu : n < b`,\nin which case `interval_cases` calls `fin_cases` on the resulting fact `n ∈ Set.Ico a b`.\n\nYou can specify a name `h` for the new hypothesis,\nas `interval_cases h : n` or `interval_cases h : n using hl, hu`.\n","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.intervalCases","kind":"def","line":322,"name":"Mathlib.Tactic.intervalCases","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L322-L344"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.intervalCases\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">intervalCases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e </span><span class=\"fn\">e'</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lbs </span><span class=\"fn\">ubs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mustUseBounds</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.IntervalCasesSubgoal\">IntervalCasesSubgoal</a>)</span></span></div></div>","info":{"doc":"`intervalCases` proves goal `g` by splitting into cases for each integer between the given bounds.\n\nParameters:\n* `g`: the goal, which can have any type `⊢ tgt` (it works in both proofs and programs)\n* `e`: the scrutinee, the expression we are proving is bounded between integers\n* `e'`: a version of `e` used for error messages. (This is used by the `interval_cases` frontend\n  tactic because it uses a fresh variable for `e`, so it is more helpful to show the\n  pre-generalized expression in error messages.)\n* `lbs`: A list of candidate lower bound expressions.\n  The tactic will automatically pick the best lower bound it can find from the list.\n* `ubs`: A list of candidate upper bound expressions.\n  The tactic will automatically pick the best upper bound it can find from the list.\n* `mustUseBounds`: If true, the tactic will fail if it is unable to parse any of the\n  given `ubs` or `lbs` into bounds. If false (the default), these will be silently skipped\n  and an error message is only produced if we could not find any bounds (including those supplied\n  by the type itself, e.g. if we are working over `Nat` or `Fin n`).\n\nReturns an array of `IntervalCasesSubgoal`, one per subgoal. A subgoal has the following fields:\n* `rhs`: the numeral expression for this case\n* `value`: the integral value of `rhs`\n* `goal`: the subgoal of type `⊢ e = rhs → tgt`\n\nNote that this tactic does not perform any substitution or introduction steps -\nall subgoals are in the same context as `goal` itself.\n","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.intervalCases","kind":"def","line":248,"name":"Mathlib.Tactic.IntervalCases.intervalCases","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L248-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.intMethods\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">intMethods</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods\">Methods</a></div></div>","info":{"doc":"A `Methods` implementation for `ℤ`.\nThis tells `interval_cases` how to work on integers. ","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.intMethods","kind":"def","line":234,"name":"Mathlib.Tactic.IntervalCases.intMethods","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L234-L246"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Int.le_sub_one_of_not_le\"><span class=\"name\">Int</span>.<span class=\"name\">le_sub_one_of_not_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/IntervalCases.html#Int.le_sub_one_of_not_le","kind":"theorem","line":231,"name":"Int.le_sub_one_of_not_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L231-L232"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Int.add_one_le_of_not_le\"><span class=\"name\">Int</span>.<span class=\"name\">add_one_le_of_not_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/IntervalCases.html#Int.add_one_le_of_not_le","kind":"theorem","line":229,"name":"Int.add_one_le_of_not_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L229-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.natMethods\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">natMethods</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods\">Methods</a></div></div>","info":{"doc":"A `Methods` implementation for `ℕ`.\nThis tells `interval_cases` how to work on natural numbers. ","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.natMethods","kind":"def","line":213,"name":"Mathlib.Tactic.IntervalCases.natMethods","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L213-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.bisect\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">Methods</span>.<span class=\"name\">bisect</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods\">Methods</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cases</span> : <span class=\"fn\"><a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.IntervalCasesSubgoal\">IntervalCasesSubgoal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">z1 </span><span class=\"fn\">z2</span> : <a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Bound\">Bound</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e1 </span><span class=\"fn\">e2 </span><span class=\"fn\">p1 </span><span class=\"fn\">p2 </span><span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Given `(z1, e1, p1)` a lower bound on `e` and `(z2, e2, p2)` an upper bound on `e`, such that the\ndistance between the bounds matches the number of `cases` in the subarray (which must be positive),\nproves the goal `g` using the metavariables in the array by recursive bisection.\nThis is the core of the tactic, producing a case tree of if statements which bottoms out\nat the `cases`.\n","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.bisect","kind":"opaque","line":184,"name":"Mathlib.Tactic.IntervalCases.Methods.bisect","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L184-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.inconsistentBounds\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">Methods</span>.<span class=\"name\">inconsistentBounds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods\">Methods</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">z1 </span><span class=\"fn\">z2</span> : <a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Bound\">Bound</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e1 </span><span class=\"fn\">e2 </span><span class=\"fn\">p1 </span><span class=\"fn\">p2 </span><span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"Given `(z1, e1, p1)` a lower bound on `e` and `(z2, e2, p2)` an upper bound on `e`,\nsuch that the distance between the bounds is negative, returns a proof of `False`.\n","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.inconsistentBounds","kind":"def","line":164,"name":"Mathlib.Tactic.IntervalCases.Methods.inconsistentBounds","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L164-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.le_of_not_le_of_le\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">le_of_not_le_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hi </span><span class=\"fn\">n </span><span class=\"fn\">lo</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">lo</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">lo</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.le_of_not_le_of_le","kind":"theorem","line":160,"name":"Mathlib.Tactic.IntervalCases.le_of_not_le_of_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L160-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.getBound\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">Methods</span>.<span class=\"name\">getBound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods\">Methods</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e </span><span class=\"fn\">pf</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lb</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Bound\">Bound</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></div></div>","info":{"doc":"Given a proof `pf`, attempts to parse it as an upper (`lb = false`) or lower (`lb = true`)\nbound on `n`. If successful, it returns `(bound, n, pf')` where `n` is a numeral and\n`pf'` proves `n ≤ e` or `n ≱ e` (as described by `bound`).\n","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.getBound","kind":"def","line":133,"name":"Mathlib.Tactic.IntervalCases.Methods.getBound","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L133-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.of_le_right\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">of_le_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">b'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b'</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.of_le_right","kind":"theorem","line":131,"name":"Mathlib.Tactic.IntervalCases.of_le_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L131-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.of_le_left\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">of_le_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">a'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.of_le_left","kind":"theorem","line":130,"name":"Mathlib.Tactic.IntervalCases.of_le_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L130-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.of_lt_right\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">of_lt_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">b'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.of_lt_right","kind":"theorem","line":129,"name":"Mathlib.Tactic.IntervalCases.of_lt_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L129-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.of_lt_left\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">of_lt_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">a'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a'</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.of_lt_left","kind":"theorem","line":128,"name":"Mathlib.Tactic.IntervalCases.of_lt_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L128-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.of_not_le_right\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">of_not_le_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">b'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b'</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.of_not_le_right","kind":"theorem","line":127,"name":"Mathlib.Tactic.IntervalCases.of_not_le_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L127-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.of_not_le_left\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">of_not_le_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">a'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.of_not_le_left","kind":"theorem","line":126,"name":"Mathlib.Tactic.IntervalCases.of_not_le_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L126-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.of_not_lt_right\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">of_not_lt_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">b'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.of_not_lt_right","kind":"theorem","line":125,"name":"Mathlib.Tactic.IntervalCases.of_not_lt_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L125-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.of_not_lt_left\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">of_not_lt_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">a'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a'</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.of_not_lt_left","kind":"theorem","line":124,"name":"Mathlib.Tactic.IntervalCases.of_not_lt_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L124-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.mkNumeral\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">Methods</span>.<span class=\"name\">mkNumeral</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods\">Methods</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>","info":{"doc":"Construct the canonical numeral for integer `z`, or fail if `z` is out of range. ","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.mkNumeral","kind":"def","line":120,"name":"Mathlib.Tactic.IntervalCases.Methods.mkNumeral","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L120-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.eval\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">Methods</span>.<span class=\"name\">eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods\">Methods</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>","info":{"doc":"Given `e`, return `(z, n, p)` where `p : e = n` and `n` is a numeral\nappropriate for the type denoting the integer `z`. ","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.eval","kind":"def","line":118,"name":"Mathlib.Tactic.IntervalCases.Methods.eval","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L118-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.roundDown\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">Methods</span>.<span class=\"name\">roundDown</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods\">Methods</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>","info":{"doc":"Given `a, b, b', p` where `p` proves `a ≱ b` and `b' := b-1`, prove `a ≤ b'`. ","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.roundDown","kind":"def","line":115,"name":"Mathlib.Tactic.IntervalCases.Methods.roundDown","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L115-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.roundUp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">Methods</span>.<span class=\"name\">roundUp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods\">Methods</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>","info":{"doc":"Given `a, b, a', p` where `p` proves `a ≱ b` and `a' := a+1`, prove `a' ≤ b`. ","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.roundUp","kind":"def","line":113,"name":"Mathlib.Tactic.IntervalCases.Methods.roundUp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L113-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.proveLT\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">Methods</span>.<span class=\"name\">proveLT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods\">Methods</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>","info":{"doc":"Given `a, b`, prove `a ≱ b` or fail. ","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.proveLT","kind":"def","line":111,"name":"Mathlib.Tactic.IntervalCases.Methods.proveLT","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L111-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.proveLE\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">Methods</span>.<span class=\"name\">proveLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods\">Methods</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>","info":{"doc":"Given `a, b`, prove `a ≤ b` or fail. ","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.proveLE","kind":"def","line":109,"name":"Mathlib.Tactic.IntervalCases.Methods.proveLE","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L109-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.initUB\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">Methods</span>.<span class=\"name\">initUB</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods\">Methods</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Bound\">Bound</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></div></div>","info":{"doc":"Given `e`, construct `(bound, n, p)` where `p` is a proof of `e ≤ n` or `e < n`\n(characterized by `bound`), or `failure` if the type is not upper-bounded. ","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.initUB","kind":"def","line":107,"name":"Mathlib.Tactic.IntervalCases.Methods.initUB","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L107-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.initLB\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">Methods</span>.<span class=\"name\">initLB</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods\">Methods</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Bound\">Bound</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></div></div>","info":{"doc":"Given `e`, construct `(bound, n, p)` where `p` is a proof of `n ≤ e` or `n < e`\n(characterized by `bound`), or `failure` if the type is not lower-bounded. ","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.initLB","kind":"def","line":104,"name":"Mathlib.Tactic.IntervalCases.Methods.initLB","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L104-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">Methods</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">initLB </span><span class=\"fn\">initUB</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Bound\">Bound</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proveLE </span><span class=\"fn\">proveLT</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">roundUp </span><span class=\"fn\">roundDown</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eval</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkNumeral</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods\">Methods</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods.mk","kind":"ctor","line":101,"name":"Mathlib.Tactic.IntervalCases.Methods.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L101-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">Methods</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A \"typeclass\" (not actually a class) of methods for the type-specific handling of\n`interval_cases`. To add support for a new type, you have to implement this interface and add\na dispatch case for it in `intervalCases`. ","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Methods","kind":"structure","line":98,"name":"Mathlib.Tactic.IntervalCases.Methods","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L98-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.parseBound\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">parseBound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></div></div>","info":{"doc":"Given a type `ty` (the type of a hypothesis in the context or a provided expression),\nattempt to parse it as an inequality, and return `(a, b, strict, positive)`, where\n`positive` means it is a negated inequality and `strict` means it is a strict inequality\n(`a < b` or `a ≱ b`). `a` is always the lesser argument and `b` the greater one.\n","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.parseBound","kind":"def","line":77,"name":"Mathlib.Tactic.IntervalCases.parseBound","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L77-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Bound.asUpper\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">Bound</span>.<span class=\"name\">asUpper</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Bound\">Bound</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>","info":{"doc":"Assuming `Bound` represents an upper bound, this returns the (inclusive)\ngreatest integer value which is allowed. So `e ≤ 3` means the lower bound is 3 and\n`e < 3` means the upper bound is `2`. Note that in the case of `e < 0` on `Nat`\nthe upper bound is `-1`, which is not representable as a `Nat`;\nthis is why we have to treat the `.lt` and `.le` cases separately instead of normalizing\neverything to `.le` bounds.\n","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Bound.asUpper","kind":"def","line":65,"name":"Mathlib.Tactic.IntervalCases.Bound.asUpper","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L65-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Bound.asLower\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">Bound</span>.<span class=\"name\">asLower</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Bound\">Bound</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>","info":{"doc":"Assuming `Bound` represents a lower bound, this returns the (inclusive)\nleast integer value which is allowed. So `3 ≤ e` means the lower bound is 3 and\n`3 < e` means the lower bound is `4`.\n","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Bound.asLower","kind":"def","line":56,"name":"Mathlib.Tactic.IntervalCases.Bound.asLower","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L56-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Bound.le\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">Bound</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Bound\">Bound</a></div></div>","info":{"doc":"A less-than-or-equal lower bound `n ≤ e` or upper bound `e ≤ n`. ","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Bound.le","kind":"ctor","line":53,"name":"Mathlib.Tactic.IntervalCases.Bound.le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L53-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Bound.lt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">Bound</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Bound\">Bound</a></div></div>","info":{"doc":"A strictly less-than lower bound `n ≱ e` or upper bound `e ≱ n`. (`interval_cases` uses\nless-equal exclusively, so less-than bounds are actually written as not-less-equal\nwith flipped arguments.) ","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Bound.lt","kind":"ctor","line":49,"name":"Mathlib.Tactic.IntervalCases.Bound.lt","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L49-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Bound\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">Bound</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `Bound` represents the result of analyzing a lower or upper bound expression.\nIf `e` is the scrutinee expression, then a lower bound expression like `3 < e`\nis normalized to `¬e ≤ 3` and represented as `.lt 3`, and an upper bound expression\nlike `e ≤ 5` is represented as `.le 5`.\n","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.Bound","kind":"inductive","line":42,"name":"Mathlib.Tactic.IntervalCases.Bound","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L42-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.IntervalCasesSubgoal.goal\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">IntervalCasesSubgoal</span>.<span class=\"name\">goal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.IntervalCasesSubgoal\">IntervalCasesSubgoal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></div></div>","info":{"doc":"The new subgoal, of the form `⊢ x = rhs → tgt` ","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.IntervalCasesSubgoal.goal","kind":"def","line":40,"name":"Mathlib.Tactic.IntervalCases.IntervalCasesSubgoal.goal","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.IntervalCasesSubgoal.value\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">IntervalCasesSubgoal</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.IntervalCasesSubgoal\">IntervalCasesSubgoal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></div></div>","info":{"doc":"The numeric value of the target expression ","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.IntervalCasesSubgoal.value","kind":"def","line":38,"name":"Mathlib.Tactic.IntervalCases.IntervalCasesSubgoal.value","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.IntervalCasesSubgoal.rhs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">IntervalCasesSubgoal</span>.<span class=\"name\">rhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.IntervalCasesSubgoal\">IntervalCasesSubgoal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>","info":{"doc":"The target expression, a numeral in the input type ","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.IntervalCasesSubgoal.rhs","kind":"def","line":36,"name":"Mathlib.Tactic.IntervalCases.IntervalCasesSubgoal.rhs","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.IntervalCasesSubgoal.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">IntervalCasesSubgoal</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.IntervalCasesSubgoal\">IntervalCasesSubgoal</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.IntervalCasesSubgoal.mk","kind":"ctor","line":34,"name":"Mathlib.Tactic.IntervalCases.IntervalCasesSubgoal.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.IntervalCasesSubgoal\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IntervalCases</span>.<span class=\"name\">IntervalCasesSubgoal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The result of `interval_cases` is a list of goals,\none for each integer value between the bounds. ","docLink":"./Mathlib/Tactic/IntervalCases.html#Mathlib.Tactic.IntervalCases.IntervalCasesSubgoal","kind":"structure","line":32,"name":"Mathlib.Tactic.IntervalCases.IntervalCasesSubgoal","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/IntervalCases.lean#L32-L40"}}],"imports":["Init","Mathlib.Tactic.NormNum","Mathlib.Tactic.FinCases","Mathlib.Control.Basic"],"instances":[],"name":"Mathlib.Tactic.IntervalCases"}