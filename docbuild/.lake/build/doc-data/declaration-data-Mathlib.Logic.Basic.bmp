{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#lawful_beq_subsingleton\"><span class=\"name\">lawful_beq_subsingleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst1 </span><span class=\"fn\">inst2</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">inst1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">inst2</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#lawful_beq_subsingleton","kind":"theorem","line":1007,"name":"lawful_beq_subsingleton","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L1007-L1013"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#beq_ext_iff\"><span class=\"name\">beq_ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst1 </span><span class=\"fn\">inst2</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">inst1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">inst2</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">y</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#beq_ext_iff","kind":"theorem","line":998,"name":"beq_ext_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L998-L998"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#beq_ext\"><span class=\"name\">beq_ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst1 </span><span class=\"fn\">inst2</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">y</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">inst1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">inst2</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#beq_ext","kind":"theorem","line":998,"name":"beq_ext","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L998-L1005"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#beq_eq_beq\"><span class=\"name\">beq_eq_beq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a₂</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b₂</span>) <a href=\"./Init/Core.html#Iff\">↔</a> (<span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b₂</span>)</div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#beq_eq_beq","kind":"theorem","line":995,"name":"beq_eq_beq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L995-L996"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#beq_eq_decide\"><span class=\"name\">beq_eq_decide</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"**Alias** of `Bool.beq_eq_decide_eq`.","docLink":"./Mathlib/Logic/Basic.html#beq_eq_decide","kind":"theorem","line":993,"name":"beq_eq_decide","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L993-L993"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#not_beq_of_ne\"><span class=\"name\">not_beq_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ne</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#not_beq_of_ne","kind":"theorem","line":990,"name":"not_beq_of_ne","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L990-L991"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#ite_mem\"><span class=\"name\">ite_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(<span class=\"fn\">p</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span> → <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#ite_mem","kind":"theorem","line":985,"name":"ite_mem","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L985-L986"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#mem_ite\"><span class=\"name\">mem_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">t</span>) <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(<span class=\"fn\">p</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#mem_ite","kind":"theorem","line":982,"name":"mem_ite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L982-L983"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#dite_mem\"><span class=\"name\">dite_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">p</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(if h : <span class=\"fn\">p</span> then <span class=\"fn\"><span class=\"fn\">a</span> <span class=\"fn\">h</span></span> else <span class=\"fn\"><span class=\"fn\">b</span> <span class=\"fn\">h</span></span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(∀ (<span class=\"fn\">h</span> : <span class=\"fn\">p</span>), <span class=\"fn\"><span class=\"fn\">a</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span>), <span class=\"fn\"><span class=\"fn\">b</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#dite_mem","kind":"theorem","line":978,"name":"dite_mem","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L978-L980"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#mem_dite\"><span class=\"name\">mem_dite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">p</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">if h : <span class=\"fn\">p</span> then <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">h</span></span> else <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">h</span></span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(∀ (<span class=\"fn\">h</span> : <span class=\"fn\">p</span>), <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">h</span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span>), <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">h</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#mem_dite","kind":"theorem","line":974,"name":"mem_dite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L974-L976"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Membership.mem.ne_of_not_mem'\"><span class=\"name\">Membership</span>.<span class=\"name\">mem</span>.<span class=\"name\">ne_of_not_mem'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\">s</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"**Alias** of `ne_of_mem_of_not_mem'`.\n\n---\n\n**Alias** of `ne_of_mem_of_not_mem'`.","docLink":"./Mathlib/Logic/Basic.html#Membership.mem.ne_of_not_mem'","kind":"theorem","line":967,"name":"Membership.mem.ne_of_not_mem'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L967-L968"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Membership.mem.ne_of_not_mem\"><span class=\"name\">Membership</span>.<span class=\"name\">mem</span>.<span class=\"name\">ne_of_not_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span> → <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"**Alias** of `ne_of_mem_of_not_mem`.\n\n---\n\n**Alias** of `ne_of_mem_of_not_mem`.","docLink":"./Mathlib/Logic/Basic.html#Membership.mem.ne_of_not_mem","kind":"theorem","line":964,"name":"Membership.mem.ne_of_not_mem","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L964-L965"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Membership.mem.ne_of_notMem'\"><span class=\"name\">Membership</span>.<span class=\"name\">mem</span>.<span class=\"name\">ne_of_notMem'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\">s</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"**Alias** of `ne_of_mem_of_not_mem'`.","docLink":"./Mathlib/Logic/Basic.html#Membership.mem.ne_of_notMem'","kind":"theorem","line":962,"name":"Membership.mem.ne_of_notMem'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L962-L962"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Membership.mem.ne_of_notMem\"><span class=\"name\">Membership</span>.<span class=\"name\">mem</span>.<span class=\"name\">ne_of_notMem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span> → <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"**Alias** of `ne_of_mem_of_not_mem`.","docLink":"./Mathlib/Logic/Basic.html#Membership.mem.ne_of_notMem","kind":"theorem","line":961,"name":"Membership.mem.ne_of_notMem","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L961-L961"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#if_congr\"><span class=\"name\">if_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">Q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_c</span> : <span class=\"fn\">P</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">Q</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_t</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">u</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_e</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">Q</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">v</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#if_congr","kind":"theorem","line":952,"name":"if_congr","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L952-L953"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#if_ctx_congr\"><span class=\"name\">if_ctx_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">Q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_c</span> : <span class=\"fn\">P</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">Q</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_t</span> : <span class=\"fn\"><span class=\"fn\">Q</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">Q</span> → <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">Q</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">v</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#if_ctx_congr","kind":"theorem","line":949,"name":"if_ctx_congr","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L949-L950"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#dite_prop_iff_and\"><span class=\"name\">dite_prop_iff_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><span class=\"fn\">P</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">P</span> <span class=\"fn\">Q</span> <span class=\"fn\">R</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(∀ (<span class=\"fn\">h</span> : <span class=\"fn\">P</span>), <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">h</span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span>), <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">h</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#dite_prop_iff_and","kind":"theorem","line":941,"name":"dite_prop_iff_and","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L941-L943"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#ite_prop_iff_and\"><span class=\"name\">ite_prop_iff_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">Q</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">R</span>) <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(<span class=\"fn\">P</span> → <span class=\"fn\">Q</span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span> → <span class=\"fn\">R</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#ite_prop_iff_and","kind":"theorem","line":938,"name":"ite_prop_iff_and","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L938-L939"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#dite_prop_iff_or\"><span class=\"name\">dite_prop_iff_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><span class=\"fn\">P</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">P</span> <span class=\"fn\">Q</span> <span class=\"fn\">R</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> (<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">P</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">p</span></span>) <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#dite_prop_iff_or","kind":"theorem","line":933,"name":"dite_prop_iff_or","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L933-L935"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#ite_prop_iff_or\"><span class=\"name\">ite_prop_iff_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">Q</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">R</span>) <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#ite_prop_iff_or","kind":"theorem","line":930,"name":"ite_prop_iff_or","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L930-L931"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#ite_ite_comm\"><span class=\"name\">ite_ite_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">Q</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">P</span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">Q</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">Q</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">Q</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#ite_ite_comm","kind":"theorem","line":921,"name":"ite_ite_comm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L921-L924"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#dite_dite_comm\"><span class=\"name\">dite_dite_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <span class=\"fn\"><span class=\"fn\">P</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">Q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <span class=\"fn\"><span class=\"fn\">Q</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">Q</span> → <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">P</span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">Q</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(if p : <span class=\"fn\">P</span> then <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">p</span></span> else <span class=\"fn\">if q : <span class=\"fn\">Q</span> then <span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">q</span></span> else <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if q : <span class=\"fn\">Q</span> then <span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">q</span></span> else <span class=\"fn\">if p : <span class=\"fn\">P</span> then <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">p</span></span> else <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#dite_dite_comm","kind":"theorem","line":916,"name":"dite_dite_comm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L916-L919"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#ite_or\"><span class=\"name\">ite_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">Q</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">Q</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">Q</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#ite_or","kind":"theorem","line":913,"name":"ite_or","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L913-L914"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#ite_and\"><span class=\"name\">ite_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">Q</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">Q</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#ite_and","kind":"theorem","line":910,"name":"ite_and","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L910-L911"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#ite_apply\"><span class=\"name\">ite_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">σ</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">g</span>) <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"A 'ite' producing a `Pi` type `Π a, σ a`, applied to a value `a : α` is a `ite` that applies\neither branch to `a`. ","docLink":"./Mathlib/Logic/Basic.html#ite_apply","kind":"theorem","line":902,"name":"ite_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L902-L905"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#dite_apply\"><span class=\"name\">dite_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">P</span> → <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">σ</span> <span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span> → <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">σ</span> <span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">P</span> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if h : <span class=\"fn\">P</span> then <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">h</span> <span class=\"fn\">a</span></span> else <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">h</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"A 'dite' producing a `Pi` type `Π a, σ a`, applied to a value `a : α` is a `dite` that applies\neither branch to `a`. ","docLink":"./Mathlib/Logic/Basic.html#dite_apply","kind":"theorem","line":897,"name":"dite_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L897-L900"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#apply_ite₂\"><span class=\"name\">apply_ite₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> u_5}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> (<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">b</span>) (<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">d</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span> <span class=\"fn\">d</span></span></div></div>","info":{"doc":"A two-argument function applied to two `ite`s is a `ite` of that two-argument function\napplied to each of the branches. ","docLink":"./Mathlib/Logic/Basic.html#apply_ite₂","kind":"theorem","line":891,"name":"apply_ite₂","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L891-L895"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#apply_dite₂\"><span class=\"name\">apply_dite₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> u_5}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">P</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">P</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">P</span> <span class=\"fn\">c</span> <span class=\"fn\">d</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if h : <span class=\"fn\">P</span> then <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">a</span> <span class=\"fn\">h</span>)</span> <span class=\"fn\">(<span class=\"fn\">c</span> <span class=\"fn\">h</span>)</span></span> else <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">b</span> <span class=\"fn\">h</span>)</span> <span class=\"fn\">(<span class=\"fn\">d</span> <span class=\"fn\">h</span>)</span></span></span></div></div>","info":{"doc":"A two-argument function applied to two `dite`s is a `dite` of that two-argument function\napplied to each of the branches. ","docLink":"./Mathlib/Logic/Basic.html#apply_dite₂","kind":"theorem","line":884,"name":"apply_dite₂","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L884-L889"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#ite_eq_or_eq\"><span class=\"name\">ite_eq_or_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Or\">∨</a> (<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#ite_eq_or_eq","kind":"theorem","line":881,"name":"ite_eq_or_eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L881-L882"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#dite_eq_or_eq\"><span class=\"name\">dite_eq_or_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <span class=\"fn\"><span class=\"fn\">P</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">P</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">P</span> <span class=\"fn\">A</span> <span class=\"fn\">B</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">h</span></span>) <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">P</span> <span class=\"fn\">A</span> <span class=\"fn\">B</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">h</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#dite_eq_or_eq","kind":"theorem","line":878,"name":"dite_eq_or_eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L878-L879"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Ne.ite_ne_right_iff\"><span class=\"name\">Ne</span>.<span class=\"name\">ite_ne_right_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">b</span>) <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Ne.ite_ne_right_iff","kind":"theorem","line":873,"name":"Ne.ite_ne_right_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L873-L874"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Ne.ite_ne_left_iff\"><span class=\"name\">Ne</span>.<span class=\"name\">ite_ne_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">b</span>) <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Ne.ite_ne_left_iff","kind":"theorem","line":870,"name":"Ne.ite_ne_left_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L870-L871"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Ne.dite_ne_right_iff\"><span class=\"name\">Ne</span>.<span class=\"name\">dite_ne_right_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <span class=\"fn\"><span class=\"fn\">P</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">h</span> : <span class=\"fn\">P</span>), <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">P</span> <span class=\"fn\">A</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span>) =&gt; <span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Ne.dite_ne_right_iff","kind":"theorem","line":867,"name":"Ne.dite_ne_right_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L867-L868"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Ne.dite_ne_left_iff\"><span class=\"name\">Ne</span>.<span class=\"name\">dite_ne_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span>), <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">h</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">P</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">P</span>) =&gt; <span class=\"fn\">a</span>)</span> <span class=\"fn\">B</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Ne.dite_ne_left_iff","kind":"theorem","line":864,"name":"Ne.dite_ne_left_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L864-L865"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Ne.ite_eq_right_iff\"><span class=\"name\">Ne</span>.<span class=\"name\">ite_eq_right_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Ne.ite_eq_right_iff","kind":"theorem","line":861,"name":"Ne.ite_eq_right_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L861-L862"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Ne.ite_eq_left_iff\"><span class=\"name\">Ne</span>.<span class=\"name\">ite_eq_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Ne.ite_eq_left_iff","kind":"theorem","line":858,"name":"Ne.ite_eq_left_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L858-L859"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Ne.dite_eq_right_iff\"><span class=\"name\">Ne</span>.<span class=\"name\">dite_eq_right_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <span class=\"fn\"><span class=\"fn\">P</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">h</span> : <span class=\"fn\">P</span>), <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">P</span> <span class=\"fn\">A</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span>) =&gt; <span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Ne.dite_eq_right_iff","kind":"theorem","line":855,"name":"Ne.dite_eq_right_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L855-L856"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Ne.dite_eq_left_iff\"><span class=\"name\">Ne</span>.<span class=\"name\">dite_eq_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span>), <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">h</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">P</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">P</span>) =&gt; <span class=\"fn\">a</span>)</span> <span class=\"fn\">B</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Ne.dite_eq_left_iff","kind":"theorem","line":852,"name":"Ne.dite_eq_left_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L852-L853"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#ite_ne_right_iff\"><span class=\"name\">ite_ne_right_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">b</span>) <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#ite_ne_right_iff","kind":"theorem","line":849,"name":"ite_ne_right_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L849-L850"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#ite_ne_left_iff\"><span class=\"name\">ite_ne_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">b</span>) <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#ite_ne_left_iff","kind":"theorem","line":846,"name":"ite_ne_left_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L846-L847"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#dite_ne_right_iff\"><span class=\"name\">dite_ne_right_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <span class=\"fn\"><span class=\"fn\">P</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">P</span> <span class=\"fn\">A</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span>) =&gt; <span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">P</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#dite_ne_right_iff","kind":"theorem","line":843,"name":"dite_ne_right_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L843-L844"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#dite_ne_left_iff\"><span class=\"name\">dite_ne_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">P</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">P</span>) =&gt; <span class=\"fn\">a</span>)</span> <span class=\"fn\">B</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">h</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#dite_ne_left_iff","kind":"theorem","line":840,"name":"dite_ne_left_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L840-L841"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#ite_eq_iff'\"><span class=\"name\">ite_eq_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(<span class=\"fn\">P</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span> → <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#ite_eq_iff'","kind":"theorem","line":838,"name":"ite_eq_iff'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L838-L838"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#dite_eq_iff'\"><span class=\"name\">dite_eq_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <span class=\"fn\"><span class=\"fn\">P</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">P</span> <span class=\"fn\">A</span> <span class=\"fn\">B</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(∀ (<span class=\"fn\">h</span> : <span class=\"fn\">P</span>), <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span>), <span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#dite_eq_iff'","kind":"theorem","line":834,"name":"dite_eq_iff'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L834-L836"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#eq_ite_iff\"><span class=\"name\">eq_ite_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">c</span>) <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#eq_ite_iff","kind":"theorem","line":831,"name":"eq_ite_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L831-L832"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#ite_eq_iff\"><span class=\"name\">ite_eq_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#ite_eq_iff","kind":"theorem","line":828,"name":"ite_eq_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L828-L829"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#dite_eq_iff\"><span class=\"name\">dite_eq_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <span class=\"fn\"><span class=\"fn\">P</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">P</span> <span class=\"fn\">A</span> <span class=\"fn\">B</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> (<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">P</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#dite_eq_iff","kind":"theorem","line":825,"name":"dite_eq_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L825-L826"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#exists_mem_or_left\"><span class=\"name\">exists_mem_or_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r </span><span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x_1</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> (<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x_1</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span></span>) <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x_1</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#exists_mem_or_left","kind":"theorem","line":813,"name":"exists_mem_or_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L813-L816"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall₂_or_left\"><span class=\"name\">forall₂_or_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r </span><span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall₂_or_left","kind":"theorem","line":810,"name":"forall₂_or_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L810-L811"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#exists_mem_or\"><span class=\"name\">exists_mem_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> (<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span>) <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#exists_mem_or","kind":"theorem","line":807,"name":"exists_mem_or","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L807-L808"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall_and_right\"><span class=\"name\">forall_and_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">q</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">q</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall_and_right","kind":"theorem","line":804,"name":"forall_and_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L804-L805"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall_and_left\"><span class=\"name\">forall_and_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall_and_left","kind":"theorem","line":801,"name":"forall_and_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L801-L802"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall₂_and\"><span class=\"name\">forall₂_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>), <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall₂_and","kind":"theorem","line":798,"name":"forall₂_and","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L798-L799"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#not_forall₂\"><span class=\"name\">not_forall₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#not_forall₂","kind":"theorem","line":795,"name":"not_forall₂","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L795-L796"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Decidable.not_forall₂\"><span class=\"name\">Decidable</span>.<span class=\"name\">not_forall₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span>)</span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Decidable.not_forall₂","kind":"theorem","line":790,"name":"Decidable.not_forall₂","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L790-L793"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#not_forall₂_of_exists₂_not\"><span class=\"name\">not_forall₂_of_exists₂_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span>) → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#not_forall₂_of_exists₂_not","kind":"theorem","line":786,"name":"not_forall₂_of_exists₂_not","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L786-L787"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#not_exists_mem\"><span class=\"name\">not_exists_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Not\">¬</a><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>), <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#not_exists_mem","kind":"theorem","line":784,"name":"not_exists_mem","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L784-L784"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#exists_of_exists_mem\"><span class=\"name\">exists_of_exists_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x_1</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span>) → <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#exists_of_exists_mem","kind":"theorem","line":780,"name":"exists_of_exists_mem","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L780-L781"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#exists_mem_of_exists\"><span class=\"name\">exists_mem_of_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span>) → <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x_1</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#exists_mem_of_exists","kind":"theorem","line":777,"name":"exists_mem_of_exists","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L777-L778"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#BEx.imp_left\"><span class=\"name\">BEx</span>.<span class=\"name\">imp_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r </span><span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x_1</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span></span>) → <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x_1</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#BEx.imp_left","kind":"theorem","line":774,"name":"BEx.imp_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L774-L775"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#BAll.imp_left\"><span class=\"name\">BAll</span>.<span class=\"name\">imp_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r </span><span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#BAll.imp_left","kind":"theorem","line":771,"name":"BAll.imp_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L771-L772"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#BEx.imp_right\"><span class=\"name\">BEx</span>.<span class=\"name\">imp_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span> → <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span>) → <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#BEx.imp_right","kind":"theorem","line":768,"name":"BEx.imp_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L768-L769"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#BAll.imp_right\"><span class=\"name\">BAll</span>.<span class=\"name\">imp_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span> → <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#BAll.imp_right","kind":"theorem","line":765,"name":"BAll.imp_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L765-L766"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#BEx.intro\"><span class=\"name\">BEx</span>.<span class=\"name\">intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span> <span class=\"fn\">h₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#BEx.intro","kind":"theorem","line":762,"name":"BEx.intro","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L762-L763"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#BEx.elim\"><span class=\"name\">BEx</span>.<span class=\"name\">elim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span>) → <span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span> <span class=\"fn\">h</span></span> → <span class=\"fn\">b</span></span>)</span> → <span class=\"fn\">b</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#BEx.elim","kind":"theorem","line":759,"name":"BEx.elim","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L759-L760"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#bex_def\"><span class=\"name\">bex_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x_1</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#bex_def","kind":"theorem","line":756,"name":"bex_def","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L756-L757"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Exists.classicalRecOn\"><span class=\"name\">Exists</span>.<span class=\"name\">classicalRecOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">C</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span></div></div>","info":{"doc":"This function has the same type as `Exists.recOn`, and can be used to case on an equality,\nbut `Exists.recOn` can only eliminate into Prop, while this version eliminates into any universe\nusing the axiom of choice. ","docLink":"./Mathlib/Logic/Basic.html#Exists.classicalRecOn","kind":"def","line":744,"name":"Exists.classicalRecOn","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L744-L749"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Classical.prop_complete\"><span class=\"name\">Classical</span>.<span class=\"name\">prop_complete</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#True\">True</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#False\">False</a></div></div>","info":{"doc":"**Alias** of `Classical.propComplete`.","docLink":"./Mathlib/Logic/Basic.html#Classical.prop_complete","kind":"theorem","line":740,"name":"Classical.prop_complete","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L740-L740"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Classical.by_contradiction\"><span class=\"name\">Classical</span>.<span class=\"name\">by_contradiction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span> → <a href=\"./Init/Prelude.html#False\">False</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span></div></div>","info":{"doc":"**Alias** of `Classical.byContradiction`.","docLink":"./Mathlib/Logic/Basic.html#Classical.by_contradiction","kind":"theorem","line":734,"name":"Classical.by_contradiction","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L734-L734"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Classical.by_cases\"><span class=\"name\">Classical</span>.<span class=\"name\">by_cases</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpq</span> : <span class=\"fn\"><span class=\"fn\">p</span> → <span class=\"fn\">q</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hnpq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span> → <span class=\"fn\">q</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">q</span></div></div>","info":{"doc":"**Alias** of `Classical.byCases`.","docLink":"./Mathlib/Logic/Basic.html#Classical.by_cases","kind":"theorem","line":733,"name":"Classical.by_cases","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L733-L733"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Classical.axiom_of_choice\"><span class=\"name\">Classical</span>.<span class=\"name\">axiom_of_choice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">f</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></span></div></div>","info":{"doc":"**Alias** of `Classical.axiomOfChoice`.\n\n---\n\nthe axiom of choice ","docLink":"./Mathlib/Logic/Basic.html#Classical.axiom_of_choice","kind":"theorem","line":732,"name":"Classical.axiom_of_choice","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L732-L732"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Classical.choose_eq'\"><span class=\"name\">Classical</span>.<span class=\"name\">choose_eq'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⋯</span>.<a href=\"./Init/Classical.html#Exists.choose\">choose</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Classical.choose_eq'","kind":"theorem","line":728,"name":"Classical.choose_eq'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L728-L730"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Classical.choose_eq\"><span class=\"name\">Classical</span>.<span class=\"name\">choose_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⋯</span>.<a href=\"./Init/Classical.html#Exists.choose\">choose</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Classical.choose_eq","kind":"theorem","line":726,"name":"Classical.choose_eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L726-L726"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Classical.choice_of_byContradiction'\"><span class=\"name\">Classical</span>.<span class=\"name\">choice_of_byContradiction'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contra</span> : <span class=\"fn\">(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <a href=\"./Init/Prelude.html#False\">False</a></span>) → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`Classical.byContradiction'` is equivalent to lean's axiom `Classical.choice`. ","docLink":"./Mathlib/Logic/Basic.html#Classical.choice_of_byContradiction'","kind":"def","line":722,"name":"Classical.choice_of_byContradiction'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L722-L724"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Classical.byContradiction'\"><span class=\"name\">Classical</span>.<span class=\"name\">byContradiction'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <a href=\"./Init/Prelude.html#False\">False</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"A version of `byContradiction` that uses types instead of propositions. ","docLink":"./Mathlib/Logic/Basic.html#Classical.byContradiction'","kind":"def","line":718,"name":"Classical.byContradiction'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L718-L720"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Classical.some_spec₂\"><span class=\"name\">Classical</span>.<span class=\"name\">some_spec₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpq</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">(<a href=\"./Init/Classical.html#Classical.choose\">choose</a> <span class=\"fn\">h</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Classical.some_spec₂","kind":"theorem","line":715,"name":"Classical.some_spec₂","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L715-L716"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Classical.existsCases\"><span class=\"name\">Classical</span>.<span class=\"name\">existsCases</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Sort</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H0</span> : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">C</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span></div></div>","info":{"doc":"Construct a function from a default value `H0`, and a function to use if there exists a value\nsatisfying the predicate. ","docLink":"./Mathlib/Logic/Basic.html#Classical.existsCases","kind":"def","line":710,"name":"Classical.existsCases","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L710-L713"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Classical.decEq\"><span class=\"name\">Classical</span>.<span class=\"name\">decEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Any type `α` has decidable equality classically. ","docLink":"./Mathlib/Logic/Basic.html#Classical.decEq","kind":"def","line":707,"name":"Classical.decEq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L707-L708"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Classical.decRel\"><span class=\"name\">Classical</span>.<span class=\"name\">decRel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"Any relation `p` is decidable classically. ","docLink":"./Mathlib/Logic/Basic.html#Classical.decRel","kind":"def","line":704,"name":"Classical.decRel","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L704-L705"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Classical.decPred\"><span class=\"name\">Classical</span>.<span class=\"name\">decPred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"Any predicate `p` is decidable classically. ","docLink":"./Mathlib/Logic/Basic.html#Classical.decPred","kind":"def","line":701,"name":"Classical.decPred","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L701-L702"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Classical.dec\"><span class=\"name\">Classical</span>.<span class=\"name\">dec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"Any prop `p` is decidable classically. A shorthand for `Classical.propDecidable`. ","docLink":"./Mathlib/Logic/Basic.html#Classical.dec","kind":"def","line":696,"name":"Classical.dec","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L696-L697"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall_true_left\"><span class=\"name\">forall_true_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#True\">True</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#True\">True</a>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#True.intro\">True.intro</a></span></div></div>","info":{"doc":"See `IsEmpty.forall_iff` for the `False` version. ","docLink":"./Mathlib/Logic/Basic.html#forall_true_left","kind":"theorem","line":685,"name":"forall_true_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L685-L687"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#iff_eq_eq\"><span class=\"name\">iff_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#iff_eq_eq","kind":"theorem","line":681,"name":"iff_eq_eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L681-L681"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Iff.eq\"><span class=\"name\">Iff</span>.<span class=\"name\">eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span>) → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"**Alias** of `propext`.\n\n---\n\nThe [axiom](https://lean-lang.org/doc/reference/4.24.0-rc1/find/?domain=Verso.Genre.Manual.section&name=axioms) of **propositional extensionality**. It asserts that if\npropositions `a` and `b` are logically equivalent (that is, if `a` can be proved from `b` and vice\nversa), then `a` and `b` are *equal*, meaning `a` can be replaced with `b` in all contexts.\n\nThe standard logical connectives provably respect propositional extensionality. However, an axiom is\nneeded for higher order expressions like `P a` where `P : Prop → Prop` is unknown, as well as for\nequality. Propositional extensionality is intuitionistically valid.\n","docLink":"./Mathlib/Logic/Basic.html#Iff.eq","kind":"def","line":679,"name":"Iff.eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L679-L679"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#eq_false_intro\"><span class=\"name\">eq_false_intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#False\">False</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#eq_false_intro","kind":"theorem","line":676,"name":"eq_false_intro","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L676-L676"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#eq_true_intro\"><span class=\"name\">eq_true_intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#True\">True</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#eq_true_intro","kind":"theorem","line":674,"name":"eq_true_intro","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L674-L674"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#imp_congr_ctx_eq\"><span class=\"name\">imp_congr_ctx_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">c</span> → <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> → <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">c</span> → <span class=\"fn\">d</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#imp_congr_ctx_eq","kind":"theorem","line":671,"name":"imp_congr_ctx_eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L671-L672"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#imp_congr_eq\"><span class=\"name\">imp_congr_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> → <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">c</span> → <span class=\"fn\">d</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#imp_congr_eq","kind":"theorem","line":668,"name":"imp_congr_eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L668-L669"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall_prop_congr'\"><span class=\"name\">forall_prop_congr'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">p'</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">q </span><span class=\"fn\">q'</span> : <span class=\"fn\"><span class=\"fn\">p</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hq</span> : <span class=\"fn\">∀ (<span class=\"fn\">h</span> : <span class=\"fn\">p</span>), <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">q'</span> <span class=\"fn\">h</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">h</span> : <span class=\"fn\">p</span>), <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">h</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∀ (<span class=\"fn\">h</span> : <span class=\"fn\">p'</span>), <span class=\"fn\"><span class=\"fn\">q'</span> <span class=\"fn\">⋯</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall_prop_congr'","kind":"theorem","line":664,"name":"forall_prop_congr'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L664-L666"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall_prop_congr\"><span class=\"name\">forall_prop_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">p'</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">q </span><span class=\"fn\">q'</span> : <span class=\"fn\"><span class=\"fn\">p</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hq</span> : <span class=\"fn\">∀ (<span class=\"fn\">h</span> : <span class=\"fn\">p</span>), <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">q'</span> <span class=\"fn\">h</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">h</span> : <span class=\"fn\">p</span>), <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">h</span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">h</span> : <span class=\"fn\">p'</span>), <span class=\"fn\"><span class=\"fn\">q'</span> <span class=\"fn\">⋯</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall_prop_congr","kind":"theorem","line":660,"name":"forall_prop_congr","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L660-L662"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#exists_prop_of_false\"><span class=\"name\">exists_prop_of_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\">p</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span> → <a href=\"./Init/Prelude.html#Not\">¬</a><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h'</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">p</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">h'</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#exists_prop_of_false","kind":"theorem","line":655,"name":"exists_prop_of_false","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L655-L656"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#exists_iff_of_forall\"><span class=\"name\">exists_iff_of_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\">p</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">h</span> : <span class=\"fn\">p</span>), <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">h</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">p</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">h</span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#exists_iff_of_forall","kind":"theorem","line":652,"name":"exists_iff_of_forall","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L652-L653"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Prop.forall_iff\"><span class=\"name\">Prop</span>.<span class=\"name\">forall_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Prop</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">h</span> : <a href=\"./foundational_types.html\">Prop</a>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">h</span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#False\">False</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#True\">True</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Prop.forall_iff","kind":"theorem","line":649,"name":"Prop.forall_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L649-L650"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Prop.exists_iff\"><span class=\"name\">Prop</span>.<span class=\"name\">exists_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Prop</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./foundational_types.html\">Prop</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">h</span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#False\">False</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#True\">True</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Prop.exists_iff","kind":"theorem","line":645,"name":"Prop.exists_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L645-L647"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Exists.snd\"><span class=\"name\">Exists</span>.<span class=\"name\">snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">b</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Exists\">Exists</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Exists.snd","kind":"theorem","line":642,"name":"Exists.snd","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L642-L643"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Exists.fst\"><span class=\"name\">Exists</span>.<span class=\"name\">fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">b</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#Exists\">Exists</a> <span class=\"fn\">p</span></span> → <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Exists.fst","kind":"theorem","line":639,"name":"Exists.fst","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L639-L640"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall_and_index'\"><span class=\"name\">forall_and_index'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">p</span> → <span class=\"fn\"><span class=\"fn\">q</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">hp</span> : <span class=\"fn\">p</span>) (<span class=\"fn\">hq</span> : <span class=\"fn\">q</span>), <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">hp</span> <span class=\"fn\">hq</span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">q</span>), <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall_and_index'","kind":"theorem","line":635,"name":"forall_and_index'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L635-L637"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall_and_index\"><span class=\"name\">forall_and_index</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">q</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">q</span>), <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">h</span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">hp</span> : <span class=\"fn\">p</span>) (<span class=\"fn\">hq</span> : <span class=\"fn\">q</span>), <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">⋯</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall_and_index","kind":"theorem","line":630,"name":"forall_and_index","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L630-L633"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall_or_right\"><span class=\"name\">forall_or_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">q</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">q</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall_or_right","kind":"theorem","line":627,"name":"forall_or_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L627-L628"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Decidable.forall_or_right\"><span class=\"name\">Decidable</span>.<span class=\"name\">forall_or_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">q</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">q</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Decidable.forall_or_right","kind":"theorem","line":624,"name":"Decidable.forall_or_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L624-L625"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall_or_left\"><span class=\"name\">forall_or_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall_or_left","kind":"theorem","line":620,"name":"forall_or_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L620-L621"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Decidable.forall_or_left\"><span class=\"name\">Decidable</span>.<span class=\"name\">forall_or_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Decidable.forall_or_left","kind":"theorem","line":615,"name":"Decidable.forall_or_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L615-L618"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall_or_of_or_forall\"><span class=\"name\">forall_or_of_or_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall_or_of_or_forall","kind":"theorem","line":610,"name":"forall_or_of_or_forall","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L610-L612"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#And.exists\"><span class=\"name\">And</span>.<span class=\"name\">exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">q</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">q</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">h</span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">hp</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">p</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">hq</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">q</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#And.exists","kind":"theorem","line":607,"name":"And.exists","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L607-L608"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#exists₂_comm\"><span class=\"name\">exists₂_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι₁</span> : <a href=\"./foundational_types.html\">Sort</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι₂</span> : <a href=\"./foundational_types.html\">Sort</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ₁</span> : <span class=\"fn\"><span class=\"fn\">ι₁</span> → <a href=\"./foundational_types.html\">Sort</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ₂</span> : <span class=\"fn\"><span class=\"fn\">ι₂</span> → <a href=\"./foundational_types.html\">Sort</a> u_6</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">(<span class=\"fn\">i₁</span> : <span class=\"fn\">ι₁</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ₁</span> <span class=\"fn\">i₁</span></span> → <span class=\"fn\">(<span class=\"fn\">i₂</span> : <span class=\"fn\">ι₂</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ₂</span> <span class=\"fn\">i₂</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">i₁</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">ι₁</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">j₁</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">κ₁</span> <span class=\"fn\">i₁</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">i₂</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">ι₂</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">j₂</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">κ₂</span> <span class=\"fn\">i₂</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">i₁</span> <span class=\"fn\">j₁</span> <span class=\"fn\">i₂</span> <span class=\"fn\">j₂</span></span>) <a href=\"./Init/Core.html#Iff\">↔</a>   <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">i₂</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">ι₂</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">j₂</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">κ₂</span> <span class=\"fn\">i₂</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">i₁</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">ι₁</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">j₁</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">κ₁</span> <span class=\"fn\">i₁</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">i₁</span> <span class=\"fn\">j₁</span> <span class=\"fn\">i₂</span> <span class=\"fn\">j₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#exists₂_comm","kind":"theorem","line":602,"name":"exists₂_comm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L602-L605"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall_eq_apply_imp_iff'\"><span class=\"name\">forall_eq_apply_imp_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">b</span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall_eq_apply_imp_iff'","kind":"theorem","line":599,"name":"forall_eq_apply_imp_iff'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L599-L600"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall_apply_eq_imp_iff'\"><span class=\"name\">forall_apply_eq_imp_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">b</span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall_apply_eq_imp_iff'","kind":"theorem","line":596,"name":"forall_apply_eq_imp_iff'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L596-L597"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#exists_exists_exists_and_eq\"><span class=\"name\">exists_exists_exists_and_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">c</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">γ</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> (<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">β</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">c</span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">β</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#exists_exists_exists_and_eq","kind":"theorem","line":590,"name":"exists_exists_exists_and_eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L590-L594"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#exists_exists_and_exists_and_eq_and\"><span class=\"name\">exists_exists_and_exists_and_eq_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">c</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">γ</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> (<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">β</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">c</span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">β</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#exists_exists_and_exists_and_eq_and","kind":"theorem","line":584,"name":"exists_exists_and_exists_and_eq_and","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L584-L588"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#exists_exists_eq_and\"><span class=\"name\">exists_exists_eq_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">β</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> (<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">b</span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#exists_exists_eq_and","kind":"theorem","line":580,"name":"exists_exists_eq_and","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L580-L582"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#exists_exists_and_eq_and\"><span class=\"name\">exists_exists_and_eq_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">β</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> (<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">b</span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#exists_exists_and_eq_and","kind":"theorem","line":576,"name":"exists_exists_and_eq_and","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L576-L578"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#exists_apply_eq\"><span class=\"name\">exists_apply_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">f</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"The constant function witnesses that\nthere exists a function sending a given term to a given term.\n\nThis is sometimes useful in `simp` to discharge side conditions.\n","docLink":"./Mathlib/Logic/Basic.html#exists_apply_eq","kind":"theorem","line":568,"name":"exists_apply_eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L568-L574"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#exists_apply_eq_apply3'\"><span class=\"name\">exists_apply_eq_apply3'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Sort</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">δ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\">γ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">β</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">z</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">γ</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#exists_apply_eq_apply3'","kind":"theorem","line":563,"name":"exists_apply_eq_apply3'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L563-L566"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#exists_apply_eq_apply3\"><span class=\"name\">exists_apply_eq_apply3</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Sort</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">δ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\">γ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">β</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">z</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">γ</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#exists_apply_eq_apply3","kind":"theorem","line":558,"name":"exists_apply_eq_apply3","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L558-L561"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#exists_apply_eq_apply2'\"><span class=\"name\">exists_apply_eq_apply2'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">β</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#exists_apply_eq_apply2'","kind":"theorem","line":554,"name":"exists_apply_eq_apply2'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L554-L556"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#exists_apply_eq_apply2\"><span class=\"name\">exists_apply_eq_apply2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">β</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#exists_apply_eq_apply2","kind":"theorem","line":550,"name":"exists_apply_eq_apply2","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L550-L552"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#exists_apply_eq_apply'\"><span class=\"name\">exists_apply_eq_apply'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a'</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#exists_apply_eq_apply'","kind":"theorem","line":547,"name":"exists_apply_eq_apply'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L547-L548"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Ne.ne_or_ne\"><span class=\"name\">Ne</span>.<span class=\"name\">ne_or_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">z</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">z</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Ne.ne_or_ne","kind":"theorem","line":544,"name":"Ne.ne_or_ne","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L544-L545"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#and_forall_ne\"><span class=\"name\">and_forall_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a</span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">b</span></span></span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">b</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#and_forall_ne","kind":"theorem","line":541,"name":"and_forall_ne","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L541-L542"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Decidable.and_forall_ne\"><span class=\"name\">Decidable</span>.<span class=\"name\">and_forall_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a</span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">b</span></span></span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">b</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Decidable.and_forall_ne","kind":"theorem","line":537,"name":"Decidable.and_forall_ne","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L537-L539"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall₃_true_iff\"><span class=\"name\">forall₃_true_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_4</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>) (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>), <a href=\"./Init/Prelude.html#True\">True</a>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#True\">True</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall₃_true_iff","kind":"theorem","line":534,"name":"forall₃_true_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L534-L535"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall₂_true_iff\"><span class=\"name\">forall₂_true_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> u_3</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>), <a href=\"./Init/Prelude.html#True\">True</a>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#True\">True</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall₂_true_iff","kind":"theorem","line":531,"name":"forall₂_true_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L531-L531"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall_true_iff'\"><span class=\"name\">forall_true_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#True\">True</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#True\">True</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall_true_iff'","kind":"theorem","line":527,"name":"forall_true_iff'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L527-L528"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall_true_iff\"><span class=\"name\">forall_true_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <a href=\"./Init/Prelude.html#True\">True</a>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#True\">True</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall_true_iff","kind":"theorem","line":522,"name":"forall_true_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L522-L523"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall_imp_iff_exists_imp\"><span class=\"name\">forall_imp_iff_exists_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">ha</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span> → <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall_imp_iff_exists_imp","kind":"theorem","line":515,"name":"forall_imp_iff_exists_imp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L515-L520"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#exists_or_forall_not\"><span class=\"name\">exists_or_forall_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span></span>) <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#exists_or_forall_not","kind":"theorem","line":512,"name":"exists_or_forall_not","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L512-L513"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall_or_exists_not\"><span class=\"name\">forall_or_exists_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall_or_exists_not","kind":"theorem","line":509,"name":"forall_or_exists_not","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L509-L510"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#not_forall_not\"><span class=\"name\">not_forall_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#not_forall_not","kind":"theorem","line":504,"name":"not_forall_not","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L504-L505"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#exists_and_exists_comm\"><span class=\"name\">exists_and_exists_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">((<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span></span>) <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">β</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">b</span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">β</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#exists_and_exists_comm","kind":"theorem","line":498,"name":"exists_and_exists_comm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L498-L500"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#exists_swap\"><span class=\"name\">exists_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">β</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">β</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#exists_swap","kind":"theorem","line":495,"name":"exists_swap","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L495-L496"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#imp_forall_iff_forall\"><span class=\"name\">imp_forall_iff_forall</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">B</span> : <span class=\"fn\"><span class=\"fn\">A</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">A</span> → <span class=\"fn\">∀ (<span class=\"fn\">h</span> : <span class=\"fn\">A</span>), <span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">h</span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">h</span> : <span class=\"fn\">A</span>), <span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">h</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#imp_forall_iff_forall","kind":"theorem","line":492,"name":"imp_forall_iff_forall","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L492-L493"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#imp_forall_iff\"><span class=\"name\">imp_forall_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">p</span> → <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> → <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"We intentionally restrict the type of `α` in this lemma so that this is a safer to use in simp\nthan `forall_swap`. ","docLink":"./Mathlib/Logic/Basic.html#imp_forall_iff","kind":"theorem","line":487,"name":"imp_forall_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L487-L490"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall₂_swap\"><span class=\"name\">forall₂_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι₁</span> : <a href=\"./foundational_types.html\">Sort</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι₂</span> : <a href=\"./foundational_types.html\">Sort</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ₁</span> : <span class=\"fn\"><span class=\"fn\">ι₁</span> → <a href=\"./foundational_types.html\">Sort</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ₂</span> : <span class=\"fn\"><span class=\"fn\">ι₂</span> → <a href=\"./foundational_types.html\">Sort</a> u_6</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">(<span class=\"fn\">i₁</span> : <span class=\"fn\">ι₁</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ₁</span> <span class=\"fn\">i₁</span></span> → <span class=\"fn\">(<span class=\"fn\">i₂</span> : <span class=\"fn\">ι₂</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ₂</span> <span class=\"fn\">i₂</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">i₁</span> : <span class=\"fn\">ι₁</span>) (<span class=\"fn\">j₁</span> : <span class=\"fn\"><span class=\"fn\">κ₁</span> <span class=\"fn\">i₁</span></span>) (<span class=\"fn\">i₂</span> : <span class=\"fn\">ι₂</span>) (<span class=\"fn\">j₂</span> : <span class=\"fn\"><span class=\"fn\">κ₂</span> <span class=\"fn\">i₂</span></span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">i₁</span> <span class=\"fn\">j₁</span> <span class=\"fn\">i₂</span> <span class=\"fn\">j₂</span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∀ (<span class=\"fn\">i₂</span> : <span class=\"fn\">ι₂</span>) (<span class=\"fn\">j₂</span> : <span class=\"fn\"><span class=\"fn\">κ₂</span> <span class=\"fn\">i₂</span></span>) (<span class=\"fn\">i₁</span> : <span class=\"fn\">ι₁</span>) (<span class=\"fn\">j₁</span> : <span class=\"fn\"><span class=\"fn\">κ₁</span> <span class=\"fn\">i₁</span></span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">i₁</span> <span class=\"fn\">j₁</span> <span class=\"fn\">i₂</span> <span class=\"fn\">j₂</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall₂_swap","kind":"theorem","line":483,"name":"forall₂_swap","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L483-L485"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall_swap\"><span class=\"name\">forall_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">y</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall_swap","kind":"theorem","line":480,"name":"forall_swap","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L480-L481"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Exists₃.imp\"><span class=\"name\">Exists₃</span>.<span class=\"name\">imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_3</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>) (<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span> → <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">c</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>) → <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">c</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Exists₃.imp","kind":"theorem","line":472,"name":"Exists₃.imp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L472-L474"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Exists₂.imp\"><span class=\"name\">Exists₂</span>.<span class=\"name\">imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>) → <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Exists₂.imp","kind":"theorem","line":468,"name":"Exists₂.imp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L468-L470"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall₃_imp\"><span class=\"name\">forall₃_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_3</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>) (<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span> → <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>) (<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>)</span> → <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>) (<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>), <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall₃_imp","kind":"theorem","line":464,"name":"forall₃_imp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L464-L466"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall₂_imp\"><span class=\"name\">forall₂_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span> → <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall₂_imp","kind":"theorem","line":460,"name":"forall₂_imp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L460-L462"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#heq_iff_exists_cast_eq\"><span class=\"name\">heq_iff_exists_cast_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HEq\">≍</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">β</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">h</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#heq_iff_exists_cast_eq","kind":"theorem","line":448,"name":"heq_iff_exists_cast_eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L448-L450"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#heq_iff_exists_eq_cast\"><span class=\"name\">heq_iff_exists_eq_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HEq\">≍</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">h</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#heq_iff_exists_eq_cast","kind":"theorem","line":443,"name":"heq_iff_exists_eq_cast","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L443-L446"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#eq_cast_iff_heq\"><span class=\"name\">eq_cast_iff_heq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">e</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HEq\">≍</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#eq_cast_iff_heq","kind":"theorem","line":441,"name":"eq_cast_iff_heq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L441-L441"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#heq_of_eq_cast\"><span class=\"name\">heq_of_eq_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">e</span> <span class=\"fn\">b</span></span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HEq\">≍</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#heq_of_eq_cast","kind":"theorem","line":439,"name":"heq_of_eq_cast","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L439-L439"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#heq_cast_iff_heq\"><span class=\"name\">heq_cast_iff_heq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">γ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HEq\">≍</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">e</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HEq\">≍</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#heq_cast_iff_heq","kind":"theorem","line":432,"name":"heq_cast_iff_heq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L432-L434"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#cast_heq_iff_heq\"><span class=\"name\">cast_heq_iff_heq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">γ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">e</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HEq\">≍</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HEq\">≍</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#cast_heq_iff_heq","kind":"theorem","line":428,"name":"cast_heq_iff_heq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L428-L430"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#heq_rec_iff_heq\"><span class=\"name\">heq_rec_iff_heq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">motive</span> : <span class=\"fn\">(<span class=\"fn\">a'</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span> → <a href=\"./foundational_types.html\">Sort</a> u_2</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HEq\">≍</a> <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Eq.rec\">▸</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HEq\">≍</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"**Alias** of `heq_eqRec_iff_heq`.","docLink":"./Mathlib/Logic/Basic.html#heq_rec_iff_heq","kind":"theorem","line":426,"name":"heq_rec_iff_heq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L426-L426"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#rec_heq_iff_heq\"><span class=\"name\">rec_heq_iff_heq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">motive</span> : <span class=\"fn\">(<span class=\"fn\">a'</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span> → <a href=\"./foundational_types.html\">Sort</a> u_2</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Eq.rec\">▸</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HEq\">≍</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HEq\">≍</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"**Alias** of `eqRec_heq_iff_heq`.","docLink":"./Mathlib/Logic/Basic.html#rec_heq_iff_heq","kind":"theorem","line":424,"name":"rec_heq_iff_heq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L424-L424"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#rec_heq_of_heq\"><span class=\"name\">rec_heq_of_heq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HEq\">≍</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Eq.rec\">▸</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HEq\">≍</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#rec_heq_of_heq","kind":"theorem","line":420,"name":"rec_heq_of_heq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L420-L422"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#eqRec_heq'\"><span class=\"name\">eqRec_heq'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">motive</span> : <span class=\"fn\">(<span class=\"fn\">a'</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span> → <a href=\"./foundational_types.html\">Sort</a> u_2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Eq.rec\">▸</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HEq\">≍</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"**Alias** of `eqRec_heq_self`.","docLink":"./Mathlib/Logic/Basic.html#eqRec_heq'","kind":"theorem","line":418,"name":"eqRec_heq'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L418-L418"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Eq.rec_eq_cast\"><span class=\"name\">Eq</span>.<span class=\"name\">rec_eq_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">motive</span> : <span class=\"fn\">(<span class=\"fn\">a'</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span> → <a href=\"./foundational_types.html\">Sort</a> u_2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Eq.rec\">▸</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"**Alias** of `eqRec_eq_cast`.","docLink":"./Mathlib/Logic/Basic.html#Eq.rec_eq_cast","kind":"theorem","line":416,"name":"Eq.rec_eq_cast","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L416-L416"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#congr_fun_congr_arg\"><span class=\"name\">congr_fun_congr_arg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">a'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⋯</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋯</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#congr_fun_congr_arg","kind":"theorem","line":413,"name":"congr_fun_congr_arg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L413-L414"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#congr_fun_rfl\"><span class=\"name\">congr_fun_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⋯</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋯</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#congr_fun_rfl","kind":"theorem","line":409,"name":"congr_fun_rfl","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L409-L410"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#congr_arg_refl\"><span class=\"name\">congr_arg_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⋯</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋯</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#congr_arg_refl","kind":"theorem","line":404,"name":"congr_arg_refl","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L404-L406"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#congr_refl_right\"><span class=\"name\">congr_refl_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⋯</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋯</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#congr_refl_right","kind":"theorem","line":400,"name":"congr_refl_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L400-L401"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#congr_refl_left\"><span class=\"name\">congr_refl_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⋯</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋯</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#congr_refl_left","kind":"theorem","line":396,"name":"congr_refl_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L396-L397"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#eq_equivalence\"><span class=\"name\">eq_equivalence</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Equivalence\">Equivalence</a> <a href=\"./Init/Prelude.html#Eq\">Eq</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#eq_equivalence","kind":"theorem","line":389,"name":"eq_equivalence","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L389-L390"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Ne.trans_eq\"><span class=\"name\">Ne</span>.<span class=\"name\">trans_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"**Alias** of `ne_of_ne_of_eq`.","docLink":"./Mathlib/Logic/Basic.html#Ne.trans_eq","kind":"theorem","line":387,"name":"Ne.trans_eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L387-L387"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Eq.trans_ne\"><span class=\"name\">Eq</span>.<span class=\"name\">trans_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"**Alias** of `ne_of_eq_of_ne`.","docLink":"./Mathlib/Logic/Basic.html#Eq.trans_ne","kind":"theorem","line":386,"name":"Eq.trans_ne","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L386-L386"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#ne_of_ne_of_eq\"><span class=\"name\">ne_of_ne_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#ne_of_ne_of_eq","kind":"theorem","line":384,"name":"ne_of_ne_of_eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L384-L384"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#ne_of_eq_of_ne\"><span class=\"name\">ne_of_eq_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#ne_of_eq_of_ne","kind":"theorem","line":383,"name":"ne_of_eq_of_ne","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L383-L383"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall_mem_comm\"><span class=\"name\">forall_mem_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span> → <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall_mem_comm","kind":"theorem","line":378,"name":"forall_mem_comm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L378-L380"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#forall_cond_comm\"><span class=\"name\">forall_cond_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#forall_cond_comm","kind":"theorem","line":374,"name":"forall_cond_comm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L374-L376"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#xor_iff_or_and_not_and\"><span class=\"name\">xor_iff_or_and_not_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Xor'\">Xor'</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#xor_iff_or_and_not_and","kind":"theorem","line":363,"name":"xor_iff_or_and_not_and","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L363-L365"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#xor_iff_not_iff'\"><span class=\"name\">xor_iff_not_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Xor'\">Xor'</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> (<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#xor_iff_not_iff'","kind":"theorem","line":361,"name":"xor_iff_not_iff'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L361-L361"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#xor_iff_iff_not\"><span class=\"name\">xor_iff_iff_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Xor'\">Xor'</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> (<span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#xor_iff_iff_not","kind":"theorem","line":359,"name":"xor_iff_iff_not","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L359-L359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#xor_iff_not_iff\"><span class=\"name\">xor_iff_not_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Xor'\">Xor'</a> <span class=\"fn\">P</span> <span class=\"fn\">Q</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a>(<span class=\"fn\">P</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">Q</span>)</div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#xor_iff_not_iff","kind":"theorem","line":357,"name":"xor_iff_not_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L357-L357"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#not_xor\"><span class=\"name\">not_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Xor'\">Xor'</a> <span class=\"fn\">P</span> <span class=\"fn\">Q</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> (<span class=\"fn\">P</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">Q</span>)</div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#not_xor","kind":"theorem","line":354,"name":"not_xor","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L354-L355"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#and_iff_not_or_not\"><span class=\"name\">and_iff_not_or_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a>(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#and_iff_not_or_not","kind":"theorem","line":351,"name":"and_iff_not_or_not","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L351-L352"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#or_iff_not_and_not\"><span class=\"name\">or_iff_not_and_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a>(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#or_iff_not_and_not","kind":"theorem","line":348,"name":"or_iff_not_and_not","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L348-L349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#not_and_or\"><span class=\"name\">not_and_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span>) <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span></div></div>","info":{"doc":"One of **de Morgan's laws**: the negation of a conjunction is logically equivalent to the\ndisjunction of the negations. ","docLink":"./Mathlib/Logic/Basic.html#not_and_or","kind":"theorem","line":344,"name":"not_and_or","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L344-L346"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#not_and_not_right\"><span class=\"name\">not_and_not_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span>) <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> → <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#not_and_not_right","kind":"theorem","line":339,"name":"not_and_not_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L339-L340"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#iff_iff_not_or_and_or_not\"><span class=\"name\">iff_iff_not_or_and_or_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span>) <a href=\"./Init/Core.html#Iff\">↔</a> (<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#And\">∧</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#iff_iff_not_or_and_or_not","kind":"theorem","line":336,"name":"iff_iff_not_or_and_or_not","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L336-L337"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#iff_iff_and_or_not_and_not\"><span class=\"name\">iff_iff_and_or_not_and_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span>) <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#iff_iff_and_or_not_and_not","kind":"theorem","line":333,"name":"iff_iff_and_or_not_and_not","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L333-L334"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#iff_not_comm\"><span class=\"name\">iff_not_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span>) <a href=\"./Init/Core.html#Iff\">↔</a> (<span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span>)</div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#iff_not_comm","kind":"theorem","line":331,"name":"iff_not_comm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L331-L331"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#not_iff\"><span class=\"name\">not_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a>(<span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span>) <a href=\"./Init/Core.html#Iff\">↔</a> (<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#not_iff","kind":"theorem","line":329,"name":"not_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L329-L329"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#not_iff_comm\"><span class=\"name\">not_iff_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span>) <a href=\"./Init/Core.html#Iff\">↔</a> (<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span>)</div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#not_iff_comm","kind":"theorem","line":327,"name":"not_iff_comm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L327-L327"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#not_iff_not\"><span class=\"name\">not_iff_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span>) <a href=\"./Init/Core.html#Iff\">↔</a> (<span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#not_iff_not","kind":"theorem","line":325,"name":"not_iff_not","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L325-L325"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#peirce\"><span class=\"name\">peirce</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">a</span> → <span class=\"fn\">b</span>)</span> → <span class=\"fn\">a</span>)</span> → <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#peirce","kind":"theorem","line":323,"name":"peirce","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L323-L323"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#not_imp\"><span class=\"name\">not_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">(<span class=\"fn\">a</span> → <span class=\"fn\">b</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#not_imp","kind":"theorem","line":321,"name":"not_imp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L321-L321"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#imp_or'\"><span class=\"name\">imp_or'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">a</span>), <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">c</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">a</span>), <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">a</span>), <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#imp_or'","kind":"theorem","line":318,"name":"imp_or'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L318-L319"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#imp_or\"><span class=\"name\">imp_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> → <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(<span class=\"fn\">a</span> → <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">(<span class=\"fn\">a</span> → <span class=\"fn\">c</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#imp_or","kind":"theorem","line":315,"name":"imp_or","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L315-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#iff_mpr_iff_true_intro\"><span class=\"name\">iff_mpr_iff_true_intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⋯</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">h</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#iff_mpr_iff_true_intro","kind":"theorem","line":313,"name":"iff_mpr_iff_true_intro","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L313-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Iff.iff\"><span class=\"name\">Iff</span>.<span class=\"name\">iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">q₁ </span><span class=\"fn\">q₂</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">p₁</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">q₁</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">q₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">p₁</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">q₁</span>) <a href=\"./Init/Core.html#Iff\">↔</a> (<span class=\"fn\">p₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">q₂</span>)</div></div>","info":{"doc":"**Alias** of `iff_congr`.","docLink":"./Mathlib/Logic/Basic.html#Iff.iff","kind":"theorem","line":310,"name":"Iff.iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L310-L310"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#or_congr_right'\"><span class=\"name\">or_congr_right'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> → (<span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">c</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#or_congr_right'","kind":"theorem","line":303,"name":"or_congr_right'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L303-L304"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#or_congr_left'\"><span class=\"name\">or_congr_left'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">c</span> → (<span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#or_congr_left'","kind":"theorem","line":300,"name":"or_congr_left'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L300-L301"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Function.mtr\"><span class=\"name\">Function</span>.<span class=\"name\">mtr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span>)</span> → <span class=\"fn\"><span class=\"fn\">b</span> → <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"Provide the reverse of modus tollens (`mt`) as dot notation for implications. ","docLink":"./Mathlib/Logic/Basic.html#Function.mtr","kind":"theorem","line":297,"name":"Function.mtr","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L297-L298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#imp_and_neg_imp_iff\"><span class=\"name\">imp_and_neg_imp_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">p</span> → <span class=\"fn\">q</span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span> → <span class=\"fn\">q</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">q</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#imp_and_neg_imp_iff","kind":"theorem","line":295,"name":"imp_and_neg_imp_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L295-L295"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#not_imp_not\"><span class=\"name\">not_imp_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">b</span> → <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#not_imp_not","kind":"theorem","line":293,"name":"not_imp_not","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L293-L293"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#imp_iff_or_not\"><span class=\"name\">imp_iff_or_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">a</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">b</span> → <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#imp_iff_or_not","kind":"theorem","line":290,"name":"imp_iff_or_not","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L290-L291"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#imp_iff_not_or\"><span class=\"name\">imp_iff_not_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> → <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#imp_iff_not_or","kind":"theorem","line":288,"name":"imp_iff_not_or","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L288-L288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#or_not_of_imp\"><span class=\"name\">or_not_of_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> → <span class=\"fn\">b</span>)</span> → <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#or_not_of_imp","kind":"theorem","line":286,"name":"or_not_of_imp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L286-L286"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Decidable.or_not_of_imp\"><span class=\"name\">Decidable</span>.<span class=\"name\">or_not_of_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">a</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">a</span> → <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Decidable.or_not_of_imp","kind":"theorem","line":283,"name":"Decidable.or_not_of_imp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L283-L284"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#not_or_of_imp\"><span class=\"name\">not_or_of_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> → <span class=\"fn\">b</span>)</span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#not_or_of_imp","kind":"theorem","line":280,"name":"not_or_of_imp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L280-L280"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Or.imp3\"><span class=\"name\">Or</span>.<span class=\"name\">imp3</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">d </span><span class=\"fn\">e </span><span class=\"fn\">c </span><span class=\"fn\">f</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">had</span> : <span class=\"fn\"><span class=\"fn\">a</span> → <span class=\"fn\">d</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbe</span> : <span class=\"fn\"><span class=\"fn\">b</span> → <span class=\"fn\">e</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcf</span> : <span class=\"fn\"><span class=\"fn\">c</span> → <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">c</span> → <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Or.imp3","kind":"theorem","line":274,"name":"Or.imp3","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L274-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Or.elim3\"><span class=\"name\">Or</span>.<span class=\"name\">elim3</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\"><span class=\"fn\">a</span> → <span class=\"fn\">d</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\"><span class=\"fn\">b</span> → <span class=\"fn\">d</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\">c</span> → <span class=\"fn\">d</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">d</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Or.elim3","kind":"theorem","line":271,"name":"Or.elim3","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L271-L272"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Or.rotate\"><span class=\"name\">Or</span>.<span class=\"name\">rotate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">c</span> → <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"**Alias** of the forward direction of `or_rotate`.","docLink":"./Mathlib/Logic/Basic.html#Or.rotate","kind":"theorem","line":269,"name":"Or.rotate","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L269-L269"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Iff.or\"><span class=\"name\">Iff</span>.<span class=\"name\">or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">c </span><span class=\"fn\">b </span><span class=\"fn\">d</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">d</span></div></div>","info":{"doc":"**Alias** of `or_congr`.","docLink":"./Mathlib/Logic/Basic.html#Iff.or","kind":"theorem","line":268,"name":"Iff.or","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L268-L268"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#and_symm_left\"><span class=\"name\">and_symm_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">p</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#and_symm_left","kind":"theorem","line":264,"name":"and_symm_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L264-L264"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#and_symm_right\"><span class=\"name\">and_symm_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#and_symm_right","kind":"theorem","line":263,"name":"and_symm_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L263-L263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#And.rotate\"><span class=\"name\">And</span>.<span class=\"name\">rotate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">c</span> → <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"**Alias** of the forward direction of `and_rotate`.","docLink":"./Mathlib/Logic/Basic.html#And.rotate","kind":"theorem","line":261,"name":"And.rotate","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L261-L261"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Iff.and\"><span class=\"name\">Iff</span>.<span class=\"name\">and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">c </span><span class=\"fn\">b </span><span class=\"fn\">d</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">d</span></div></div>","info":{"doc":"**Alias** of `and_congr`.","docLink":"./Mathlib/Logic/Basic.html#Iff.and","kind":"theorem","line":260,"name":"Iff.and","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L260-L260"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Xor'.or\"><span class=\"name\">Xor'</span>.<span class=\"name\">or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Xor'\">Xor'</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Xor'.or","kind":"theorem","line":256,"name":"Xor'.or","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L256-L256"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#xor_not_not\"><span class=\"name\">xor_not_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Xor'\">Xor'</a> (<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Xor'\">Xor'</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#xor_not_not","kind":"theorem","line":254,"name":"xor_not_not","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L254-L254"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#xor_not_right\"><span class=\"name\">xor_not_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Xor'\">Xor'</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> (<span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#xor_not_right","kind":"theorem","line":252,"name":"xor_not_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L252-L252"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#xor_not_left\"><span class=\"name\">xor_not_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Xor'\">Xor'</a> (<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span>) <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> (<span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#xor_not_left","kind":"theorem","line":250,"name":"xor_not_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L250-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#xor_self\"><span class=\"name\">xor_self</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Xor'\">Xor'</a> <span class=\"fn\">a</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#False\">False</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#xor_self","kind":"theorem","line":248,"name":"xor_self","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L248-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#instCommutativeXor'\"><span class=\"name\">instCommutativeXor'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <a href=\"./Mathlib/Logic/Basic.html#Xor'\">Xor'</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#instCommutativeXor'","kind":"instance","line":246,"name":"instCommutativeXor'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L246-L246"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#xor_comm\"><span class=\"name\">xor_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Xor'\">Xor'</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Xor'\">Xor'</a> <span class=\"fn\">b</span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#xor_comm","kind":"theorem","line":244,"name":"xor_comm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L244-L244"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#xor_false\"><span class=\"name\">xor_false</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Xor'\">Xor'</a> <a href=\"./Init/Prelude.html#False\">False</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#id\">id</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#xor_false","kind":"theorem","line":242,"name":"xor_false","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L242-L242"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#xor_true\"><span class=\"name\">xor_true</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Xor'\">Xor'</a> <a href=\"./Init/Prelude.html#True\">True</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Not\">Not</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#xor_true","kind":"theorem","line":240,"name":"xor_true","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L240-L240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#instDecidableXor'\"><span class=\"name\">instDecidableXor'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">a</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">b</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Basic.html#Xor'\">Xor'</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#instDecidableXor'","kind":"instance","line":238,"name":"instDecidableXor'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L238-L238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#xor_def\"><span class=\"name\">xor_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Xor'\">Xor'</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#xor_def","kind":"theorem","line":236,"name":"xor_def","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L236-L236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Xor'\"><span class=\"name\">Xor'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"`Xor' a b` is the exclusive-or of propositions. ","docLink":"./Mathlib/Logic/Basic.html#Xor'","kind":"def","line":233,"name":"Xor'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L233-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Iff.ne_right\"><span class=\"name\">Iff</span>.<span class=\"name\">ne_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span>) → (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">d</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Iff.ne_right","kind":"theorem","line":222,"name":"Iff.ne_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L222-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Iff.ne_left\"><span class=\"name\">Iff</span>.<span class=\"name\">ne_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">d</span>) → (<span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Iff.ne_left","kind":"theorem","line":219,"name":"Iff.ne_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L219-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Iff.ne\"><span class=\"name\">Iff</span>.<span class=\"name\">ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span>) → (<span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">d</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Iff.ne","kind":"theorem","line":216,"name":"Iff.ne","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L216-L217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Iff.not_right\"><span class=\"name\">Iff</span>.<span class=\"name\">not_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Iff.not_right","kind":"theorem","line":214,"name":"Iff.not_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L214-L214"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Iff.not_left\"><span class=\"name\">Iff</span>.<span class=\"name\">not_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Iff.not_left","kind":"theorem","line":212,"name":"Iff.not_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L212-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Iff.not\"><span class=\"name\">Iff</span>.<span class=\"name\">not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span></div></div>","info":{"doc":"**Alias** of `not_congr`.","docLink":"./Mathlib/Logic/Basic.html#Iff.not","kind":"theorem","line":210,"name":"Iff.not","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L210-L210"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Imp.swap\"><span class=\"name\">Imp</span>.<span class=\"name\">swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">a</span>) (<span class=\"fn\">a</span> : <span class=\"fn\">b</span>), <span class=\"fn\">c</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a_1</span> : <span class=\"fn\">b</span>) (<span class=\"fn\">a</span> : <span class=\"fn\">a</span>), <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Imp.swap","kind":"theorem","line":207,"name":"Imp.swap","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L207-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#not_imp_self\"><span class=\"name\">not_imp_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> → <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#not_imp_self","kind":"theorem","line":205,"name":"not_imp_self","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L205-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#not_imp_comm\"><span class=\"name\">not_imp_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> → <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span> → <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#not_imp_comm","kind":"theorem","line":203,"name":"not_imp_comm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L203-L203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Not.imp_symm\"><span class=\"name\">Not</span>.<span class=\"name\">imp_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> → <span class=\"fn\">b</span>)</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span> → <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Not.imp_symm","kind":"theorem","line":201,"name":"Not.imp_symm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L201-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Not.decidable_imp_symm\"><span class=\"name\">Not</span>.<span class=\"name\">decidable_imp_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">a</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> → <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span></div></div>","info":{"doc":"**Alias** of `Decidable.not_imp_symm`.","docLink":"./Mathlib/Logic/Basic.html#Not.decidable_imp_symm","kind":"theorem","line":199,"name":"Not.decidable_imp_symm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L199-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#of_not_imp\"><span class=\"name\">of_not_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">(<span class=\"fn\">a</span> → <span class=\"fn\">b</span>)</span> → <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#of_not_imp","kind":"theorem","line":197,"name":"of_not_imp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L197-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#not_ne_iff\"><span class=\"name\">not_ne_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#not_ne_iff","kind":"theorem","line":195,"name":"not_ne_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L195-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#of_not_not\"><span class=\"name\">of_not_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> → <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#of_not_not","kind":"theorem","line":193,"name":"of_not_not","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L193-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#by_contra\"><span class=\"name\">by_contra</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span> → <a href=\"./Init/Prelude.html#False\">False</a>)</span> → <span class=\"fn\">p</span></span></div></div>","info":{"doc":"**Alias** of `by_contradiction`.","docLink":"./Mathlib/Logic/Basic.html#by_contra","kind":"theorem","line":166,"name":"by_contra","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L166-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#by_cases\"><span class=\"name\">by_cases</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpq</span> : <span class=\"fn\"><span class=\"fn\">p</span> → <span class=\"fn\">q</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hnpq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span> → <span class=\"fn\">q</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">q</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#by_cases","kind":"theorem","line":163,"name":"by_cases","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L163-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#by_contradiction\"><span class=\"name\">by_contradiction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span> → <a href=\"./Init/Prelude.html#False\">False</a>)</span> → <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#by_contradiction","kind":"theorem","line":160,"name":"by_contradiction","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L160-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#ne_or_eq\"><span class=\"name\">ne_or_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#ne_or_eq","kind":"theorem","line":158,"name":"ne_or_eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L158-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#eq_or_ne\"><span class=\"name\">eq_or_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#eq_or_ne","kind":"theorem","line":156,"name":"eq_or_ne","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L156-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Decidable.ne_or_eq\"><span class=\"name\">Decidable</span>.<span class=\"name\">ne_or_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span>)</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Decidable.ne_or_eq","kind":"theorem","line":153,"name":"Decidable.ne_or_eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L153-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Decidable.eq_or_ne\"><span class=\"name\">Decidable</span>.<span class=\"name\">eq_or_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span>)</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Decidable.eq_or_ne","kind":"theorem","line":150,"name":"Decidable.eq_or_ne","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L150-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#or_not\"><span class=\"name\">or_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#or_not","kind":"theorem","line":148,"name":"or_not","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L148-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#em'\"><span class=\"name\">em'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">p</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#em'","kind":"theorem","line":146,"name":"em'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L146-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#em\"><span class=\"name\">em</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span></div></div>","info":{"doc":"**Alias** of `Classical.em`.\n\n---\n\n**Diaconescu's theorem**: excluded middle from choice, Function extensionality and propositional extensionality. ","docLink":"./Mathlib/Logic/Basic.html#em","kind":"theorem","line":144,"name":"em","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L144-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#dec_em'\"><span class=\"name\">dec_em'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">p</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#dec_em'","kind":"theorem","line":142,"name":"dec_em'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L142-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#dec_em\"><span class=\"name\">dec_em</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span></div></div>","info":{"doc":"**Alias** of `Decidable.em`.","docLink":"./Mathlib/Logic/Basic.html#dec_em","kind":"theorem","line":140,"name":"dec_em","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L140-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Function.mt\"><span class=\"name\">Function</span>.<span class=\"name\">mt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> → <span class=\"fn\">b</span>)</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"Provide modus tollens (`mt`) as dot notation for implications. ","docLink":"./Mathlib/Logic/Basic.html#Function.mt","kind":"theorem","line":135,"name":"Function.mt","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L135-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#and_or_imp\"><span class=\"name\">and_or_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">(<span class=\"fn\">a</span> → <span class=\"fn\">c</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> → <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#and_or_imp","kind":"theorem","line":132,"name":"and_or_imp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L132-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#imp_iff_right_iff\"><span class=\"name\">imp_iff_right_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><span class=\"fn\">a</span> → <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span>) <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#imp_iff_right_iff","kind":"theorem","line":128,"name":"imp_iff_right_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L128-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Iff.imp\"><span class=\"name\">Iff</span>.<span class=\"name\">imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> → <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">c</span> → <span class=\"fn\">d</span></span></div></div>","info":{"doc":"**Alias** of `imp_congr`.","docLink":"./Mathlib/Logic/Basic.html#Iff.imp","kind":"theorem","line":125,"name":"Iff.imp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L125-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Function.swap₂\"><span class=\"name\">Function</span>.<span class=\"name\">swap₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι₁</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι₂</span> : <a href=\"./foundational_types.html\">Sort</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ₁</span> : <span class=\"fn\"><span class=\"fn\">ι₁</span> → <a href=\"./foundational_types.html\">Sort</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ₂</span> : <span class=\"fn\"><span class=\"fn\">ι₂</span> → <a href=\"./foundational_types.html\">Sort</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\">(<span class=\"fn\">i₁</span> : <span class=\"fn\">ι₁</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ₁</span> <span class=\"fn\">i₁</span></span> → <span class=\"fn\">(<span class=\"fn\">i₂</span> : <span class=\"fn\">ι₂</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">κ₂</span> <span class=\"fn\">i₂</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_6</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">i₁</span> : <span class=\"fn\">ι₁</span>) → <span class=\"fn\">(<span class=\"fn\">j₁</span> : <span class=\"fn\"><span class=\"fn\">κ₁</span> <span class=\"fn\">i₁</span></span>) → <span class=\"fn\">(<span class=\"fn\">i₂</span> : <span class=\"fn\">ι₂</span>) → <span class=\"fn\">(<span class=\"fn\">j₂</span> : <span class=\"fn\"><span class=\"fn\">κ₂</span> <span class=\"fn\">i₂</span></span>) → <span class=\"fn\"><span class=\"fn\">φ</span> <span class=\"fn\">i₁</span> <span class=\"fn\">j₁</span> <span class=\"fn\">i₂</span> <span class=\"fn\">j₂</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i₂</span> : <span class=\"fn\">ι₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j₂</span> : <span class=\"fn\"><span class=\"fn\">κ₂</span> <span class=\"fn\">i₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i₁</span> : <span class=\"fn\">ι₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j₁</span> : <span class=\"fn\"><span class=\"fn\">κ₁</span> <span class=\"fn\">i₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">φ</span> <span class=\"fn\">i₁</span> <span class=\"fn\">j₁</span> <span class=\"fn\">i₂</span> <span class=\"fn\">j₂</span></span></div></div>","info":{"doc":"Swaps two pairs of arguments to a function. ","docLink":"./Mathlib/Logic/Basic.html#Function.swap₂","kind":"def","line":110,"name":"Function.swap₂","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L110-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#instDecidableFact\"><span class=\"name\">instDecidableFact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">p</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#instDecidableFact","kind":"instance","line":107,"name":"instDecidableFact","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L107-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#fact_iff\"><span class=\"name\">fact_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#fact_iff","kind":"theorem","line":105,"name":"fact_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L105-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Fact.elim\"><span class=\"name\">Fact</span>.<span class=\"name\">elim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Fact.elim","kind":"theorem","line":104,"name":"Fact.elim","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L104-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Fact.out\"><span class=\"name\">Fact</span>.<span class=\"name\">out</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span></div></div>","info":{"doc":"`Fact.out` contains the unwrapped witness for the fact represented by the instance of\n`Fact p`. ","docLink":"./Mathlib/Logic/Basic.html#Fact.out","kind":"theorem","line":96,"name":"Fact.out","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L96-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Fact.mk\"><span class=\"name\">Fact</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">out</span> : <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#Fact.mk","kind":"ctor","line":93,"name":"Fact.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L93-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#Fact\"><span class=\"name\">Fact</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Wrapper for adding elementary propositions to the type class systems.\nWarning: this can easily be abused. See the rest of this docstring for details.\n\nCertain propositions should not be treated as a class globally,\nbut sometimes it is very convenient to be able to use the type class system\nin specific circumstances.\n\nFor example, `ZMod p` is a field if and only if `p` is a prime number.\nIn order to be able to find this field instance automatically by type class search,\nwe have to turn `p.prime` into an instance implicit assumption.\n\nOn the other hand, making `Nat.prime` a class would require a major refactoring of the library,\nand it is questionable whether making `Nat.prime` a class is desirable at all.\nThe compromise is to add the assumption `[Fact p.prime]` to `ZMod.field`.\n\nIn particular, this class is not intended for turning the type class system\ninto an automated theorem prover for first-order logic. ","docLink":"./Mathlib/Logic/Basic.html#Fact","kind":"class","line":76,"name":"Fact","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L76-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#ne_and_eq_iff_right\"><span class=\"name\">ne_and_eq_iff_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#ne_and_eq_iff_right","kind":"theorem","line":73,"name":"ne_and_eq_iff_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L73-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#eq_iff_eq_cancel_right\"><span class=\"name\">eq_iff_eq_cancel_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ {<span class=\"fn\">c</span> : <span class=\"fn\">α</span>}, <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#eq_iff_eq_cancel_right","kind":"theorem","line":70,"name":"eq_iff_eq_cancel_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L70-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#eq_iff_eq_cancel_left\"><span class=\"name\">eq_iff_eq_cancel_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}, <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#eq_iff_eq_cancel_left","kind":"theorem","line":67,"name":"eq_iff_eq_cancel_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L67-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#dcongr_heq\"><span class=\"name\">dcongr_heq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">α₂</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β₁</span> : <span class=\"fn\"><span class=\"fn\">α₁</span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β₂</span> : <span class=\"fn\"><span class=\"fn\">α₂</span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f₁</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α₁</span>) → <span class=\"fn\"><span class=\"fn\">β₁</span> <span class=\"fn\">a</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f₂</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α₂</span>) → <span class=\"fn\"><span class=\"fn\">β₂</span> <span class=\"fn\">a</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₁</span> : <span class=\"fn\">α₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₂</span> : <span class=\"fn\">α₂</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hargs</span> : <span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HEq\">≍</a> <span class=\"fn\">a₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\">∀ (<span class=\"fn\">t₁</span> : <span class=\"fn\">α₁</span>) (<span class=\"fn\">t₂</span> : <span class=\"fn\">α₂</span>), <span class=\"fn\"><span class=\"fn\">t₁</span> <a href=\"./Init/Prelude.html#HEq\">≍</a> <span class=\"fn\">t₂</span> → <span class=\"fn\"><span class=\"fn\">β₁</span> <span class=\"fn\">t₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">β₂</span> <span class=\"fn\">t₂</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><span class=\"fn\">α₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">α₂</span> → <span class=\"fn\"><span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#HEq\">≍</a> <span class=\"fn\">β₂</span> → <span class=\"fn\">f₁</span> <a href=\"./Init/Prelude.html#HEq\">≍</a> <span class=\"fn\">f₂</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">a₁</span></span> <a href=\"./Init/Prelude.html#HEq\">≍</a> <span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">a₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#dcongr_heq","kind":"theorem","line":53,"name":"dcongr_heq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L53-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#congr_arg_heq\"><span class=\"name\">congr_arg_heq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a₂</span> → <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a₁</span></span> <a href=\"./Init/Prelude.html#HEq\">≍</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a₂</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#congr_arg_heq","kind":"theorem","line":49,"name":"congr_arg_heq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L49-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#congr_heq\"><span class=\"name\">congr_heq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HEq\">≍</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HEq\">≍</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#congr_heq","kind":"theorem","line":45,"name":"congr_heq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L45-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#instSubsingletonSubtype_mathlib\"><span class=\"name\">instSubsingletonSubtype_mathlib</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#instSubsingletonSubtype_mathlib","kind":"instance","line":42,"name":"instSubsingletonSubtype_mathlib","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L42-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#decidableEq_of_subsingleton\"><span class=\"name\">decidableEq_of_subsingleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Basic.html#decidableEq_of_subsingleton","kind":"instance","line":39,"name":"decidableEq_of_subsingleton","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L39-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Basic.html#hidden\"><span class=\"name\">hidden</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"An identity function with its main argument implicit. This will be printed as `hidden` even\nif it is applied to a large term, so it can be used for elision,\nas done in the `elide` and `unelide` tactics. ","docLink":"./Mathlib/Logic/Basic.html#hidden","kind":"def","line":32,"name":"hidden","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Logic/Basic.lean#L32-L35"}}],"imports":["Init","Mathlib.Tactic.Attr.Register","Mathlib.Tactic.AdaptationNote","Mathlib.Tactic.Basic","Batteries.Logic","Batteries.Tactic.Trans","Batteries.Util.LibraryNote","Mathlib.Data.Nat.Notation","Mathlib.Data.Int.Notation"],"instances":[{"className":"Decidable","name":"decidableEq_of_subsingleton","typeNames":["Eq"]},{"className":"Subsingleton","name":"instSubsingletonSubtype_mathlib","typeNames":["Subtype"]},{"className":"Decidable","name":"instDecidableFact","typeNames":["Fact"]},{"className":"Decidable","name":"instDecidableXor'","typeNames":["Xor'"]},{"className":"Std.Commutative","name":"instCommutativeXor'","typeNames":["Xor'"]}],"name":"Mathlib.Logic.Basic"}