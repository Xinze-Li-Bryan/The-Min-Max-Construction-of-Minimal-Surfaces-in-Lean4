{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.updateTargetPatSubsts\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">updateTargetPatSubsts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newPatSubsts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></div></div>","info":{"doc":"Update the pattern substitutions after the goal's target changed.\n`goal` is the new goal. `newPatSubsts` are the new target's pattern\nsubstitutions. ","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.updateTargetPatSubsts","kind":"def","line":908,"name":"Aesop.ForwardState.updateTargetPatSubsts","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L908-L912"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.updateTargetPatSubstsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">updateTargetPatSubstsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ruleMatches</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newPatSubsts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></div></div>","info":{"doc":"Update the pattern substitutions after the goal's target changed.\n`goal` is the new goal. `newPatSubsts` are the new target's pattern\nsubstitutions. ","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.updateTargetPatSubstsCore","kind":"def","line":896,"name":"Aesop.ForwardState.updateTargetPatSubstsCore","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L896-L906"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.eraseTargetPatSubsts\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">eraseTargetPatSubsts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a></div></div>","info":{"doc":"Erase all pattern substitutions whose source is the target. ","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.eraseTargetPatSubsts","kind":"def","line":892,"name":"Aesop.ForwardState.eraseTargetPatSubsts","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L892-L894"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.eraseHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">eraseHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a></div></div>","info":{"doc":"Remove a hypothesis from the forward state. If `fs` represents a local\ncontext `lctx`, then `fs.eraseHyp h ms` represents `lctx` with `h` removed.\n`type` must be the normalised type of `h`. `ms` must contain all rules for which\n`h` may unify with a maximal premise. ","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.eraseHyp","kind":"def","line":873,"name":"Aesop.ForwardState.eraseHyp","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L873-L890"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.erasePatSubsts\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">erasePatSubsts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">source</span> : <a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a></div></div>","info":{"doc":"Erase pattern substitutions with the given source. ","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.erasePatSubsts","kind":"def","line":862,"name":"Aesop.ForwardState.erasePatSubsts","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L862-L871"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.addHypWithPatSubsts\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">addHypWithPatSubsts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ms</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patSubsts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></div></div>","info":{"doc":"Add a hypothesis and to the forward state, along with any rule pattern\nsubstitutions obtained from it. ","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.addHypWithPatSubsts","kind":"def","line":855,"name":"Aesop.ForwardState.addHypWithPatSubsts","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L855-L860"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.addHypWithPatSubstsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">addHypWithPatSubstsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ruleMatches</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ms</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patSubsts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></div></div>","info":{"doc":"Add a hypothesis and to the forward state, along with any rule pattern\nsubstitutions obtained from it. ","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.addHypWithPatSubstsCore","kind":"def","line":846,"name":"Aesop.ForwardState.addHypWithPatSubstsCore","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L846-L853"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.addPatSubsts\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">addPatSubsts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patSubsts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></div></div>","info":{"doc":"Add multiple pattern substitutions to the forward state. ","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.addPatSubsts","kind":"def","line":841,"name":"Aesop.ForwardState.addPatSubsts","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L841-L844"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.addPatSubstsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">addPatSubstsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ruleMatches</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patSubsts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></div></div>","info":{"doc":"Add multiple pattern substitutions to the forward state. ","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.addPatSubstsCore","kind":"def","line":833,"name":"Aesop.ForwardState.addPatSubstsCore","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L833-L839"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.addPatSubst\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">addPatSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patSubst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></div></div>","info":{"doc":"Add a pattern substitution to the forward state. ","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.addPatSubst","kind":"def","line":828,"name":"Aesop.ForwardState.addPatSubst","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L828-L831"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.addPatSubstCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">addPatSubstCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ruleMatches</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patSubst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></div></div>","info":{"doc":"Add a pattern substitution to the forward state. ","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.addPatSubstCore","kind":"def","line":813,"name":"Aesop.ForwardState.addPatSubstCore","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L813-L826"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.addHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">addHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ms</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></div></div>","info":{"doc":"Add a hypothesis to the forward state. If `fs` represents a local context\n`lctx`, then `fs.addHyp h ms` represents `lctx` with `h` added. `ms` must\noverapproximate the rules for which `h` may unify with a maximal premise. ","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.addHyp","kind":"def","line":807,"name":"Aesop.ForwardState.addHyp","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L807-L811"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.addHypCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">addHypCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ruleMatches</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ms</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></div></div>","info":{"doc":"Add a hypothesis to the forward state. If `fs` represents a local context\n`lctx`, then `fs.addHyp h ms` represents `lctx` with `h` added. `ms` must\noverapproximate the rules for which `h` may unify with a maximal premise. ","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.addHypCore","kind":"def","line":783,"name":"Aesop.ForwardState.addHypCore","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L783-L805"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.instToMessageData\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">instToMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.instToMessageData","kind":"instance","line":766,"name":"Aesop.ForwardState.instToMessageData","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L766-L770"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.instEmptyCollection\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.instEmptyCollection","kind":"instance","line":763,"name":"Aesop.ForwardState.instEmptyCollection","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L763-L764"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instInhabitedForwardState.default\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedForwardState</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.instInhabitedForwardState.default","kind":"def","line":759,"name":"Aesop.instInhabitedForwardState.default","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L759-L759"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instInhabitedForwardState\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedForwardState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.instInhabitedForwardState","kind":"instance","line":759,"name":"Aesop.instInhabitedForwardState","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L759-L759"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.hypTypes\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">hypTypes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a></span></div></div>","info":{"doc":"Normalised types of all non-implementation detail hypotheses in the\nlocal context. ","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.hypTypes","kind":"def","line":758,"name":"Aesop.ForwardState.hypTypes","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L758-L758"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.patSubsts\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">patSubsts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">Lean.PArray</a> (<a href=\"./Aesop/Rule/Name.html#Aesop.RuleName\">RuleName</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>))</span></span></div></div>","info":{"doc":"The pattern substitutions present in the rule states. Invariant:\n`patSubsts` maps the source `s` to a rule name `r` and pattern substitution `i`\niff the rule state of `r` contains `i` with source `s`. ","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.patSubsts","kind":"def","line":755,"name":"Aesop.ForwardState.patSubsts","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L755-L755"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.hyps\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">hyps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">Lean.PArray</a> (<a href=\"./Aesop/Rule/Name.html#Aesop.RuleName\">RuleName</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>))</span></span></div></div>","info":{"doc":"A map from hypotheses to the rules and premises that they matched against\nwhen they were initially added to the rule state. Invariant: the rule states\nin which a hypothesis `h` appear are exactly those identified by the rule\nnames in `hyps[h]`. Furthermore, `h` only appears in slots with premise\nindices greater than or equal to those in `hyps[h]`. ","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.hyps","kind":"def","line":751,"name":"Aesop.ForwardState.hyps","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L751-L751"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.ruleStates\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">ruleStates</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/Rule/Name.html#Aesop.RuleName\">RuleName</a> <a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a></span></div></div>","info":{"doc":"Map from each rule's name to its `RuleState`","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.ruleStates","kind":"def","line":745,"name":"Aesop.ForwardState.ruleStates","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L745-L745"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ruleStates</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/Rule/Name.html#Aesop.RuleName\">RuleName</a> <a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyps</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">Lean.PArray</a> (<a href=\"./Aesop/Rule/Name.html#Aesop.RuleName\">RuleName</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>))</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patSubsts</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">Lean.PArray</a> (<a href=\"./Aesop/Rule/Name.html#Aesop.RuleName\">RuleName</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>))</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hypTypes</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.mk","kind":"ctor","line":743,"name":"Aesop.ForwardState.mk","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L743-L743"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"State representing the non-complete matches of a given set of forward rules\nin a given local context. ","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState","kind":"structure","line":741,"name":"Aesop.ForwardState","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L741-L759"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RuleState.eraseHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleState</span>.<span class=\"name\">eraseHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pi</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a></div></div>","info":{"doc":"Erase a hypothesis from the rule state. ","docLink":"./Aesop/Forward/State.html#Aesop.RuleState.eraseHyp","kind":"def","line":734,"name":"Aesop.RuleState.eraseHyp","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L734-L737"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RuleState.erasePatSubst\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleState</span>.<span class=\"name\">erasePatSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">source</span> : <a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a></div></div>","info":{"doc":"Erase a pattern substitution that was obtained from the given source. ","docLink":"./Aesop/Forward/State.html#Aesop.RuleState.erasePatSubst","kind":"def","line":713,"name":"Aesop.RuleState.erasePatSubst","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L713-L732"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RuleState.addRawHyp.addMatches\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleState</span>.<span class=\"name\">addRawHyp</span>.<span class=\"name\">addMatches</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">completeMatches</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.CompleteMatch\">CompleteMatch</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">clusterMatches</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.CompleteMatch\">CompleteMatch</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.RuleState.addRawHyp.addMatches","kind":"def","line":700,"name":"Aesop.RuleState.addRawHyp.addMatches","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L700-L711"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RuleState.addRawHyp.getCompleteMatches\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleState</span>.<span class=\"name\">addRawHyp</span>.<span class=\"name\">getCompleteMatches</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">clusterStates</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">clusterIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newCompleteMatches</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.CompleteMatch\">CompleteMatch</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.RuleState.addRawHyp.getCompleteMatches","kind":"def","line":683,"name":"Aesop.RuleState.addRawHyp.getCompleteMatches","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L683-L698"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RuleState.addRawHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleState</span>.<span class=\"name\">addRawHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pi</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.CompleteMatch\">CompleteMatch</a></span>)</span></div></div>","info":{"doc":"Add a hypothesis or pattern substitution to the rule state. Returns the new\nrule state and any newly completed matches. If a hypothesis is given and it does\nnot match premise `pi`, nothing happens. ","docLink":"./Aesop/Forward/State.html#Aesop.RuleState.addRawHyp","kind":"def","line":645,"name":"Aesop.RuleState.addRawHyp","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L645-L711"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardRule.initialRuleState\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardRule</span>.<span class=\"name\">initialRuleState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a></div></div>","info":{"doc":"The initial (empty) rule state for a given forward rule. ","docLink":"./Aesop/Forward/State.html#Aesop.ForwardRule.initialRuleState","kind":"def","line":628,"name":"Aesop.ForwardRule.initialRuleState","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L628-L641"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instToMessageDataRuleState\"><span class=\"name\">Aesop</span>.<span class=\"name\">instToMessageDataRuleState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.instToMessageDataRuleState","kind":"instance","line":622,"name":"Aesop.instToMessageDataRuleState","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L622-L626"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instInhabitedRuleState\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedRuleState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.instInhabitedRuleState","kind":"instance","line":620,"name":"Aesop.instInhabitedRuleState","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L620-L620"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instInhabitedRuleState.default\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedRuleState</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.instInhabitedRuleState.default","kind":"def","line":620,"name":"Aesop.instInhabitedRuleState.default","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L620-L620"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RuleState.patSubstSources\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleState</span>.<span class=\"name\">patSubstSources</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a>)</span></span></div></div>","info":{"doc":"The sources of all pattern substitutions present in the\n`clusterStates`. Invariant: each pattern substitution in the cluster states\nis associated with a nonempty set. ","docLink":"./Aesop/Forward/State.html#Aesop.RuleState.patSubstSources","kind":"def","line":619,"name":"Aesop.RuleState.patSubstSources","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L619-L619"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RuleState.clusterStates\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleState</span>.<span class=\"name\">clusterStates</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></span></div></div>","info":{"doc":"States for each of the rule's slot clusters. ","docLink":"./Aesop/Forward/State.html#Aesop.RuleState.clusterStates","kind":"def","line":615,"name":"Aesop.RuleState.clusterStates","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L615-L615"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RuleState.rule\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleState</span>.<span class=\"name\">rule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a></div></div>","info":{"doc":"The rule to which this state belongs. ","docLink":"./Aesop/Forward/State.html#Aesop.RuleState.rule","kind":"def","line":613,"name":"Aesop.RuleState.rule","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L613-L613"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RuleState.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rule</span> : <a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">clusterStates</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patSubstSources</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.RuleState.mk","kind":"ctor","line":611,"name":"Aesop.RuleState.mk","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L611-L611"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RuleState\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Forward state for one rule. ","docLink":"./Aesop/Forward/State.html#Aesop.RuleState","kind":"structure","line":610,"name":"Aesop.RuleState","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L610-L620"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instBEqPatSubstSource\"><span class=\"name\">Aesop</span>.<span class=\"name\">instBEqPatSubstSource</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.instBEqPatSubstSource","kind":"instance","line":608,"name":"Aesop.instBEqPatSubstSource","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L608-L608"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instBEqPatSubstSource.beq\"><span class=\"name\">Aesop</span>.<span class=\"name\">instBEqPatSubstSource</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a> → <a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.instBEqPatSubstSource.beq","kind":"def","line":608,"name":"Aesop.instBEqPatSubstSource.beq","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L608-L608"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instHashablePatSubstSource\"><span class=\"name\">Aesop</span>.<span class=\"name\">instHashablePatSubstSource</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.instHashablePatSubstSource","kind":"instance","line":608,"name":"Aesop.instHashablePatSubstSource","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L608-L608"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instHashablePatSubstSource.hash\"><span class=\"name\">Aesop</span>.<span class=\"name\">instHashablePatSubstSource</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.instHashablePatSubstSource.hash","kind":"def","line":608,"name":"Aesop.instHashablePatSubstSource.hash","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L608-L608"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instInhabitedPatSubstSource.default\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedPatSubstSource</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.instInhabitedPatSubstSource.default","kind":"def","line":608,"name":"Aesop.instInhabitedPatSubstSource.default","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L608-L608"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instInhabitedPatSubstSource\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedPatSubstSource</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.instInhabitedPatSubstSource","kind":"instance","line":608,"name":"Aesop.instInhabitedPatSubstSource","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L608-L608"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource.target\"><span class=\"name\">Aesop</span>.<span class=\"name\">PatSubstSource</span>.<span class=\"name\">target</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a></div></div>","info":{"doc":"The pattern substitution came from the goal's target. ","docLink":"./Aesop/Forward/State.html#Aesop.PatSubstSource.target","kind":"ctor","line":606,"name":"Aesop.PatSubstSource.target","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L606-L607"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource.hyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">PatSubstSource</span>.<span class=\"name\">hyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a></div></div>","info":{"doc":"The pattern substitution came from the given hypothesis. ","docLink":"./Aesop/Forward/State.html#Aesop.PatSubstSource.hyp","kind":"ctor","line":604,"name":"Aesop.PatSubstSource.hyp","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L604-L605"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\"><span class=\"name\">Aesop</span>.<span class=\"name\">PatSubstSource</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The source of a pattern substitution. The same substitution can have\nmultiple sources. ","docLink":"./Aesop/Forward/State.html#Aesop.PatSubstSource","kind":"inductive","line":601,"name":"Aesop.PatSubstSource","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L601-L608"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.erasePatSubst\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">erasePatSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pi</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></div></div>","info":{"doc":"Erase a pattern substitution from the cluster state. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.erasePatSubst","kind":"def","line":585,"name":"Aesop.ClusterState.erasePatSubst","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L585-L597"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.eraseHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">eraseHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pi</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></div></div>","info":{"doc":"Erase a hypothesis from the cluster state's variable map. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.eraseHyp","kind":"def","line":570,"name":"Aesop.ClusterState.eraseHyp","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L570-L583"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.eraseEnqueuedRawHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">eraseEnqueuedRawHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></div></div>","info":{"doc":"Erase a `RawHyp` from the slot queue of the given slot. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.eraseEnqueuedRawHyp","kind":"def","line":556,"name":"Aesop.ClusterState.eraseEnqueuedRawHyp","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L556-L562"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.addRawHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">addRawHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM\">AddM</a> <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></span></div></div>","info":{"doc":"Add a hypothesis or pattern substitution to the cluster state. If a\nhypothesis is given and its type does not match the premise corresponding to\n`slot`, it is not added. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.addRawHyp","kind":"def","line":538,"name":"Aesop.ClusterState.addRawHyp","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L538-L554"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.enqueueRawHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">enqueueRawHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></div></div>","info":{"doc":"Add a hypothesis or pattern substitution to the queue for its slot. If\nafterwards each slot queue contains at least one element, then the returned\ncluster state `cs` has `cs.addHypsLazily = false`. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.enqueueRawHyp","kind":"def","line":524,"name":"Aesop.ClusterState.enqueueRawHyp","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L524-L536"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.addQueuedRawHyps\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">addQueuedRawHyps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM\">AddM</a> <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></span></div></div>","info":{"doc":"Insert the raw hyps from `slot`'s queue into the variable map. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.addQueuedRawHyps","kind":"opaque","line":511,"name":"Aesop.ClusterState.addQueuedRawHyps","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L511-L521"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.addRawHypCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">addRawHypCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM\">AddM</a> <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></span></div></div>","info":{"doc":"Add a hypothesis or pattern substitution to the cluster state. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.addRawHypCore","kind":"opaque","line":496,"name":"Aesop.ClusterState.addRawHypCore","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L496-L509"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.addHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">addHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM\">AddM</a> <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></span></div></div>","info":{"doc":"Add a hypothesis to the cluster state. `hyp.subst` must be the substitution\nthat results from applying `h` to `slot`. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.addHyp","kind":"opaque","line":475,"name":"Aesop.ClusterState.addHyp","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L475-L494"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.addMatch\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">addMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM\">AddM</a> <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></span></div></div>","info":{"doc":"Add a match to the cluster state. Returns the new cluster state and any new\ncomplete matches for this cluster. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.addMatch","kind":"opaque","line":443,"name":"Aesop.ClusterState.addMatch","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L443-L473"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.run\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">AddM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">premiseMVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">premiseLMVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM\">AddM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span>)</span></div></div>","info":{"doc":"Run an `AddM` action. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.run","kind":"def","line":437,"name":"Aesop.ClusterState.AddM.run","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L437-L440"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">AddM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A monad for operations that add hyps or matches to a cluster state. The\nmonad's state is an array of complete matches discovered while adding\nhyps/matches. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.AddM","kind":"def","line":432,"name":"Aesop.ClusterState.AddM","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L432-L435"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.Context.premiseLMVars\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">AddM</span>.<span class=\"name\">Context</span>.<span class=\"name\">premiseLMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a></span></div></div>","info":{"doc":"Metavariables for level parameters appearing in the rule's premises. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.Context.premiseLMVars","kind":"def","line":430,"name":"Aesop.ClusterState.AddM.Context.premiseLMVars","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L430-L430"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.Context.premiseMVars\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">AddM</span>.<span class=\"name\">Context</span>.<span class=\"name\">premiseMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>","info":{"doc":"Metavariables for the premises of the rule for which a hyp or match is\nbeing added. When adding hyps, they are unified with these metavariables. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.Context.premiseMVars","kind":"def","line":428,"name":"Aesop.ClusterState.AddM.Context.premiseMVars","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L428-L428"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.Context.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">AddM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">premiseMVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">premiseLMVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.Context.mk","kind":"ctor","line":425,"name":"Aesop.ClusterState.AddM.Context.mk","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L425-L425"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.Context\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">AddM</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Context for the `AddM` monad. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.Context","kind":"structure","line":424,"name":"Aesop.ClusterState.AddM.Context","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L424-L430"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.matchPremise?.updateSubst\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">matchPremise?</span>.<span class=\"name\">updateSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">premises</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.matchPremise?.updateSubst","kind":"def","line":410,"name":"Aesop.ClusterState.matchPremise?.updateSubst","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L410-L422"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.matchPremise?\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">matchPremise?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">premises</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lmvarIds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span></div></div>","info":{"doc":"Match hypothesis `hyp` against the slot with index `slot` in `cs` (which\nmust be a valid index). ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.matchPremise?","kind":"def","line":379,"name":"Aesop.ClusterState.matchPremise?","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L379-L422"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.findSlot?\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">findSlot?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a></span></div></div>","info":{"doc":"Get the slot with the given premise index. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.findSlot?","kind":"def","line":375,"name":"Aesop.ClusterState.findSlot?","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L375-L377"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.slot!\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">slot!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a></div></div>","info":{"doc":"Get the slot with the given index. Panic if the index is invalid. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.slot!","kind":"def","line":370,"name":"Aesop.ClusterState.slot!","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L370-L373"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.instToMessageData\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">instToMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.instToMessageData","kind":"instance","line":365,"name":"Aesop.ClusterState.instToMessageData","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L365-L368"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.instInhabited\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.instInhabited","kind":"instance","line":355,"name":"Aesop.ClusterState.instInhabited","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L355-L363"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.slotMaybeHasMatches_size\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">slotMaybeHasMatches_size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.slotMaybeHasMatches\">slotMaybeHasMatches</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.slots\">slots</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span></div></div>","info":{"doc":"There is exactly one boolean for each slot. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.slotMaybeHasMatches_size","kind":"theorem","line":351,"name":"Aesop.ClusterState.slotMaybeHasMatches_size","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L351-L351"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.slotMaybeHasMatches\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">slotMaybeHasMatches</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The `i`th element of this array is `true` if a match was at some point\nadded to slot `i`. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.slotMaybeHasMatches","kind":"def","line":349,"name":"Aesop.ClusterState.slotMaybeHasMatches","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L349-L349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.slotQueues_size\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">slotQueues_size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.slotQueues\">slotQueues</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.slots\">slots</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span></div></div>","info":{"doc":"There is exactly one queue for each slot. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.slotQueues_size","kind":"theorem","line":346,"name":"Aesop.ClusterState.slotQueues_size","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L346-L346"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.slotQueues\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">slotQueues</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a>)</span></span></div></div>","info":{"doc":"Hypotheses or pattern substitutions that have been added to the cluster\nstate, but have not yet been added to the `variableMap`. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.slotQueues","kind":"def","line":344,"name":"Aesop.ClusterState.slotQueues","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L344-L344"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.addHypsLazily\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">addHypsLazily</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When this flag is `true`, hyps are added to the `slotQueues` rather than\nthe `variableMap`. This is an optimisation that avoids performing unifications\nuntil a rule can potentially generate a complete match. More precisely:\n\n- `addHypsLazily` is initially set to `true`.\n- While `addHypsLazily` is `true`, hyps are added to (and deleted from) the\n  `slotQueues` and are not added to the `variableMap`.\n  Once an addition causes all slot queues to have at least one element,\n  `addHypsLazily` is permanently set to `false` and hyps for slot 0 are added\n  to the `variableMap`.\n- While `addHypsLazily` is `false`:\n  - Hyps for slot `i` are added directly to the variable maps if `i = 0` or\n    the slot `i - 1` has matches. Otherwise they are added to the slot queue\n    for `i`. (More precisely, we only track whether slot `i - 1` has had\n    matches at some point. This allows us to ignore deletions.)\n  - The insertion of a match into slot `i` causes all hyps at slot `i + 1`\n    to be moved from the slot queue into the `variableMap`.\n","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.addHypsLazily","kind":"def","line":341,"name":"Aesop.ClusterState.addHypsLazily","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L341-L341"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.completeMatches\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">completeMatches</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span></div></div>","info":{"doc":"Complete matches for this cluster. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.completeMatches","kind":"def","line":322,"name":"Aesop.ClusterState.completeMatches","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L322-L322"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.variableMap\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">variableMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a></div></div>","info":{"doc":"The variable map for this cluster. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.variableMap","kind":"def","line":320,"name":"Aesop.ClusterState.variableMap","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L320-L320"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.conclusionDeps\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">conclusionDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a></span></div></div>","info":{"doc":"The premises that appear in the rule's conclusion. These are the same for\nall cluster states of a rule, but are stored here for convenience. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.conclusionDeps","kind":"def","line":318,"name":"Aesop.ClusterState.conclusionDeps","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L318-L318"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.slots\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">slots</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a></span></div></div>","info":{"doc":"The cluster's slots. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.slots","kind":"def","line":315,"name":"Aesop.ClusterState.slots","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L315-L315"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slots</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">conclusionDeps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">variableMap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">completeMatches</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addHypsLazily</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slotQueues</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slotQueues_size</span> : <span class=\"fn\"><span class=\"fn\">slotQueues</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">slots</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slotMaybeHasMatches</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slotMaybeHasMatches_size</span> : <span class=\"fn\"><span class=\"fn\">slotMaybeHasMatches</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">slots</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.mk","kind":"ctor","line":313,"name":"Aesop.ClusterState.mk","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L313-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Structure representing the state of a slot cluster. ","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState","kind":"structure","line":312,"name":"Aesop.ClusterState","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L312-L351"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.findHyps.slotHyps\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">findHyps</span>.<span class=\"name\">slotHyps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vmap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.findHyps.slotHyps","kind":"def","line":304,"name":"Aesop.VariableMap.findHyps.slotHyps","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L304-L308"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.findHyps\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">findHyps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vmap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span></div></div>","info":{"doc":"Find hyps in `slot` whose substitutions are compatible with `subst`.\nPrecondition: `slot.common` is nonempty and each variable contained in it is\nalso contained in `subst`. ","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.findHyps","kind":"def","line":287,"name":"Aesop.VariableMap.findHyps","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L287-L308"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.findMatches.prevSlotMatches\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">findMatches</span>.<span class=\"name\">prevSlotMatches</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vmap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.findMatches.prevSlotMatches","kind":"def","line":281,"name":"Aesop.VariableMap.findMatches.prevSlotMatches","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L281-L285"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.findMatches\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">findMatches</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vmap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span></div></div>","info":{"doc":"Find matches in slot `slot - 1` whose substitutions are compatible with\n`subst`. Preconditions: `slot.index` is nonzero, `slot.common` is nonempty and\neach variable contained in `slot.common` is also contained in `subst`. ","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.findMatches","kind":"def","line":261,"name":"Aesop.VariableMap.findMatches","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L261-L285"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.erasePatSubst\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">erasePatSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vmap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a></div></div>","info":{"doc":"Remove the pattern substitution `subst` from `slot` and all later slots. ","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.erasePatSubst","kind":"def","line":256,"name":"Aesop.VariableMap.erasePatSubst","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L256-L259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.eraseHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">eraseHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vmap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a></div></div>","info":{"doc":"Remove a hyp from `slot` and all later slots. ","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.eraseHyp","kind":"def","line":251,"name":"Aesop.VariableMap.eraseHyp","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L251-L254"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.addMatch\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">addMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vmap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nextSlot</span> : <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Add a match `m`. Precondition: `nextSlot` is the slot with index\n`m.level + 1`. Returns `true` if the variable map changed. ","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.addMatch","kind":"def","line":243,"name":"Aesop.VariableMap.addMatch","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L243-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.addHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">addHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vmap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> : <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Add a hypothesis `hyp`. Precondition: `hyp` matches the premise of slot\n`slot` with substitution `hyp.subst` (and hence `hyp.subst` contains a mapping\nfor each variable in `slot.common`). Returns `true` if the variable map\nchanged. ","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.addHyp","kind":"def","line":231,"name":"Aesop.VariableMap.addHyp","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L231-L241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.modify\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vmap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a> → <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></div></div>","info":{"doc":"Modify the `InstMap` associated to variable `var`. If no such `InstMap`\nexists, the function `f` is applied to the empty `InstMap` and the result is\nassociated with `var`. Returns the new variable map and the result of `f`. ","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.modify","kind":"def","line":218,"name":"Aesop.VariableMap.modify","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L218-L229"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.find\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">find</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vmap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a></div></div>","info":{"doc":"Get the `InstMap` associated with a variable, or an empty `InstMap`. ","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.find","kind":"def","line":214,"name":"Aesop.VariableMap.find","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L214-L216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.find?\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">find?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vmap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a></span></div></div>","info":{"doc":"Get the `InstMap` associated with a variable. ","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.find?","kind":"def","line":210,"name":"Aesop.VariableMap.find?","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L210-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.instToMessageData\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">instToMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.instToMessageData","kind":"instance","line":207,"name":"Aesop.VariableMap.instToMessageData","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L207-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.instEmptyCollection\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.instEmptyCollection","kind":"instance","line":204,"name":"Aesop.VariableMap.instEmptyCollection","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L204-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instInhabitedVariableMap.default\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedVariableMap</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.instInhabitedVariableMap.default","kind":"def","line":200,"name":"Aesop.instInhabitedVariableMap.default","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L200-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instInhabitedVariableMap\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedVariableMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.instInhabitedVariableMap","kind":"instance","line":200,"name":"Aesop.instInhabitedVariableMap","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L200-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.map\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a> <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.map","kind":"def","line":199,"name":"Aesop.VariableMap.map","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L199-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">map</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a> <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.mk","kind":"ctor","line":198,"name":"Aesop.VariableMap.mk","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L198-L198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Map from variables to the matches and hypotheses of slots whose types\ncontain the variables. ","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap","kind":"structure","line":196,"name":"Aesop.VariableMap","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L196-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.erasePatSubst\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">erasePatSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a></div></div>","info":{"doc":"Remove the pattern substitution `subst` from `slot` and all later slots.\nFor each mapping `s ↦ e ↦ (ms, hs)` in `imap`, if `s ≥ slot`, then `subst` is\nremoved from `hs` and any matches containing `subst` are removed from `ms`. ","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.erasePatSubst","kind":"def","line":183,"name":"Aesop.InstMap.erasePatSubst","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L183-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.eraseHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">eraseHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a></div></div>","info":{"doc":"Remove `hyp` from `slot` and all later slots. For each mapping\n`s ↦ e ↦ (ms, hs)` in `imap`, if `s ≥ slot`, then `hyp` is removed from `hs` and\nany matches containing `hyp` are removed from `ms`. ","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.eraseHyp","kind":"def","line":173,"name":"Aesop.InstMap.eraseHyp","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L173-L181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.modifyMapsForSlotsFrom\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">modifyMapsForSlotsFrom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span> → <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a></div></div>","info":{"doc":"Modify the maps for slot `slot` and all later slots. ","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.modifyMapsForSlotsFrom","kind":"def","line":159,"name":"Aesop.InstMap.modifyMapsForSlotsFrom","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L159-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.insertMatch\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">insertMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Inserts a match. The match `m` is associated with the slot given by its\nlevel (i.e., the maximal slot for which `m` contains a hypothesis) and the\ninstantiation of `var` given by the map's substitution. Returns `true` if the\nmatch was not previously associated with this slot and instantiation. ","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.insertMatch","kind":"def","line":149,"name":"Aesop.InstMap.insertMatch","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L149-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.insertMatchCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">insertMatchCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Inserts a match associated with slot `slot` and instantiation `inst`.\nThe match's level must be `slot`. Returns `true` if the match was not previously\nassociated with `slot` and `inst`. ","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.insertMatchCore","kind":"def","line":138,"name":"Aesop.InstMap.insertMatchCore","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L138-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.insertHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">insertHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> : <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Inserts a hyp associated with slot `slot` and instantiation `inst`.\nThe hyp must be a valid assignment for the slot's premise. Returns `true` if\nthe hyp was not previously associated with `slot` and `inst`. ","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.insertHyp","kind":"def","line":127,"name":"Aesop.InstMap.insertHyp","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L127-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.modify\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span> → <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></div></div>","info":{"doc":"Applies a transfomation to the data associated to `slot` and `inst`.\nIf there is no such data, the transformation is applied to `(∅, ∅)`. Returns the\nnew instantiation map and the result of `f`. ","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.modify","kind":"def","line":116,"name":"Aesop.InstMap.modify","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L116-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.findD\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">findD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span></div></div>","info":{"doc":"Returns the set of matches and hypotheses associated with a slot `slot`\nwith instantiation `inst`, or `(∅, ∅)` if `slot` and `inst` do not have any\nassociated matches. ","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.findD","kind":"def","line":108,"name":"Aesop.InstMap.findD","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L108-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.find?\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">find?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span>)</span></div></div>","info":{"doc":"Returns the set of matches and hypotheses associated with a slot `slot`\nwith instantiation `inst`. ","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.find?","kind":"def","line":101,"name":"Aesop.InstMap.find?","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L101-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.instToMessageData\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">instToMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.instToMessageData","kind":"instance","line":88,"name":"Aesop.InstMap.instToMessageData","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L88-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.instEmptyCollection\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.instEmptyCollection","kind":"instance","line":86,"name":"Aesop.InstMap.instEmptyCollection","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L86-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instInhabitedInstMap.default\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedInstMap</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.instInhabitedInstMap.default","kind":"def","line":82,"name":"Aesop.instInhabitedInstMap.default","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instInhabitedInstMap\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedInstMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.instInhabitedInstMap","kind":"instance","line":82,"name":"Aesop.instInhabitedInstMap","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.map\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a> (<span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span>))</span></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.map","kind":"def","line":81,"name":"Aesop.InstMap.map","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">map</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a> (<span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span>))</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.mk","kind":"ctor","line":80,"name":"Aesop.InstMap.mk","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L80-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Partial matches associated with a particular slot instantiation. An entry\n`s ↦ e ↦ (ms, hs)` indicates that for the instantiation `e` of slot `s`, we have\npartial matches `ms` and hypotheses `hs`. ","docLink":"./Aesop/Forward/State.html#Aesop.InstMap","kind":"structure","line":77,"name":"Aesop.InstMap","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L77-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.Hyp.isPatSubst\"><span class=\"name\">Aesop</span>.<span class=\"name\">Hyp</span>.<span class=\"name\">isPatSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Does this `Hyp` represent a pattern substitution? ","docLink":"./Aesop/Forward/State.html#Aesop.Hyp.isPatSubst","kind":"def","line":70,"name":"Aesop.Hyp.isPatSubst","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L70-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.Hyp.containsHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">Hyp</span>.<span class=\"name\">containsHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` if `h` is the hyp `fvarId` or is a pattern substitution\ncontaining `fvarId`. ","docLink":"./Aesop/Forward/State.html#Aesop.Hyp.containsHyp","kind":"def","line":65,"name":"Aesop.Hyp.containsHyp","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L65-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.Hyp.instHashable\"><span class=\"name\">Aesop</span>.<span class=\"name\">Hyp</span>.<span class=\"name\">instHashable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.Hyp.instHashable","kind":"instance","line":59,"name":"Aesop.Hyp.instHashable","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L59-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.Hyp.instBEq\"><span class=\"name\">Aesop</span>.<span class=\"name\">Hyp</span>.<span class=\"name\">instBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.Hyp.instBEq","kind":"instance","line":52,"name":"Aesop.Hyp.instBEq","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L52-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instInhabitedHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedHyp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.instInhabitedHyp","kind":"instance","line":48,"name":"Aesop.instInhabitedHyp","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instInhabitedHyp.default\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedHyp</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.instInhabitedHyp.default","kind":"def","line":48,"name":"Aesop.instInhabitedHyp.default","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.Hyp.subst\"><span class=\"name\">Aesop</span>.<span class=\"name\">Hyp</span>.<span class=\"name\">subst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a></div></div>","info":{"doc":"The substitution that results from matching the hypothesis against a\npremise or that was derived from the pattern. ","docLink":"./Aesop/Forward/State.html#Aesop.Hyp.subst","kind":"def","line":47,"name":"Aesop.Hyp.subst","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L47-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.Hyp.fvarId?\"><span class=\"name\">Aesop</span>.<span class=\"name\">Hyp</span>.<span class=\"name\">fvarId?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>","info":{"doc":"The hypothesis, or `none` if this is a rule pattern substitution. ","docLink":"./Aesop/Forward/State.html#Aesop.Hyp.fvarId?","kind":"def","line":44,"name":"Aesop.Hyp.fvarId?","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.Hyp.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">Hyp</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.Hyp.mk","kind":"ctor","line":42,"name":"Aesop.Hyp.mk","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.Hyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">Hyp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A hypothesis that was matched against a premise, or a rule pattern\nsubstitution. ","docLink":"./Aesop/Forward/State.html#Aesop.Hyp","kind":"structure","line":40,"name":"Aesop.Hyp","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L40-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instHashableRawHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">instHashableRawHyp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.instHashableRawHyp","kind":"instance","line":38,"name":"Aesop.instHashableRawHyp","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instHashableRawHyp.hash\"><span class=\"name\">Aesop</span>.<span class=\"name\">instHashableRawHyp</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.instHashableRawHyp.hash","kind":"def","line":38,"name":"Aesop.instHashableRawHyp.hash","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instBEqRawHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">instBEqRawHyp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.instBEqRawHyp","kind":"instance","line":38,"name":"Aesop.instBEqRawHyp","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instBEqRawHyp.beq\"><span class=\"name\">Aesop</span>.<span class=\"name\">instBEqRawHyp</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a> → <a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.instBEqRawHyp.beq","kind":"def","line":38,"name":"Aesop.instBEqRawHyp.beq","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instInhabitedRawHyp.default\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedRawHyp</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.instInhabitedRawHyp.default","kind":"def","line":38,"name":"Aesop.instInhabitedRawHyp.default","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instInhabitedRawHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedRawHyp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/State.html#Aesop.instInhabitedRawHyp","kind":"instance","line":38,"name":"Aesop.instInhabitedRawHyp","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RawHyp.patSubst\"><span class=\"name\">Aesop</span>.<span class=\"name\">RawHyp</span>.<span class=\"name\">patSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a></div></div>","info":{"doc":"The rule pattern substitution. ","docLink":"./Aesop/Forward/State.html#Aesop.RawHyp.patSubst","kind":"ctor","line":36,"name":"Aesop.RawHyp.patSubst","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L36-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RawHyp.fvarId\"><span class=\"name\">Aesop</span>.<span class=\"name\">RawHyp</span>.<span class=\"name\">fvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a></div></div>","info":{"doc":"The hypothesis. ","docLink":"./Aesop/Forward/State.html#Aesop.RawHyp.fvarId","kind":"ctor","line":34,"name":"Aesop.RawHyp.fvarId","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L34-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RawHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">RawHyp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A hypothesis that has not yet been matched against a premise, or a rule\npattern substitution. ","docLink":"./Aesop/Forward/State.html#Aesop.RawHyp","kind":"inductive","line":31,"name":"Aesop.RawHyp","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/State.lean#L31-L38"}}],"imports":["Init","Aesop.Forward.Match"],"instances":[{"className":"Inhabited","name":"Aesop.instInhabitedRawHyp","typeNames":["Aesop.RawHyp"]},{"className":"BEq","name":"Aesop.instBEqRawHyp","typeNames":["Aesop.RawHyp"]},{"className":"Hashable","name":"Aesop.instHashableRawHyp","typeNames":["Aesop.RawHyp"]},{"className":"Inhabited","name":"Aesop.instInhabitedHyp","typeNames":["Aesop.Hyp"]},{"className":"BEq","name":"Aesop.Hyp.instBEq","typeNames":["Aesop.Hyp"]},{"className":"Hashable","name":"Aesop.Hyp.instHashable","typeNames":["Aesop.Hyp"]},{"className":"Inhabited","name":"Aesop.instInhabitedInstMap","typeNames":["Aesop.InstMap"]},{"className":"EmptyCollection","name":"Aesop.InstMap.instEmptyCollection","typeNames":["Aesop.InstMap"]},{"className":"Lean.ToMessageData","name":"Aesop.InstMap.instToMessageData","typeNames":["Aesop.InstMap"]},{"className":"Inhabited","name":"Aesop.instInhabitedVariableMap","typeNames":["Aesop.VariableMap"]},{"className":"EmptyCollection","name":"Aesop.VariableMap.instEmptyCollection","typeNames":["Aesop.VariableMap"]},{"className":"Lean.ToMessageData","name":"Aesop.VariableMap.instToMessageData","typeNames":["Aesop.VariableMap"]},{"className":"Inhabited","name":"Aesop.ClusterState.instInhabited","typeNames":["Aesop.ClusterState"]},{"className":"Lean.ToMessageData","name":"Aesop.ClusterState.instToMessageData","typeNames":["Aesop.ClusterState"]},{"className":"Inhabited","name":"Aesop.instInhabitedPatSubstSource","typeNames":["Aesop.PatSubstSource"]},{"className":"Hashable","name":"Aesop.instHashablePatSubstSource","typeNames":["Aesop.PatSubstSource"]},{"className":"BEq","name":"Aesop.instBEqPatSubstSource","typeNames":["Aesop.PatSubstSource"]},{"className":"Inhabited","name":"Aesop.instInhabitedRuleState","typeNames":["Aesop.RuleState"]},{"className":"Lean.ToMessageData","name":"Aesop.instToMessageDataRuleState","typeNames":["Aesop.RuleState"]},{"className":"Inhabited","name":"Aesop.instInhabitedForwardState","typeNames":["Aesop.ForwardState"]},{"className":"EmptyCollection","name":"Aesop.ForwardState.instEmptyCollection","typeNames":["Aesop.ForwardState"]},{"className":"Lean.ToMessageData","name":"Aesop.ForwardState.instToMessageData","typeNames":["Aesop.ForwardState"]}],"name":"Aesop.Forward.State"}