{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.NormDigits.digits_one\"><span class=\"name\">Nat</span>.<span class=\"name\">NormDigits</span>.<span class=\"name\">digits_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n0</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nb</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">n</span><a href=\"./Init/Prelude.html#List.cons\">]</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.NormDigits.digits_one","kind":"theorem","line":571,"name":"Nat.NormDigits.digits_one","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L571-L575"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.NormDigits.digits_succ\"><span class=\"name\">Nat</span>.<span class=\"name\">NormDigits</span>.<span class=\"name\">digits_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">n </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.NormDigits.digits_succ","kind":"theorem","line":562,"name":"Nat.NormDigits.digits_succ","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L562-L569"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.repr_length\"><span class=\"name\">Nat</span>.<span class=\"name\">repr_length</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">e</span> → <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">10</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">e</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Repr.html#Nat.repr\">repr</a></span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">e</span></span></span></div></div>","info":{"doc":"The core implementation of `Nat.repr` returns a String with length less than or equal to the\nnumber of digits in the decimal number (represented by `e`). For example, the decimal string\nrepresentation of any number less than 1000 (10 ^ 3) has a length less than or equal to 3. ","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.repr_length","kind":"theorem","line":551,"name":"Nat.repr_length","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L551-L555"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.toDigits_length\"><span class=\"name\">Nat</span>.<span class=\"name\">toDigits_length</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">n </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">e</span> → <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">e</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/Repr.html#Nat.toDigits\">toDigits</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">e</span></span></span></div></div>","info":{"doc":"The core implementation of `Nat.toDigits` returns a String with length less than or equal to the\nnumber of digits in the base-`b` number (represented by `e`). For example, the string\nrepresentation of any number less than `b ^ 3` has a length less than or equal to 3. ","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.toDigits_length","kind":"theorem","line":545,"name":"Nat.toDigits_length","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L545-L549"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.toDigitsCore_length\"><span class=\"name\">Nat</span>.<span class=\"name\">toDigitsCore_length</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">f </span><span class=\"fn\">n </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_e_pos</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">e</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlt</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">e</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/Repr.html#Nat.toDigitsCore\">toDigitsCore</a></span> <span class=\"fn\">f</span> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">e</span></div></div>","info":{"doc":"The String representation produced by toDigitsCore has the proper length relative to\nthe number of digits in `n < e` for some base `b`. Since this works with any base,\nit can be used for binary, decimal, and hex. ","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.toDigitsCore_length","kind":"theorem","line":522,"name":"Nat.toDigitsCore_length","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L522-L543"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.nat_repr_len_aux\"><span class=\"name\">Nat</span>.<span class=\"name\">nat_repr_len_aux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">b </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_b_pos</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span> → <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">e</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.nat_repr_len_aux","kind":"theorem","line":518,"name":"Nat.nat_repr_len_aux","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L518-L520"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.toDigitsCore_lens_eq\"><span class=\"name\">Nat</span>.<span class=\"name\">toDigitsCore_lens_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">f </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tl</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/Repr.html#Nat.toDigitsCore\">toDigitsCore</a></span> <span class=\"fn\">f</span> <span class=\"fn\">n</span> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">tl</span>))</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/Repr.html#Nat.toDigitsCore\">toDigitsCore</a></span> <span class=\"fn\">f</span> <span class=\"fn\">n</span> <span class=\"fn\">tl</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.toDigitsCore_lens_eq","kind":"theorem","line":512,"name":"Nat.toDigitsCore_lens_eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L512-L516"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.toDigitsCore_lens_eq_aux\"><span class=\"name\">Nat</span>.<span class=\"name\">toDigitsCore_lens_eq_aux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">f </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l1 </span><span class=\"fn\">l2</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l1</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l2</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/Repr.html#Nat.toDigitsCore\">toDigitsCore</a></span> <span class=\"fn\">f</span> <span class=\"fn\">n</span> <span class=\"fn\">l1</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/Repr.html#Nat.toDigitsCore\">toDigitsCore</a></span> <span class=\"fn\">f</span> <span class=\"fn\">n</span> <span class=\"fn\">l2</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.toDigitsCore_lens_eq_aux","kind":"theorem","line":498,"name":"Nat.toDigitsCore_lens_eq_aux","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L498-L510"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.self_mod_pow_eq_ofDigits_take\"><span class=\"name\">Nat</span>.<span class=\"name\">self_mod_pow_eq_ofDigits_take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">p</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span>)</span>)</span></span></div></div>","info":{"doc":"`n` modulo `p^i` is like taking the least significant `i` digits of `n` in base `p`.\n","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.self_mod_pow_eq_ofDigits_take","kind":"theorem","line":488,"name":"Nat.self_mod_pow_eq_ofDigits_take","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L488-L494"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_mod_pow_eq_ofDigits_take\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_mod_pow_eq_ofDigits_take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpos</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">digits</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\">∀ <span class=\"fn\">l</span> ∈ <span class=\"fn\">digits</span>, <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">p</span> <span class=\"fn\">digits</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">p</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">i</span> <span class=\"fn\">digits</span>)</span></span></div></div>","info":{"doc":"Interpreting as a base `p` number and modulo `p^i` is the same as taking the first `i` digits.\n","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_mod_pow_eq_ofDigits_take","kind":"theorem","line":467,"name":"Nat.ofDigits_mod_pow_eq_ofDigits_take","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L467-L486"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.self_div_pow_eq_ofDigits_drop\"><span class=\"name\">Nat</span>.<span class=\"name\">self_div_pow_eq_ofDigits_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">p</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span>)</span>)</span></span></div></div>","info":{"doc":"Dividing `n` by `p^i` is like truncating the first `i` digits of `n` in base `p`.\n","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.self_div_pow_eq_ofDigits_drop","kind":"theorem","line":459,"name":"Nat.self_div_pow_eq_ofDigits_drop","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L459-L465"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_div_pow_eq_ofDigits_drop\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_div_pow_eq_ofDigits_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpos</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">digits</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\">∀ <span class=\"fn\">l</span> ∈ <span class=\"fn\">digits</span>, <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">p</span> <span class=\"fn\">digits</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">p</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">i</span> <span class=\"fn\">digits</span>)</span></span></div></div>","info":{"doc":"Interpreting as a base `p` number and dividing by `p^i` is the same as dropping `i`.\n","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_div_pow_eq_ofDigits_drop","kind":"theorem","line":447,"name":"Nat.ofDigits_div_pow_eq_ofDigits_drop","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L447-L457"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_div_eq_ofDigits_tail\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_div_eq_ofDigits_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpos</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">digits</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\">∀ <span class=\"fn\">l</span> ∈ <span class=\"fn\">digits</span>, <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">p</span> <span class=\"fn\">digits</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">digits</span>.<a href=\"./Init/Data/List/Basic.html#List.tail\">tail</a></span></span></div></div>","info":{"doc":"Interpreting as a base `p` number and dividing by `p` is the same as interpreting the tail.\n","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_div_eq_ofDigits_tail","kind":"theorem","line":436,"name":"Nat.ofDigits_div_eq_ofDigits_tail","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L436-L445"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digit_sum_le\"><span class=\"name\">Nat</span>.<span class=\"name\">digit_sum_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.sum\">sum</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digit_sum_le","kind":"theorem","line":425,"name":"Nat.digit_sum_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L425-L434"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.sum_le_ofDigits\"><span class=\"name\">Nat</span>.<span class=\"name\">sum_le_ofDigits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.sum\">sum</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">p</span> <span class=\"fn\">L</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.sum_le_ofDigits","kind":"theorem","line":422,"name":"Nat.sum_le_ofDigits","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L422-L423"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_monotone\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_monotone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">p</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">q</span> <span class=\"fn\">L</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_monotone","kind":"theorem","line":414,"name":"Nat.ofDigits_monotone","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L414-L420"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_digits_append_digits\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_digits_append_digits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">m</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_digits_append_digits","kind":"theorem","line":410,"name":"Nat.ofDigits_digits_append_digits","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L410-L412"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_base_pow_mul\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_base_pow_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">k </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">m</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.replicate\">List.replicate</a> <span class=\"fn\">k</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_base_pow_mul","kind":"theorem","line":402,"name":"Nat.digits_base_pow_mul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L402-L408"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_base_mul\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_base_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">m</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_base_mul","kind":"theorem","line":397,"name":"Nat.digits_base_mul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L397-L400"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.lt_base_pow_length_digits\"><span class=\"name\">Nat</span>.<span class=\"name\">lt_base_pow_length_digits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>","info":{"doc":"Any number m is less than b^(number of digits in the base b representation of m) ","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.lt_base_pow_length_digits","kind":"theorem","line":392,"name":"Nat.lt_base_pow_length_digits","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L392-L395"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.lt_base_pow_length_digits'\"><span class=\"name\">Nat</span>.<span class=\"name\">lt_base_pow_length_digits'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>) <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>).<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>","info":{"doc":"Any number m is less than (b+2)^(number of digits in the base b + 2 representation of m) ","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.lt_base_pow_length_digits'","kind":"theorem","line":387,"name":"Nat.lt_base_pow_length_digits'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L387-L390"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_lt_base_pow_length\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_lt_base_pow_length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">l</span>, <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>","info":{"doc":"an n-digit number in base b is less than b^n if b > 1 ","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_lt_base_pow_length","kind":"theorem","line":381,"name":"Nat.ofDigits_lt_base_pow_length","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L381-L385"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_lt_base_pow_length'\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_lt_base_pow_length'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">l</span>, <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>) <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>) <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>","info":{"doc":"an n-digit number in base b + 2 is less than (b + 2)^n ","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_lt_base_pow_length'","kind":"theorem","line":368,"name":"Nat.ofDigits_lt_base_pow_length'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L368-L379"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_lt_base\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_lt_base</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">m </span><span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hd</span> : <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"The digits in the base b expansion of n are all less than b, if b ≥ 2 ","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_lt_base","kind":"theorem","line":363,"name":"Nat.digits_lt_base","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L363-L366"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_lt_base'\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_lt_base'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">m </span><span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>).<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span></span> → <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span></div></div>","info":{"doc":"The digits in the base b+2 expansion of n are all less than b+2 ","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_lt_base'","kind":"theorem","line":348,"name":"Nat.digits_lt_base'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L348-L361"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_add_ofDigits_eq_ofDigits_zipWith_of_length_eq\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_add_ofDigits_eq_ofDigits_zipWith_of_length_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l1 </span><span class=\"fn\">l2</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">l1</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l2</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">l1</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">l2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.zipWith\">List.zipWith</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">l1</span> <span class=\"fn\">l2</span>)</span></span></div></div>","info":{"doc":"The addition of ofDigits of two lists is equal to ofDigits of digit-wise addition of them ","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_add_ofDigits_eq_ofDigits_zipWith_of_length_eq","kind":"theorem","line":333,"name":"Nat.ofDigits_add_ofDigits_eq_ofDigits_zipWith_of_length_eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L333-L346"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_inj_of_len_eq\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_inj_of_len_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L1 </span><span class=\"fn\">L2</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">len</span> : <span class=\"fn\"><span class=\"fn\">L1</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L2</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w1</span> : <span class=\"fn\">∀ <span class=\"fn\">l</span> ∈ <span class=\"fn\">L1</span>, <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w2</span> : <span class=\"fn\">∀ <span class=\"fn\">l</span> ∈ <span class=\"fn\">L2</span>, <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">L1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">L2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">L1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L2</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_inj_of_len_eq","kind":"theorem","line":313,"name":"Nat.ofDigits_inj_of_len_eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L313-L331"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.mul_ofDigits\"><span class=\"name\">Nat</span>.<span class=\"name\">mul_ofDigits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">l</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.mul_ofDigits","kind":"theorem","line":305,"name":"Nat.mul_ofDigits","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L305-L311"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_inj_iff\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_inj_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_inj_iff","kind":"theorem","line":301,"name":"Nat.digits_inj_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L301-L303"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits.injective\"><span class=\"name\">Nat</span>.<span class=\"name\">digits</span>.<span class=\"name\">injective</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits.injective","kind":"theorem","line":298,"name":"Nat.digits.injective","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L298-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_getLast\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_getLast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.getLast\">getLast</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>))</span>.<a href=\"./Init/Data/List/Basic.html#List.getLast\">getLast</a></span> <span class=\"fn\">q</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_getLast","kind":"theorem","line":291,"name":"Nat.digits_getLast","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L291-L296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_eq_cons_digits_div\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_eq_cons_digits_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_eq_cons_digits_div","kind":"theorem","line":282,"name":"Nat.digits_eq_cons_digits_div","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L282-L289"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_ne_nil_iff_ne_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_ne_nil_iff_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_ne_nil_iff_ne_zero","kind":"theorem","line":279,"name":"Nat.digits_ne_nil_iff_ne_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L279-L280"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_eq_nil_iff_eq_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_eq_nil_iff_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_eq_nil_iff_eq_zero","kind":"theorem","line":270,"name":"Nat.digits_eq_nil_iff_eq_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L270-L277"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_one\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">1</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.sum\">sum</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_one","kind":"theorem","line":258,"name":"Nat.ofDigits_one","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L258-L261"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_digits\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_digits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_digits","kind":"theorem","line":238,"name":"Nat.ofDigits_digits","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L238-L256"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_ofDigits\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_ofDigits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\">∀ <span class=\"fn\">l</span> ∈ <span class=\"fn\">L</span>, <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\">∀ (<span class=\"fn\">h</span> : <span class=\"fn\">L</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.getLast\">getLast</a></span> <span class=\"fn\">h</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_ofDigits","kind":"theorem","line":212,"name":"Nat.digits_ofDigits","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L212-L236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_zero_of_eq_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_zero_of_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\">∀ <span class=\"fn\">l</span> ∈ <span class=\"fn\">L</span>, <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_zero_of_eq_zero","kind":"theorem","line":206,"name":"Nat.digits_zero_of_eq_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L206-L210"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.coe_int_ofDigits\"><span class=\"name\">Nat</span>.<span class=\"name\">coe_int_ofDigits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">(↑<span class=\"fn\">b</span>)</span> <span class=\"fn\">L</span></span></div></div>","info":{"doc":"**Alias** of `Nat.coe_ofDigits`.","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.coe_int_ofDigits","kind":"theorem","line":204,"name":"Nat.coe_int_ofDigits","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L204-L204"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.coe_ofDigits\"><span class=\"name\">Nat</span>.<span class=\"name\">coe_ofDigits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">(↑<span class=\"fn\">b</span>)</span> <span class=\"fn\">L</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.coe_ofDigits","kind":"theorem","line":197,"name":"Nat.coe_ofDigits","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L197-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_reverse_zero_cons\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_reverse_zero_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">(<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>).<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_reverse_zero_cons","kind":"theorem","line":193,"name":"Nat.ofDigits_reverse_zero_cons","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L193-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_reverse_cons\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_reverse_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">(<span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>).<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">d</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_reverse_cons","kind":"theorem","line":187,"name":"Nat.ofDigits_reverse_cons","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L187-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_append_replicate_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_append_replicate_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> (<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.replicate\">List.replicate</a> <span class=\"fn\">k</span> <span class=\"fn\">0</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">l</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_append_replicate_zero","kind":"theorem","line":181,"name":"Nat.ofDigits_append_replicate_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L181-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_replicate_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_replicate_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.replicate\">List.replicate</a> <span class=\"fn\">k</span> <span class=\"fn\">0</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_replicate_zero","kind":"theorem","line":175,"name":"Nat.ofDigits_replicate_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L175-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_append_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_append_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> (<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">0</span><a href=\"./Init/Prelude.html#List.cons\">]</a>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">l</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_append_zero","kind":"theorem","line":170,"name":"Nat.ofDigits_append_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L170-L173"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_append\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l1 </span><span class=\"fn\">l2</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> (<span class=\"fn\">l1</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l2</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">l1</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">l1</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">l2</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_append","kind":"theorem","line":162,"name":"Nat.ofDigits_append","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L162-L168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_cons\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">hd</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tl</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> (<span class=\"fn\">hd</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">tl</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">hd</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">tl</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_cons","kind":"theorem","line":159,"name":"Nat.ofDigits_cons","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L159-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_one_cons\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_one_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">1</span> (<span class=\"fn\">h</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">1</span> <span class=\"fn\">L</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_one_cons","kind":"theorem","line":155,"name":"Nat.ofDigits_one_cons","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L155-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_singleton\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">n</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_singleton","kind":"theorem","line":152,"name":"Nat.ofDigits_singleton","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L152-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_nil\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_nil","kind":"theorem","line":149,"name":"Nat.ofDigits_nil","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L149-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_eq_foldr\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_eq_foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</span> <span class=\"fn\">0</span> <span class=\"fn\">L</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits_eq_foldr","kind":"theorem","line":143,"name":"Nat.ofDigits_eq_foldr","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L143-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> → <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`ofDigits b L` takes a list `L` of natural numbers, and interprets them\nas a number in semiring, as the little-endian digits in base `b`.\n","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.ofDigits","kind":"def","line":136,"name":"Nat.ofDigits","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L136-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_add\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hxb</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hxy</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_add","kind":"theorem","line":121,"name":"Nat.digits_add","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L121-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_of_lt\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_of_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hxb</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#List.cons\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_of_lt","kind":"theorem","line":115,"name":"Nat.digits_of_lt","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L115-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_def'\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_def'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\">∀ {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}, <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>)</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_def'","kind":"theorem","line":109,"name":"Nat.digits_def'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L109-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_of_two_le_of_pos\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_of_two_le_of_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_of_two_le_of_pos","kind":"theorem","line":104,"name":"Nat.digits_of_two_le_of_pos","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L104-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_add_two_add_one\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_add_two_add_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>).<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>) <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>).<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> ((<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>))</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_add_two_add_one","kind":"theorem","line":100,"name":"Nat.digits_add_two_add_one","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L100-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_one_succ\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_one_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a> <span class=\"fn\">1</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a> <span class=\"fn\">1</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_one_succ","kind":"theorem","line":97,"name":"Nat.digits_one_succ","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L97-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_one\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a> <span class=\"fn\">1</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.replicate\">List.replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_one","kind":"theorem","line":92,"name":"Nat.digits_one","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L92-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_zero_succ'\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_zero_succ'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a> <span class=\"fn\">0</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">n</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_zero_succ'","kind":"theorem","line":88,"name":"Nat.digits_zero_succ'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L88-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_zero_succ\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_zero_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a> <span class=\"fn\">0</span> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span><a href=\"./Init/Prelude.html#List.cons\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_zero_succ","kind":"theorem","line":84,"name":"Nat.digits_zero_succ","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L84-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_zero_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_zero_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_zero_zero","kind":"theorem","line":81,"name":"Nat.digits_zero_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L81-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\">digits</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits_zero","kind":"theorem","line":77,"name":"Nat.digits_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L77-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits\"><span class=\"name\">Nat</span>.<span class=\"name\">digits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span></div></div>","info":{"doc":"`digits b n` gives the digits, in little-endian order,\nof a natural number `n` in a specified base `b`.\n\nIn any base, we have `ofDigits b L = L.foldr (fun x y ↦ x + b * y) 0`.\n* For any `2 ≤ b`, we have `l < b` for any `l ∈ digits b n`,\n  and the last digit is not zero.\n  This uniquely specifies the behaviour of `digits b`.\n* For `b = 1`, we define `digits 1 n = List.replicate n 1`.\n* For `b = 0`, we define `digits 0 n = [n]`, except `digits 0 0 = []`.\n\nNote this differs from the existing `Nat.toDigits` in core, which is used for printing numerals.\nIn particular, `Nat.toDigits b 0 = ['0']`, while `digits b 0 = []`.\n","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digits","kind":"def","line":59,"name":"Nat.digits","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L59-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digitsAux_def\"><span class=\"name\">Nat</span>.<span class=\"name\">digitsAux_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digitsAux\">digitsAux</a></span> <span class=\"fn\">h</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digitsAux\">digitsAux</a></span> <span class=\"fn\">h</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digitsAux_def","kind":"theorem","line":53,"name":"Nat.digitsAux_def","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L53-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digitsAux_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">digitsAux_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digitsAux\">digitsAux</a></span> <span class=\"fn\">h</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digitsAux_zero","kind":"theorem","line":50,"name":"Nat.digitsAux_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L50-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digitsAux\"><span class=\"name\">Nat</span>.<span class=\"name\">digitsAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span></div></div>","info":{"doc":"(Impl.) An auxiliary definition for `digits`, to help get the desired definitional unfolding. ","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digitsAux","kind":"def","line":43,"name":"Nat.digitsAux","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L43-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digitsAux1\"><span class=\"name\">Nat</span>.<span class=\"name\">digitsAux1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>","info":{"doc":"(Impl.) An auxiliary definition for `digits`, to help get the desired definitional unfolding. ","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digitsAux1","kind":"def","line":39,"name":"Nat.digitsAux1","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L39-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digitsAux0\"><span class=\"name\">Nat</span>.<span class=\"name\">digitsAux0</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span></div></div>","info":{"doc":"(Impl.) An auxiliary definition for `digits`, to help get the desired definitional unfolding. ","docLink":"./Mathlib/Data/Nat/Digits/Defs.html#Nat.digitsAux0","kind":"def","line":34,"name":"Nat.digitsAux0","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Nat/Digits/Defs.lean#L34-L37"}}],"imports":["Init","Mathlib.Tactic.NormNum","Mathlib.Tactic.Ring","Mathlib.Tactic.Linarith","Mathlib.Algebra.Order.Group.Nat"],"instances":[],"name":"Mathlib.Data.Nat.Digits.Defs"}