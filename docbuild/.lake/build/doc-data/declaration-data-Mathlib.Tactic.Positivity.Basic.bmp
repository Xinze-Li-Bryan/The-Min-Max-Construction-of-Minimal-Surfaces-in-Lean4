{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalMap\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"Extension for the `positivity` tactic: nonnegative maps take nonnegative values. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalMap","kind":"def","line":618,"name":"Mathlib.Meta.Positivity.evalMap","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L618-L624"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNegPart\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalNegPart</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"Extension for `negPart`. `a⁻` is always nonnegative. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNegPart","kind":"def","line":607,"name":"Mathlib.Meta.Positivity.evalNegPart","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L607-L616"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalPosPart\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalPosPart</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"Extension for `posPart`. `a⁺` is always nonnegative, and positive if `a` is. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalPosPart","kind":"def","line":591,"name":"Mathlib.Meta.Positivity.evalPosPart","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L591-L605"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalRatDen\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalRatDen</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"The `positivity` extension which identifies expressions of the form `Rat.den a`. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalRatDen","kind":"def","line":582,"name":"Mathlib.Meta.Positivity.evalRatDen","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L582-L589"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalRatNum\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalRatNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"The `positivity` extension which identifies expressions of the form `Rat.num a`,\nsuch that `positivity` successfully recognises `a`. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalRatNum","kind":"def","line":566,"name":"Mathlib.Meta.Positivity.evalRatNum","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L566-L580"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNNRatDen\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalNNRatDen</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"The `positivity` extension which identifies expressions of the form `Rat.den a`. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNNRatDen","kind":"def","line":543,"name":"Mathlib.Meta.Positivity.evalNNRatDen","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L543-L550"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNNRatNum\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalNNRatNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"The `positivity` extension which identifies expressions of the form `NNRat.num q`,\nsuch that `positivity` successfully recognises `q`. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNNRatNum","kind":"def","line":528,"name":"Mathlib.Meta.Positivity.evalNNRatNum","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L528-L541"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIntLCM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalIntLCM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"Extension for `Int.lcm`. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIntLCM","kind":"def","line":506,"name":"Mathlib.Meta.Positivity.evalIntLCM","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L506-L520"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIntGCD\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalIntGCD</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"Extension for `Int.gcd`.\nUses positivity of the left term, if available, then tries the right term. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIntGCD","kind":"def","line":489,"name":"Mathlib.Meta.Positivity.evalIntGCD","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L489-L504"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatSqrt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalNatSqrt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"Extension for `Nat.sqrt`. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatSqrt","kind":"def","line":478,"name":"Mathlib.Meta.Positivity.evalNatSqrt","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L478-L487"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatLCM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalNatLCM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"Extension for `Nat.lcm`. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatLCM","kind":"def","line":463,"name":"Mathlib.Meta.Positivity.evalNatLCM","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L463-L476"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatGCD\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalNatGCD</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"Extension for `Nat.gcd`.\nUses positivity of the left term, if available, then tries the right term.\n\nThe implementation relies on the fact that `Positivity.core` on `ℕ` never returns `nonzero`. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatGCD","kind":"def","line":446,"name":"Mathlib.Meta.Positivity.evalNatGCD","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L446-L461"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalAscFactorial\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalAscFactorial</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"Extension for `Nat.ascFactorial`. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalAscFactorial","kind":"def","line":437,"name":"Mathlib.Meta.Positivity.evalAscFactorial","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L437-L444"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalFactorial\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalFactorial</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"Extension for `Nat.factorial`. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalFactorial","kind":"def","line":428,"name":"Mathlib.Meta.Positivity.evalFactorial","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L428-L435"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalPNatVal\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalPNatVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"Extension for `PNat.val`. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalPNatVal","kind":"def","line":419,"name":"Mathlib.Meta.Positivity.evalPNatVal","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L419-L426"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatSucc\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalNatSucc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"Extension for `Nat.succ`. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatSucc","kind":"def","line":410,"name":"Mathlib.Meta.Positivity.evalNatSucc","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L410-L417"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIntCast\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalIntCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"Extension for the `positivity` tactic: `Int.cast` is positive (resp. non-negative)\nif its input is. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIntCast","kind":"def","line":381,"name":"Mathlib.Meta.Positivity.evalIntCast","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L381-L408"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatCast\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalNatCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"Extension for the `positivity` tactic: `Nat.cast` is always non-negative,\nand positive when its input is. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatCast","kind":"def","line":363,"name":"Mathlib.Meta.Positivity.evalNatCast","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L363-L379"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatAbs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalNatAbs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"Extension for the `positivity` tactic: `Int.natAbs` is positive when its input is.\nSince the output type of `Int.natAbs` is `ℕ`, the nonnegative case is handled by the default\n`positivity` tactic.\n","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatAbs","kind":"def","line":339,"name":"Mathlib.Meta.Positivity.evalNatAbs","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L339-L361"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalAbs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalAbs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"The `positivity` extension which identifies expressions of the form `|a|`. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalAbs","kind":"def","line":319,"name":"Mathlib.Meta.Positivity.evalAbs","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L319-L334"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalPow\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalPow</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"The `positivity` extension which identifies expressions of the form `a ^ (b : ℕ)`,\nsuch that `positivity` successfully recognises both `a` and `b`. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalPow","kind":"def","line":263,"name":"Mathlib.Meta.Positivity.evalPow","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L263-L314"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalPowZeroNat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalPowZeroNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"The `positivity` extension which identifies expressions of the form `a ^ (0 : ℕ)`.\nThis extension is run in addition to the general `a ^ b` extension (they are overlapping). ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalPowZeroNat","kind":"def","line":252,"name":"Mathlib.Meta.Positivity.evalPowZeroNat","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L252-L261"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIntDiv\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalIntDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"The `positivity` extension which identifies expressions of the form `a / b`,\nwhere `a` and `b` are integers. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIntDiv","kind":"def","line":225,"name":"Mathlib.Meta.Positivity.evalIntDiv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L225-L246"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalMul\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"The `positivity` extension which identifies expressions of the form `a * b`,\nsuch that `positivity` successfully recognises both `a` and `b`. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalMul","kind":"def","line":176,"name":"Mathlib.Meta.Positivity.evalMul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L176-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalAdd\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"The `positivity` extension which identifies expressions of the form `a + b`,\nsuch that `positivity` successfully recognises both `a` and `b`. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalAdd","kind":"def","line":151,"name":"Mathlib.Meta.Positivity.evalAdd","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L151-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalMax\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalMax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"Extension for the `max` operator. The `max` of two numbers is nonnegative if at least one\nis nonnegative, strictly positive if at least one is positive, and nonzero if both are nonzero. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalMax","kind":"def","line":122,"name":"Mathlib.Meta.Positivity.evalMax","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L122-L149"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalMin\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalMin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"The `positivity` extension which identifies expressions of the form `min a b`,\nsuch that `positivity` successfully recognises both `a` and `b`. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalMin","kind":"def","line":103,"name":"Mathlib.Meta.Positivity.evalMin","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L103-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIte\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalIte</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>","info":{"doc":"The `positivity` extension which identifies expressions of the form `ite p a b`,\nsuch that `positivity` successfully recognises both `a` and `b`. ","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIte","kind":"def","line":54,"name":"Mathlib.Meta.Positivity.evalIte","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Positivity/Basic.lean#L54-L85"}}],"imports":["Init","Mathlib.Algebra.Order.Group.PosPart","Mathlib.Algebra.Order.Ring.Basic","Mathlib.Algebra.Order.Hom.Basic","Mathlib.Data.Int.CharZero","Mathlib.Data.Nat.Factorial.Basic","Mathlib.Data.NNRat.Defs","Mathlib.Data.PNat.Defs","Mathlib.Tactic.Positivity.Core","Qq"],"instances":[],"name":"Mathlib.Tactic.Positivity.Basic"}