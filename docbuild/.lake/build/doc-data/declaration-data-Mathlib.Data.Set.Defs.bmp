{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\"><span class=\"name\">Set</span>.<span class=\"name\">Nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"The property `s.Nonempty` expresses the fact that the set `s` is not empty. It should be used\nin theorem assumptions instead of `∃ x, x ∈ s` or `s ≠ ∅` as it gives access to a nice API thanks\nto the dot notation. ","docLink":"./Mathlib/Data/Set/Defs.html#Set.Nonempty","kind":"def","line":258,"name":"Set.Nonempty","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L258-L262"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.instLawfulFunctor\"><span class=\"name\">Set</span>.<span class=\"name\">instLawfulFunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulFunctor\">LawfulFunctor</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Set/Defs.html#Set.instLawfulFunctor","kind":"instance","line":251,"name":"Set.instLawfulFunctor","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L251-L256"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.instFunctor\"><span class=\"name\">Set</span>.<span class=\"name\">instFunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Set/Defs.html#Set.instFunctor","kind":"instance","line":249,"name":"Set.instFunctor","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L249-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.image\"><span class=\"name\">Set</span>.<span class=\"name\">image</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"The image of `s : Set α` by `f : α → β`, written `f '' s`, is the set of `b : β` such that\n`f a = b` for some `a ∈ s`. ","docLink":"./Mathlib/Data/Set/Defs.html#Set.image","kind":"def","line":245,"name":"Set.image","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L245-L247"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.term𝒫_\"><span class=\"name\">Set</span>.<span class=\"name\">term𝒫_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`𝒫 s` is the set of all subsets of `s`. ","docLink":"./Mathlib/Data/Set/Defs.html#Set.term𝒫_","kind":"def","line":242,"name":"Set.term𝒫_","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L242-L242"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.powerset\"><span class=\"name\">Set</span>.<span class=\"name\">powerset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"`𝒫 s` is the set of all subsets of `s`. ","docLink":"./Mathlib/Data/Set/Defs.html#Set.powerset","kind":"def","line":239,"name":"Set.powerset","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L239-L240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.instSDiff\"><span class=\"name\">Set</span>.<span class=\"name\">instSDiff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#SDiff\">SDiff</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Set/Defs.html#Set.instSDiff","kind":"instance","line":237,"name":"Set.instSDiff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L237-L237"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.diff\"><span class=\"name\">Set</span>.<span class=\"name\">diff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"The difference of two sets `s` and `t` is the set of elements contained in `s` but not in `t`.\n\nNote that you should **not** use this definition directly, but instead write `s \\ t`. ","docLink":"./Mathlib/Data/Set/Defs.html#Set.diff","kind":"def","line":232,"name":"Set.diff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L232-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.compl\"><span class=\"name\">Set</span>.<span class=\"name\">compl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"The complement of a set `s` is the set of elements not contained in `s`.\n\nNote that you should **not** use this definition directly, but instead write `sᶜ`. ","docLink":"./Mathlib/Data/Set/Defs.html#Set.compl","kind":"def","line":227,"name":"Set.compl","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L227-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.instInter\"><span class=\"name\">Set</span>.<span class=\"name\">instInter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Inter\">Inter</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Set/Defs.html#Set.instInter","kind":"instance","line":225,"name":"Set.instInter","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L225-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.inter\"><span class=\"name\">Set</span>.<span class=\"name\">inter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"The intersection of two sets `s` and `t` is the set of elements contained in both `s` and `t`.\n\nNote that you should **not** use this definition directly, but instead write `s ∩ t`. ","docLink":"./Mathlib/Data/Set/Defs.html#Set.inter","kind":"def","line":220,"name":"Set.inter","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L220-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.instUnion\"><span class=\"name\">Set</span>.<span class=\"name\">instUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Union\">Union</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Set/Defs.html#Set.instUnion","kind":"instance","line":218,"name":"Set.instUnion","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L218-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.union\"><span class=\"name\">Set</span>.<span class=\"name\">union</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"The union of two sets `s` and `t` is the set of elements contained in either `s` or `t`.\n\nNote that you should **not** use this definition directly, but instead write `s ∪ t`. ","docLink":"./Mathlib/Data/Set/Defs.html#Set.union","kind":"def","line":213,"name":"Set.union","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L213-L216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.instSingletonSet\"><span class=\"name\">Set</span>.<span class=\"name\">instSingletonSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Singleton\">Singleton</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Set/Defs.html#Set.instSingletonSet","kind":"instance","line":211,"name":"Set.instSingletonSet","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L211-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.singleton\"><span class=\"name\">Set</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"The singleton of an element `a` is the set with `a` as a single element.\n\nNote that you should **not** use this definition directly, but instead write `{a}`. ","docLink":"./Mathlib/Data/Set/Defs.html#Set.singleton","kind":"def","line":206,"name":"Set.singleton","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L206-L209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.instInsert\"><span class=\"name\">Set</span>.<span class=\"name\">instInsert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Insert\">Insert</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Set/Defs.html#Set.instInsert","kind":"instance","line":204,"name":"Set.instInsert","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L204-L204"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.insert\"><span class=\"name\">Set</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`Set.insert a s` is the set `{a} ∪ s`.\n\nNote that you should **not** use this definition directly, but instead write `insert a s` (which is\nmediated by the `Insert` typeclass). ","docLink":"./Mathlib/Data/Set/Defs.html#Set.insert","kind":"def","line":198,"name":"Set.insert","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L198-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.univ\"><span class=\"name\">Set</span>.<span class=\"name\">univ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"The universal set on a type `α` is the set containing all elements of `α`.\n\nThis is conceptually the \"same as\" `α` (in set theory, it is actually the same), but type theory\nmakes the distinction that `α` is a type while `Set.univ` is a term of type `Set α`. `Set.univ` can\nitself be coerced to a type `↥Set.univ` which is in bijection with (but distinct from) `α`. ","docLink":"./Mathlib/Data/Set/Defs.html#Set.univ","kind":"def","line":191,"name":"Set.univ","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L191-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Mathlib.Meta.setOfPatternMatchUnexpander\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">setOfPatternMatchUnexpander</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"Pretty printing for set-builder notation with pattern matching. ","docLink":"./Mathlib/Data/Set/Defs.html#Mathlib.Meta.setOfPatternMatchUnexpander","kind":"def","line":172,"name":"Mathlib.Meta.setOfPatternMatchUnexpander","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L172-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Mathlib.Meta.«term{_|_}_1»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">«term{_|_}_1»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"* `{ pat : X | p }` is notation for pattern matching in set-builder notation,\n  where `pat` is a pattern that is matched by all objects of type `X`\n  and `p` is a proposition that can refer to variables in the pattern.\n  It is the set of all objects of type `X` which, when matched with the pattern `pat`,\n  make `p` come out true.\n* `{ pat | p }` is the same, but in the case when the type `X` can be inferred.\n\nFor example, `{ (m, n) : ℕ × ℕ | m * n = 12 }` denotes the set of all ordered pairs of\nnatural numbers whose product is 12.\n\nNote that if the type ascription is left out and `p` can be interpreted as an extended binder,\nthen the extended binder interpretation will be used.  For example, `{ n + 1 | n < 3 }` will\nbe interpreted as `{ x : Nat | ∃ n < 3, n + 1 = x }` rather than using pattern matching.\n","docLink":"./Mathlib/Data/Set/Defs.html#Mathlib.Meta.«term{_|_}_1»","kind":"def","line":169,"name":"Mathlib.Meta.«term{_|_}_1»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L169-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Mathlib.Meta.macroPattSetBuilder\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">macroPattSetBuilder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"* `{ pat : X | p }` is notation for pattern matching in set-builder notation,\n  where `pat` is a pattern that is matched by all objects of type `X`\n  and `p` is a proposition that can refer to variables in the pattern.\n  It is the set of all objects of type `X` which, when matched with the pattern `pat`,\n  make `p` come out true.\n* `{ pat | p }` is the same, but in the case when the type `X` can be inferred.\n\nFor example, `{ (m, n) : ℕ × ℕ | m * n = 12 }` denotes the set of all ordered pairs of\nnatural numbers whose product is 12.\n\nNote that if the type ascription is left out and `p` can be interpreted as an extended binder,\nthen the extended binder interpretation will be used.  For example, `{ n + 1 | n < 3 }` will\nbe interpreted as `{ x : Nat | ∃ n < 3, n + 1 = x }` rather than using pattern matching.\n","docLink":"./Mathlib/Data/Set/Defs.html#Mathlib.Meta.macroPattSetBuilder","kind":"def","line":164,"name":"Mathlib.Meta.macroPattSetBuilder","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L164-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Mathlib.Meta.«term{_|_}»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">«term{_|_}»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`{ f x y | (x : X) (y : Y) }` is notation for the set of elements `f x y` constructed from the\nbinders `x` and `y`, equivalent to `{z : Z | ∃ x y, f x y = z}`.\n\nIf `f x y` is a single identifier, it must be parenthesized to avoid ambiguity with `{x | p x}`;\nfor instance, `{(x) | (x : Nat) (y : Nat) (_hxy : x = y^2)}`.\n","docLink":"./Mathlib/Data/Set/Defs.html#Mathlib.Meta.«term{_|_}»","kind":"def","line":146,"name":"Mathlib.Meta.«term{_|_}»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L146-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Mathlib.Meta.setOf.unexpander\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">setOf</span>.<span class=\"name\">unexpander</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"Unexpander for set builder notation. ","docLink":"./Mathlib/Data/Set/Defs.html#Mathlib.Meta.setOf.unexpander","kind":"def","line":131,"name":"Mathlib.Meta.setOf.unexpander","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L131-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Mathlib.Meta.elabSetBuilder\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">elabSetBuilder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>","info":{"doc":"Elaborate set builder notation for `Set`.\n\n* `{x | p x}` is elaborated as `Set.setOf fun x ↦ p x`\n* `{x : α | p x}` is elaborated as `Set.setOf fun x : α ↦ p x`\n* `{binder x | p x}`, where `x` is bound by the `binder` binder, is elaborated as\n  `{x | binder x ∧ p x}`. The typical example is `{x ∈ s | p x}`, which is elaborated as\n  `{x | x ∈ s ∧ p x}`. The possible binders are\n  * `· ∈ s`, `· ∉ s`\n  * `· ⊆ s`, `· ⊂ s`, `· ⊇ s`, `· ⊃ s`\n  * `· ≤ a`, `· ≥ a`, `· < a`, `· > a`, `· ≠ a`\n\n  More binders can be declared using the `binder_predicate` command, see `Init.BinderPredicates` for\n  more info.\n\nSee also\n* `Data.Finset.Basic` for the `Finset` builder notation elaborator partly overriding this one for\n  syntax of the form `{x ∈ s | p x}`.\n* `Data.Fintype.Basic` for the `Finset` builder notation elaborator partly overriding this one for\n  syntax of the form `{x | p x}`, `{x : α | p x}`, `{x ∉ s | p x}`, `{x ≠ a | p x}`.\n* `Order.LocallyFinite.Basic` for the `Finset` builder notation elaborator partly overriding this\n  one for syntax of the form `{x ≤ a | p x}`, `{x ≥ a | p x}`, `{x < a | p x}`, `{x > a | p x}`.\n","docLink":"./Mathlib/Data/Set/Defs.html#Mathlib.Meta.elabSetBuilder","kind":"def","line":99,"name":"Mathlib.Meta.elabSetBuilder","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L99-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Mathlib.Meta.setBuilder\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">setBuilder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Set builder syntax. This can be elaborated to either a `Set` or a `Finset` depending on context.\n\nThe elaborators for this syntax are located in:\n* `Data.Set.Defs` for the `Set` builder notation elaborator for syntax of the form `{x | p x}`,\n  `{x : α | p x}`, `{binder x | p x}`.\n* `Data.Finset.Basic` for the `Finset` builder notation elaborator for syntax of the form\n  `{x ∈ s | p x}`.\n* `Data.Fintype.Basic` for the `Finset` builder notation elaborator for syntax of the form\n  `{x | p x}`, `{x : α | p x}`, `{x ∉ s | p x}`, `{x ≠ a | p x}`.\n* `Order.LocallyFinite.Basic` for the `Finset` builder notation elaborator for syntax of the form\n  `{x ≤ a | p x}`, `{x ≥ a | p x}`, `{x < a | p x}`, `{x > a | p x}`.\n","docLink":"./Mathlib/Data/Set/Defs.html#Mathlib.Meta.setBuilder","kind":"def","line":85,"name":"Mathlib.Meta.setBuilder","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L85-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.instEmptyCollection\"><span class=\"name\">Set</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Set/Defs.html#Set.instEmptyCollection","kind":"instance","line":78,"name":"Set.instEmptyCollection","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L78-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.instHasSubset\"><span class=\"name\">Set</span>.<span class=\"name\">instHasSubset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#HasSubset\">HasSubset</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Set/Defs.html#Set.instHasSubset","kind":"instance","line":75,"name":"Set.instHasSubset","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L75-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.instLE\"><span class=\"name\">Set</span>.<span class=\"name\">instLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"We introduce `≤` before `⊆` to help the unifier when applying lattice theorems\nto subset hypotheses. ","docLink":"./Mathlib/Data/Set/Defs.html#Set.instLE","kind":"instance","line":70,"name":"Set.instLE","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L70-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.Subset\"><span class=\"name\">Set</span>.<span class=\"name\">Subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"The subset relation on sets. `s ⊆ t` means that all elements of `s` are elements of `t`.\n\nNote that you should **not** use this definition directly, but instead write `s ⊆ t`. ","docLink":"./Mathlib/Data/Set/Defs.html#Set.Subset","kind":"def","line":64,"name":"Set.Subset","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L64-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.ext_iff\"><span class=\"name\">Set</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Set/Defs.html#Set.ext_iff","kind":"theorem","line":61,"name":"Set.ext_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L61-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.ext\"><span class=\"name\">Set</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Set/Defs.html#Set.ext","kind":"theorem","line":58,"name":"Set.ext","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L58-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.instMembership\"><span class=\"name\">Set</span>.<span class=\"name\">instMembership</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Set/Defs.html#Set.instMembership","kind":"instance","line":55,"name":"Set.instMembership","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L55-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set.Mem\"><span class=\"name\">Set</span>.<span class=\"name\">Mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Membership in a set ","docLink":"./Mathlib/Data/Set/Defs.html#Set.Mem","kind":"def","line":51,"name":"Set.Mem","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L51-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#setOf\"><span class=\"name\">setOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Turn a predicate `p : α → Prop` into a set, also written as `{x | p x}` ","docLink":"./Mathlib/Data/Set/Defs.html#setOf","kind":"def","line":45,"name":"setOf","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L45-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Set/Defs.html#Set\"><span class=\"name\">Set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"A set is a collection of elements of some type `α`.\n\nAlthough `Set` is defined as `α → Prop`, this is an implementation detail which should not be\nrelied on. Instead, `setOf` and membership of a set (`∈`) should be used to convert between sets\nand predicates.\n","docLink":"./Mathlib/Data/Set/Defs.html#Set","kind":"def","line":37,"name":"Set","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Set/Defs.lean#L37-L43"}}],"imports":["Init","Mathlib.Init","Batteries.Util.ExtendedBinder"],"instances":[{"className":"Membership","name":"Set.instMembership","typeNames":["Set"]},{"className":"LE","name":"Set.instLE","typeNames":["Set"]},{"className":"HasSubset","name":"Set.instHasSubset","typeNames":["Set"]},{"className":"EmptyCollection","name":"Set.instEmptyCollection","typeNames":["Set"]},{"className":"Insert","name":"Set.instInsert","typeNames":["Set"]},{"className":"Singleton","name":"Set.instSingletonSet","typeNames":["Set"]},{"className":"Union","name":"Set.instUnion","typeNames":["Set"]},{"className":"Inter","name":"Set.instInter","typeNames":["Set"]},{"className":"SDiff","name":"Set.instSDiff","typeNames":["Set"]},{"className":"Functor","name":"Set.instFunctor","typeNames":["Set"]},{"className":"LawfulFunctor","name":"Set.instLawfulFunctor","typeNames":["Set"]}],"name":"Mathlib.Data.Set.Defs"}