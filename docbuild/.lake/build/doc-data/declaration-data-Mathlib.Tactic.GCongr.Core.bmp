{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.«tacticRel[_]»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">«tacticRel[_]»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"The `rel` tactic applies \"generalized congruence\" rules to solve a relational goal by\n\"substitution\".  For example,\n```\nexample {a b x c d : ℝ} (h1 : a ≤ b) (h2 : c ≤ d) :\n    x ^ 2 * a + c ≤ x ^ 2 * b + d := by\n  rel [h1, h2]\n```\nIn this example we \"substitute\" the hypotheses `a ≤ b` and `c ≤ d` into the LHS `x ^ 2 * a + c` of\nthe goal and obtain the RHS `x ^ 2 * b + d`, thus proving the goal.\n\nThe \"generalized congruence\" rules used are the library lemmas which have been tagged with the\nattribute `@[gcongr]`.  For example, the first example constructs the proof term\n```\nadd_le_add (mul_le_mul_of_nonneg_left h1 (pow_bit0_nonneg x 1)) h2\n```\nusing the generalized congruence lemmas `add_le_add` and `mul_le_mul_of_nonneg_left`.  If there are\nno applicable generalized congruence lemmas, the tactic fails.\n\nThe tactic attempts to discharge side goals to these \"generalized congruence\" lemmas (such as the\nside goal `0 ≤ x ^ 2` in the above application of `mul_le_mul_of_nonneg_left`) using the tactic\n`gcongr_discharger`, which wraps `positivity` but can also be extended. If the side goals cannot\nbe discharged in this way, the tactic fails. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.«tacticRel[_]»","kind":"def","line":667,"name":"Mathlib.Tactic.GCongr.«tacticRel[_]»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L667-L689"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.tacticGcongr___With___\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">tacticGcongr___With___</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"The `gcongr` tactic applies \"generalized congruence\" rules, reducing a relational goal\nbetween a LHS and RHS.  For example,\n```\nexample {a b x c d : ℝ} (h1 : a + 1 ≤ b + 1) (h2 : c + 2 ≤ d + 2) :\n    x ^ 2 * a + c ≤ x ^ 2 * b + d := by\n  gcongr\n  · linarith\n  · linarith\n```\nThis example has the goal of proving the relation `≤` between a LHS and RHS both of the pattern\n```\nx ^ 2 * ?_ + ?_\n```\n(with inputs `a`, `c` on the left and `b`, `d` on the right); after the use of\n`gcongr`, we have the simpler goals `a ≤ b` and `c ≤ d`.\n\nA depth limit or a pattern can be provided explicitly;\nthis is useful if a non-maximal match is desired:\n```\nexample {a b c d x : ℝ} (h : a + c + 1 ≤ b + d + 1) :\n    x ^ 2 * (a + c) + 5 ≤ x ^ 2 * (b + d) + 5 := by\n  gcongr x ^ 2 * ?_ + 5 -- or `gcongr 2`\n  linarith\n```\n\nThe \"generalized congruence\" rules are the library lemmas which have been tagged with the\nattribute `@[gcongr]`.  For example, the first example constructs the proof term\n```\nadd_le_add (mul_le_mul_of_nonneg_left ?_ (Even.pow_nonneg (even_two_mul 1) x)) ?_\n```\nusing the generalized congruence lemmas `add_le_add` and `mul_le_mul_of_nonneg_left`.\n\nThe tactic attempts to discharge side goals to these \"generalized congruence\" lemmas (such as the\nside goal `0 ≤ x ^ 2` in the above application of `mul_le_mul_of_nonneg_left`) using the tactic\n`gcongr_discharger`, which wraps `positivity` but can also be extended. Side goals not discharged\nin this way are left for the user.\n\n`gcongr` will descend into binders (for example sums or suprema). To name the bound variables,\nuse `with`:\n```\nexample {f g : ℕ → ℝ≥0∞} (h : ∀ n, f n ≤ g n) : ⨆ n, f n ≤ ⨆ n, g n := by\n  gcongr with i\n  exact h i\n```\n","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.tacticGcongr___With___","kind":"def","line":598,"name":"Mathlib.Tactic.GCongr.tacticGcongr___With___","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L598-L665"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Lean.MVarId.gcongr\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">gcongr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">template</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">names</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.binderIdent</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000000</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">grewriteHole</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mainGoalDischarger</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span> := <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrForwardDischarger\">Mathlib.Tactic.GCongr.gcongrForwardDischarger</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sideGoalDischarger</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span> := <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrDischarger\">Mathlib.Tactic.GCongr.gcongrDischarger</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.binderIdent</span>)</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></div></div>","info":{"doc":"The core of the `gcongr` tactic.  Parse a goal into the form `(f _ ... _) ∼ (f _ ... _)`,\nlook up any relevant `@[gcongr]` lemmas, try to apply them, recursively run the tactic itself on\n\"main\" goals which are generated, and run the discharger on side goals which are generated. If there\nis a user-provided template, first check that the template asks us to descend this far into the\nmatch. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Lean.MVarId.gcongr","kind":"opaque","line":453,"name":"Lean.MVarId.gcongr","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L453-L596"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Lean.MVarId.applyWithArity\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">applyWithArity</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyConfig\">Meta.ApplyConfig</a> := <a href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyConfig.mk\">{</a> <a href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">term?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"`Lean.MVarId.applyWithArity` is a copy of `Lean.MVarId.apply`, where the arity of the\napplied function is given explicitly instead of being inferred.\n\nTODO: make `Lean.MVarId.apply` take a configuration argument to do this itself\n","docLink":"./Mathlib/Tactic/GCongr/Core.html#Lean.MVarId.applyWithArity","kind":"def","line":418,"name":"Lean.MVarId.applyWithArity","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L418-L451"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.relImpRelLemma\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">relImpRelLemma</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a></span></div></div>","info":{"doc":"Construct a `GCongrLemma` for `gcongr` goals of the form `a ≺ b → c ≺ d`.\nThis will be tried if there is no other available `@[gcongr]` lemma.\nFor example, the relation `a ≡ b [ZMOD n]` has an instance of `IsTrans`, so a congruence of the form\n`a ≡ b [ZMOD n] → c ≡ d [ZMOD n]` can be solved with `rel_imp_rel`, `rel_trans` or `rel_trans'`.\n","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.relImpRelLemma","kind":"def","line":401,"name":"Mathlib.Tactic.GCongr.relImpRelLemma","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L401-L413"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.rel_imp_rel\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">rel_imp_rel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsTrans\">IsTrans</a> <span class=\"fn\">α</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">c</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">b</span> <span class=\"fn\">d</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">c</span> <span class=\"fn\">d</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.rel_imp_rel","kind":"theorem","line":398,"name":"Mathlib.Tactic.GCongr.rel_imp_rel","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L398-L399"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.containsHole\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">containsHole</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">template</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Determine whether `template` contains a `?_`.\nThis guides the `gcongr` tactic when it is given a template. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.containsHole","kind":"def","line":378,"name":"Mathlib.Tactic.GCongr.containsHole","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L378-L387"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrForwardDischarger\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">gcongrForwardDischarger</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"This is used as the default main-goal discharger,\nconsisting of running `Lean.MVarId.gcongrForward` (trying a term together with limited\nforward-reasoning on that term) on each nontrivial hypothesis.\n","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrForwardDischarger","kind":"def","line":364,"name":"Mathlib.Tactic.GCongr.gcongrForwardDischarger","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L364-L376"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Lean.MVarId.gcongrForward\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">gcongrForward</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Attempt to resolve an (implicitly) relational goal by one of a provided list of hypotheses,\neither with such a hypothesis directly or by a limited palette of relational forward-reasoning from\nthese hypotheses. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Lean.MVarId.gcongrForward","kind":"def","line":346,"name":"Lean.MVarId.gcongrForward","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L346-L362"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.exact\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">exact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GCongr/ForwardAttr.html#Mathlib.Tactic.GCongr.ForwardExt\">ForwardExt</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.exact","kind":"def","line":343,"name":"Mathlib.Tactic.GCongr.exact","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L343-L344"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.symmExact\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">symmExact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GCongr/ForwardAttr.html#Mathlib.Tactic.GCongr.ForwardExt\">ForwardExt</a></div></div>","info":{"doc":"See if the term is `a ∼ b` with `∼` symmetric and the goal is `b ∼ a`. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.symmExact","kind":"def","line":339,"name":"Mathlib.Tactic.GCongr.symmExact","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L339-L341"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.exactRefl\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">exactRefl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GCongr/ForwardAttr.html#Mathlib.Tactic.GCongr.ForwardExt\">ForwardExt</a></div></div>","info":{"doc":"See if the term is `a = b` and the goal is `a ∼ b` or `b ∼ a`, with `∼` reflexive. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.exactRefl","kind":"def","line":332,"name":"Mathlib.Tactic.GCongr.exactRefl","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L332-L337"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrDischarger\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">gcongrDischarger</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"This is used as the default side-goal discharger,\nit calls the `gcongr_discharger` extensible tactic.\n","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrDischarger","kind":"def","line":320,"name":"Mathlib.Tactic.GCongr.gcongrDischarger","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L320-L328"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.tacticGcongr_discharger\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">tacticGcongr_discharger</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.tacticGcongr_discharger","kind":"def","line":318,"name":"Mathlib.Tactic.GCongr.tacticGcongr_discharger","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L318-L318"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.makeGCongrLemma\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">makeGCongrLemma</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declTy</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numHyps </span><span class=\"fn\">prio</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a></span></div></div>","info":{"doc":"Construct the `GCongrLemma` data from a given lemma. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.makeGCongrLemma","kind":"def","line":210,"name":"Mathlib.Tactic.GCongr.makeGCongrLemma","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L210-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.getRel\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">getRel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></div></div>","info":{"doc":"If `e` is of the form `r a b`, return `(r, a, b)`. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.getRel","kind":"def","line":199,"name":"Mathlib.Tactic.GCongr.getRel","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L199-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.getCongrAppFnArgs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">getCongrAppFnArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></div></div>","info":{"doc":"Given an application `f a₁ .. aₙ`, return the name of `f`, and the array of arguments `aᵢ`. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.getCongrAppFnArgs","kind":"def","line":187,"name":"Mathlib.Tactic.GCongr.getCongrAppFnArgs","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L187-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrExt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">gcongrExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ScopedEnvExtension.html#Lean.SimpleScopedEnvExtension\">Lean.SimpleScopedEnvExtension</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a> <span class=\"fn\">(<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a>)</span>)</span></span></div></div>","info":{"doc":"Environment extension for \"generalized congruence\" (`gcongr`) lemmas. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.gcongrExt","kind":"opaque","line":179,"name":"Mathlib.Tactic.GCongr.gcongrExt","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L179-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.addGCongrLemmaEntry.insert\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">addGCongrLemmaEntry</span>.<span class=\"name\">insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a></span></span></div></div>","info":{"doc":"- Insert a `GCongrLemma` in the correct place in a list of lemmas. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.addGCongrLemmaEntry.insert","kind":"def","line":175,"name":"Mathlib.Tactic.GCongr.addGCongrLemmaEntry.insert","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L175-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.addGCongrLemmaEntry\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">addGCongrLemmaEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemmas\">GCongrLemmas</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemmas\">GCongrLemmas</a></div></div>","info":{"doc":"Insert a `GCongrLemma` in a collection of lemmas, making sure that the lemmas are sorted. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.addGCongrLemmaEntry","kind":"def","line":168,"name":"Mathlib.Tactic.GCongr.addGCongrLemmaEntry","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L168-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.prioLE\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrLemma</span>.<span class=\"name\">prioLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Return `true` if the priority of `a` is less than or equal to the priority of `b`. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.prioLE","kind":"def","line":164,"name":"Mathlib.Tactic.GCongr.GCongrLemma.prioLE","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L164-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemmas\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrLemmas</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A collection of `GCongrLemma`, to be stored in the environment extension. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemmas","kind":"def","line":161,"name":"Mathlib.Tactic.GCongr.GCongrLemmas","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L161-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instInhabitedGCongrLemma\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">instInhabitedGCongrLemma</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instInhabitedGCongrLemma","kind":"instance","line":159,"name":"Mathlib.Tactic.GCongr.instInhabitedGCongrLemma","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L159-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instInhabitedGCongrLemma.default\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">instInhabitedGCongrLemma</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instInhabitedGCongrLemma.default","kind":"def","line":159,"name":"Mathlib.Tactic.GCongr.instInhabitedGCongrLemma.default","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L159-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.numVarying\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrLemma</span>.<span class=\"name\">numVarying</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The number of arguments in the application of `head` that are different.\nThis is used for sorting the lemmas.\nFor example, `a + b ≤ a + c` has `numVarying := 1`. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.numVarying","kind":"def","line":158,"name":"Mathlib.Tactic.GCongr.GCongrLemma.numVarying","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L158-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.prio\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrLemma</span>.<span class=\"name\">prio</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The given priority of the lemma, for example as `@[gcongr high]`. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.prio","kind":"def","line":154,"name":"Mathlib.Tactic.GCongr.GCongrLemma.prio","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L154-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.numHyps\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrLemma</span>.<span class=\"name\">numHyps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The number of arguments that `declName` takes when applying it. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.numHyps","kind":"def","line":152,"name":"Mathlib.Tactic.GCongr.GCongrLemma.numHyps","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L152-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.mainSubgoals\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrLemma</span>.<span class=\"name\">mainSubgoals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>","info":{"doc":"`mainSubgoals` are the subgoals on which `gcongr` will be recursively called. They store\n- the index of the hypothesis\n- the index of the arguments in the conclusion\n- the number of parameters in the hypothesis ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.mainSubgoals","kind":"def","line":150,"name":"Mathlib.Tactic.GCongr.GCongrLemma.mainSubgoals","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L150-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.declName\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrLemma</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>","info":{"doc":"The name of the lemma. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.declName","kind":"def","line":145,"name":"Mathlib.Tactic.GCongr.GCongrLemma.declName","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L145-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.key\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrLemma</span>.<span class=\"name\">key</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a></div></div>","info":{"doc":"The key under which the lemma is stored. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.key","kind":"def","line":143,"name":"Mathlib.Tactic.GCongr.GCongrLemma.key","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L143-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrLemma</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">key</span> : <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mainSubgoals</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numHyps </span><span class=\"fn\">prio </span><span class=\"fn\">numVarying</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\">GCongrLemma</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma.mk","kind":"ctor","line":141,"name":"Mathlib.Tactic.GCongr.GCongrLemma.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L141-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrLemma</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Structure recording the data for a \"generalized congruence\" (`gcongr`) lemma. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrLemma","kind":"structure","line":140,"name":"Mathlib.Tactic.GCongr.GCongrLemma","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L140-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instHashableGCongrKey.hash\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">instHashableGCongrKey</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instHashableGCongrKey.hash","kind":"def","line":138,"name":"Mathlib.Tactic.GCongr.instHashableGCongrKey.hash","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L138-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instHashableGCongrKey\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">instHashableGCongrKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instHashableGCongrKey","kind":"instance","line":138,"name":"Mathlib.Tactic.GCongr.instHashableGCongrKey","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L138-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instBEqGCongrKey\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">instBEqGCongrKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instBEqGCongrKey","kind":"instance","line":138,"name":"Mathlib.Tactic.GCongr.instBEqGCongrKey","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L138-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instBEqGCongrKey.beq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">instBEqGCongrKey</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a> → <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instBEqGCongrKey.beq","kind":"def","line":138,"name":"Mathlib.Tactic.GCongr.instBEqGCongrKey.beq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L138-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instInhabitedGCongrKey\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">instInhabitedGCongrKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instInhabitedGCongrKey","kind":"instance","line":138,"name":"Mathlib.Tactic.GCongr.instInhabitedGCongrKey","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L138-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instInhabitedGCongrKey.default\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">instInhabitedGCongrKey</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.instInhabitedGCongrKey.default","kind":"def","line":138,"name":"Mathlib.Tactic.GCongr.instInhabitedGCongrKey.default","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L138-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey.arity\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrKey</span>.<span class=\"name\">arity</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The number of arguments that `head` is applied to.\nFor example, `a + b ≤ a + c` has `arity := 6`, because `HAdd.hAdd` has 6 arguments. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey.arity","kind":"def","line":137,"name":"Mathlib.Tactic.GCongr.GCongrKey.arity","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L137-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey.head\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrKey</span>.<span class=\"name\">head</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>","info":{"doc":"The name of the head function. For example, `a + b ≤ a + c` has ``head := `HAdd.hAdd``. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey.head","kind":"def","line":134,"name":"Mathlib.Tactic.GCongr.GCongrKey.head","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L134-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey.relName\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrKey</span>.<span class=\"name\">relName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>","info":{"doc":"The name of the relation. For example, `a + b ≤ a + c` has ``relName := `LE.le``. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey.relName","kind":"def","line":132,"name":"Mathlib.Tactic.GCongr.GCongrKey.relName","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L132-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrKey</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">relName </span><span class=\"fn\">head</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\">GCongrKey</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey.mk","kind":"ctor","line":130,"name":"Mathlib.Tactic.GCongr.GCongrKey.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L130-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GCongr</span>.<span class=\"name\">GCongrKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`GCongrKey` is the key used in the hashmap for looking up `gcongr` lemmas. ","docLink":"./Mathlib/Tactic/GCongr/Core.html#Mathlib.Tactic.GCongr.GCongrKey","kind":"structure","line":129,"name":"Mathlib.Tactic.GCongr.GCongrKey","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/GCongr/Core.lean#L129-L138"}}],"imports":["Init","Lean","Batteries.Lean.Except","Batteries.Tactic.Exact","Mathlib.Lean.Elab.Term","Mathlib.Tactic.GCongr.ForwardAttr","Mathlib.Order.Defs.Unbundled"],"instances":[{"className":"Inhabited","name":"Mathlib.Tactic.GCongr.instInhabitedGCongrKey","typeNames":["Mathlib.Tactic.GCongr.GCongrKey"]},{"className":"BEq","name":"Mathlib.Tactic.GCongr.instBEqGCongrKey","typeNames":["Mathlib.Tactic.GCongr.GCongrKey"]},{"className":"Hashable","name":"Mathlib.Tactic.GCongr.instHashableGCongrKey","typeNames":["Mathlib.Tactic.GCongr.GCongrKey"]},{"className":"Inhabited","name":"Mathlib.Tactic.GCongr.instInhabitedGCongrLemma","typeNames":["Mathlib.Tactic.GCongr.GCongrLemma"]}],"name":"Mathlib.Tactic.GCongr.Core"}