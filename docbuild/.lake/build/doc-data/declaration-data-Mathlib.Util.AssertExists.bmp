{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AssertExists.html#commandAssert_not_imported_\"><span class=\"name\">commandAssert_not_imported_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`assert_not_imported m₁ m₂ ... mₙ` checks that each one of the modules `m₁ m₂ ... mₙ` is not\namong the transitive imports of the current file.\n\nThe command does not currently check whether the modules `m₁ m₂ ... mₙ` actually exist.\n","docLink":"./Mathlib/Util/AssertExists.html#commandAssert_not_imported_","kind":"def","line":133,"name":"commandAssert_not_imported_","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/AssertExists.lean#L133-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AssertExists.html#commandAssert_not_exists_\"><span class=\"name\">commandAssert_not_exists_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`assert_not_exists d₁ d₂ ... dₙ` is a user command that asserts that the declarations named\n`d₁ d₂ ... dₙ` *do not exist* in the current import scope.\n\nBe careful to use names (e.g. `Rat`) rather than notations (e.g. `ℚ`).\n\nIt may be used (sparingly!) in mathlib to enforce plans that certain files\nare independent of each other.\n\nIf you encounter an error on an `assert_not_exists` command while developing mathlib,\nit is probably because you have introduced new import dependencies to a file.\n\nIn this case, you should refactor your work\n(for example by creating new files rather than adding imports to existing files).\nYou should *not* delete the `assert_not_exists` statement without careful discussion ahead of time.\n\n`assert_not_exists` statements should generally live at the top of the file, after the module doc.\n","docLink":"./Mathlib/Util/AssertExists.html#commandAssert_not_exists_","kind":"def","line":96,"name":"commandAssert_not_exists_","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/AssertExists.lean#L96-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AssertExists.html#importPathMessage\"><span class=\"name\">importPathMessage</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Lean/Environment.html#Lean.ModuleIdx\">Lean.ModuleIdx</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>","info":{"doc":"`importPathMessage env idx` produces a message laying out an import chain from `idx` to the\ncurrent module.  The output is of the form\n```\nMathlib.Init,\n  which is imported by Mathlib.Util.AssertExistsExt,\n  which is imported by Mathlib.Util.AssertExists,\n  which is imported by this file.\n```\nif `env` is an `Environment` and `idx` is the module index of `Mathlib.Init`.\n","docLink":"./Mathlib/Util/AssertExists.html#importPathMessage","kind":"def","line":80,"name":"importPathMessage","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/AssertExists.lean#L80-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AssertExists.html#commandAssert_exists_\"><span class=\"name\">commandAssert_exists_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`assert_exists n` is a user command that asserts that a declaration named `n` exists\nin the current import scope.\n\nBe careful to use names (e.g. `Rat`) rather than notations (e.g. `ℚ`).\n","docLink":"./Mathlib/Util/AssertExists.html#commandAssert_exists_","kind":"def","line":69,"name":"commandAssert_exists_","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/AssertExists.lean#L69-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AssertExists.html#Mathlib.AssertNotExist.«command#check_assertions!»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">AssertNotExist</span>.<span class=\"name\">«command#check_assertions!»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`#check_assertions` retrieves all declarations and all imports that were declared\nnot to exist so far (including in transitively imported files) and reports their current\nstatus:\n* ✓ means the declaration or import exists,\n* × means the declaration or import does not exist.\n\nThis means that the expectation is that all checks *succeed* by the time `#check_assertions`\nis used, typically once all of `Mathlib` has been built.\n\nIf all declarations and imports are available when `#check_assertions` is used,\nthen the command logs an info message. Otherwise, it emits a warning.\n\nThe variant `#check_assertions!` only prints declarations/imports that are not present in the\nenvironment.  In particular, it is silent if everything is imported, making it useful for testing.\n","docLink":"./Mathlib/Util/AssertExists.html#Mathlib.AssertNotExist.«command#check_assertions!»","kind":"def","line":28,"name":"Mathlib.AssertNotExist.«command#check_assertions!»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/AssertExists.lean#L28-L65"}}],"imports":["Init","Mathlib.Init","Lean.Elab.Command","Mathlib.Util.AssertExistsExt"],"instances":[],"name":"Mathlib.Util.AssertExists"}