{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.Tableau.mat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">Tableau</span>.<span class=\"name\">mat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">matType</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">matType</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.Tableau\">Tableau</a> <span class=\"fn\">matType</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">matType</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.Tableau.basic\">basic</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.Tableau.free\">free</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span></span></div></div>","info":{"doc":"Matrix of coefficients the basic variables expressed through the free ones. ","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.Tableau.mat","kind":"def","line":126,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.Tableau.mat","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.lean#L126-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.Tableau.free\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">Tableau</span>.<span class=\"name\">free</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">matType</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">matType</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.Tableau\">Tableau</a> <span class=\"fn\">matType</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Array containing the free variables' indexes ","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.Tableau.free","kind":"def","line":124,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.Tableau.free","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.lean#L124-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.Tableau.basic\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">Tableau</span>.<span class=\"name\">basic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">matType</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">matType</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.Tableau\">Tableau</a> <span class=\"fn\">matType</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Array containing the basic variables' indexes ","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.Tableau.basic","kind":"def","line":122,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.Tableau.basic","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.lean#L122-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.Tableau.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">Tableau</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">matType</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">matType</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">basic </span><span class=\"fn\">free</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mat</span> : <span class=\"fn\"><span class=\"fn\">matType</span> <span class=\"fn\"><span class=\"fn\">basic</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <span class=\"fn\"><span class=\"fn\">free</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.Tableau\">Tableau</a> <span class=\"fn\">matType</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.Tableau.mk","kind":"ctor","line":120,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.Tableau.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.lean#L120-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.Tableau\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">Tableau</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matType</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">matType</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`Tableau` is a structure the Simplex Algorithm operates on. The `i`-th row of `mat` expresses the\nvariable `basic[i]` as a linear combination of variables from `free`.\n","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.Tableau","kind":"structure","line":116,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.Tableau","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.lean#L116-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.instUsableInSimplexAlgorithmSparseMatrix\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">instUsableInSimplexAlgorithmSparseMatrix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.SparseMatrix\">SparseMatrix</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.instUsableInSimplexAlgorithmSparseMatrix","kind":"instance","line":86,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.instUsableInSimplexAlgorithmSparseMatrix","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.lean#L86-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.SparseMatrix.data\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">SparseMatrix</span>.<span class=\"name\">data</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.SparseMatrix\">SparseMatrix</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span></div></div>","info":{"doc":"The content of the matrix. ","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.SparseMatrix.data","kind":"def","line":84,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.SparseMatrix.data","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.lean#L84-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.SparseMatrix.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">SparseMatrix</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.SparseMatrix\">SparseMatrix</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.SparseMatrix.mk","kind":"ctor","line":82,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.SparseMatrix.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.SparseMatrix\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">SparseMatrix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Structure for sparse matrices over ℚ, implemented as an array of hashmaps, containing only nonzero\nvalues.\n","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.SparseMatrix","kind":"structure","line":78,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.SparseMatrix","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.lean#L78-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.instUsableInSimplexAlgorithmDenseMatrix\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">instUsableInSimplexAlgorithmDenseMatrix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.DenseMatrix\">DenseMatrix</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.instUsableInSimplexAlgorithmDenseMatrix","kind":"instance","line":55,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.instUsableInSimplexAlgorithmDenseMatrix","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.lean#L55-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.DenseMatrix.data\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">DenseMatrix</span>.<span class=\"name\">data</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.DenseMatrix\">DenseMatrix</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span></div></div>","info":{"doc":"The content of the matrix. ","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.DenseMatrix.data","kind":"def","line":53,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.DenseMatrix.data","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.DenseMatrix.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">DenseMatrix</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.DenseMatrix\">DenseMatrix</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.DenseMatrix.mk","kind":"ctor","line":51,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.DenseMatrix.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.DenseMatrix\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">DenseMatrix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Structure for matrices over ℚ.\n\nSo far it is just a 2d-array carrying dimensions (that are supposed to match with the actual\ndimensions of `data`), but the plan is to add some `Prop`-data and make the structure strict and\nsafe.\n\nNote: we avoid using `Matrix` because it is far more efficient to store a matrix as its entries than\nas function between `Fin`-s.\n","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.DenseMatrix","kind":"structure","line":41,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.DenseMatrix","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.lean#L41-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.instGetElemProdNatRatAndLtFstSndOfUsableInSimplexAlgorithm\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">instGetElemProdNatRatAndLtFstSndOfUsableInSimplexAlgorithm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matType</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">matType</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/GetElem.html#GetElem\">GetElem</a> <span class=\"fn\">(<span class=\"fn\">matType</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>) <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">matType</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>) (<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>) =&gt; <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.instGetElemProdNatRatAndLtFstSndOfUsableInSimplexAlgorithm","kind":"instance","line":37,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.instGetElemProdNatRatAndLtFstSndOfUsableInSimplexAlgorithm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.lean#L37-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.divideRow\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">UsableInSimplexAlgorithm</span>.<span class=\"name\">divideRow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mat</span> : <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">coef</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"Divides the `i`-th row by `coef`. ","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.divideRow","kind":"def","line":33,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.divideRow","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.subtractRow\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">UsableInSimplexAlgorithm</span>.<span class=\"name\">subtractRow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mat</span> : <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">coef</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"Subtracts `i`-th row multiplied by `coef` from `j`-th row. ","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.subtractRow","kind":"def","line":31,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.subtractRow","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.swapRows\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">UsableInSimplexAlgorithm</span>.<span class=\"name\">swapRows</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mat</span> : <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"Swaps two rows. ","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.swapRows","kind":"def","line":29,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.swapRows","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.ofValues\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">UsableInSimplexAlgorithm</span>.<span class=\"name\">ofValues</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">values</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"Creates a matrix from a list of elements in the form `(i, j, mat[i, j])`. ","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.ofValues","kind":"def","line":27,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.ofValues","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.lean#L27-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.getValues\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">UsableInSimplexAlgorithm</span>.<span class=\"name\">getValues</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mat</span> : <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></div></div>","info":{"doc":"Returns the list of elements of `mat` in the form `(i, j, mat[i, j])`. ","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.getValues","kind":"def","line":25,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.getValues","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.setElem\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">UsableInSimplexAlgorithm</span>.<span class=\"name\">setElem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mat</span> : <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"Sets `mat[i, j]`. ","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.setElem","kind":"def","line":23,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.setElem","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.getElem\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">UsableInSimplexAlgorithm</span>.<span class=\"name\">getElem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mat</span> : <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></div></div>","info":{"doc":"Returns `mat[i, j]`. ","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.getElem","kind":"def","line":21,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.getElem","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.lean#L21-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">UsableInSimplexAlgorithm</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">getElem</span> : <span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">setElem</span> : <span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a> → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">getValues</span> : <span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ofValues</span> : <span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span> → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">swapRows</span> : <span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subtractRow</span> : <span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a> → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">divideRow</span> : <span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a> → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.mk","kind":"ctor","line":19,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.lean#L19-L19"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">UsableInSimplexAlgorithm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Specification for matrix types over ℚ which can be used in the Gauss Elimination and the Simplex\nAlgorithm. It was introduced to unify dense matrices and sparse matrices.\n","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm","kind":"class","line":15,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.lean#L15-L33"}}],"imports":["Init","Mathlib.Init","Std.Data.HashMap.Basic"],"instances":[{"className":"GetElem","name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.instGetElemProdNatRatAndLtFstSndOfUsableInSimplexAlgorithm","typeNames":["Prod","Rat"]},{"className":"Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm","name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.instUsableInSimplexAlgorithmDenseMatrix","typeNames":["Mathlib.Tactic.Linarith.SimplexAlgorithm.DenseMatrix"]},{"className":"Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm","name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.instUsableInSimplexAlgorithmSparseMatrix","typeNames":["Mathlib.Tactic.Linarith.SimplexAlgorithm.SparseMatrix"]}],"name":"Mathlib.Tactic.Linarith.Oracle.SimplexAlgorithm.Datatypes"}