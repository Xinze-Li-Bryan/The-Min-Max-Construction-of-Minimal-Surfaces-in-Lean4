{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.recurse\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">recurse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <a href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Config\">Recurse.Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eval</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM\">AtomM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simp</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tgt</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></div></div>","info":{"doc":"Normalizes an expression, given initial data:\n\n* `s`: a reference to the mutable `AtomM` state, for persisting across calls.\n  This ensures that atom ordering is used consistently.\n* `cfg`: the configuration options\n* `eval`: a normalization operation which will be run recursively, potentially dependent on a known\n  atom ordering\n* `simp`: a cleanup operation which will be used to post-process expressions\n* `tgt`: the expression to normalize\n","docLink":"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.recurse","kind":"def","line":109,"name":"Mathlib.Tactic.AtomM.recurse","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/AtomM/Recurse.lean#L109-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.RecurseM.run.evalAtom\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">RecurseM</span>.<span class=\"name\">run</span>.<span class=\"name\">evalAtom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <a href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Config\">Recurse.Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eval</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM\">AtomM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nctx</span> : <a href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Context\">Recurse.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></div></div>","info":{"doc":"The atom evaluator calls `AtomM.onSubexpressions` recursively. ","docLink":"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.RecurseM.run.evalAtom","kind":"opaque","line":106,"name":"Mathlib.Tactic.AtomM.RecurseM.run.evalAtom","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/AtomM/Recurse.lean#L106-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.RecurseM.run.rctx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">RecurseM</span>.<span class=\"name\">run</span>.<span class=\"name\">rctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <a href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Config\">Recurse.Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eval</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM\">AtomM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nctx</span> : <a href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Context\">Recurse.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.Context\">Context</a></div></div>","info":{"doc":"The recursive context. ","docLink":"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.RecurseM.run.rctx","kind":"opaque","line":104,"name":"Mathlib.Tactic.AtomM.RecurseM.run.rctx","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/AtomM/Recurse.lean#L104-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.RecurseM.run\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">RecurseM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <a href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Config\">Recurse.Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eval</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM\">AtomM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simp</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.RecurseM\">RecurseM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Runs a tactic in the `AtomM.RecurseM` monad, given initial data:\n\n* `s`: a reference to the mutable `AtomM` state, for persisting across calls.\n  This ensures that atom ordering is used consistently.\n* `cfg`: the configuration options\n* `eval`: a normalization operation which will be run recursively, potentially dependent on a known\n  atom ordering\n* `simp`: a cleanup operation which will be used to post-process expressions\n* `x`: the tactic to run\n","docLink":"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.RecurseM.run","kind":"def","line":83,"name":"Mathlib.Tactic.AtomM.RecurseM.run","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/AtomM/Recurse.lean#L83-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.onSubexpressions\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">onSubexpressions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eval</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM\">AtomM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parent</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">root</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.RecurseM\">RecurseM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></div></div>","info":{"doc":"A tactic in the `AtomM.RecurseM` monad which will simplify expression `parent` to a normal form, by\nrunning a core operation `eval` (in the `AtomM` monad) on the maximal subexpression(s) on which\n`eval` does not fail.\n\nThere is also a subsequent clean-up operation, governed by the context from the `AtomM.RecurseM`\nmonad.\n\n* `root`: true if this is a direct call to the function.\n  `AtomM.RecurseM.run` sets this to `false` in recursive mode.\n","docLink":"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.onSubexpressions","kind":"def","line":58,"name":"Mathlib.Tactic.AtomM.onSubexpressions","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/AtomM/Recurse.lean#L58-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.RecurseM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">RecurseM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The monad for `AtomM.Recurse` contains, in addition to the `AtomM` state,\na simp context for the main traversal and a cleanup function to simplify evaluation results. ","docLink":"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.RecurseM","kind":"def","line":54,"name":"Mathlib.Tactic.AtomM.RecurseM","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/AtomM/Recurse.lean#L54-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Context.simp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">Recurse</span>.<span class=\"name\">Context</span>.<span class=\"name\">simp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></span></div></div>","info":{"doc":"A cleanup routine, which simplifies evaluation results to a more human-friendly format. ","docLink":"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Context.simp","kind":"def","line":52,"name":"Mathlib.Tactic.AtomM.Recurse.Context.simp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/AtomM/Recurse.lean#L52-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Context.ctx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">Recurse</span>.<span class=\"name\">Context</span>.<span class=\"name\">ctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a></div></div>","info":{"doc":"A basically empty simp context, passed to the `simp` traversal in `AtomM.onSubexpressions`.\n","docLink":"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Context.ctx","kind":"def","line":50,"name":"Mathlib.Tactic.AtomM.Recurse.Context.ctx","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/AtomM/Recurse.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Context.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">Recurse</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simp</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Context.mk","kind":"ctor","line":47,"name":"Mathlib.Tactic.AtomM.Recurse.Context.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/AtomM/Recurse.lean#L47-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Context\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">Recurse</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The read-only state of the `AtomM.Recurse` monad. ","docLink":"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Context","kind":"structure","line":46,"name":"Mathlib.Tactic.AtomM.Recurse.Context","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/AtomM/Recurse.lean#L46-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.instReprConfig.repr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">Recurse</span>.<span class=\"name\">instReprConfig</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Config\">Config</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.instReprConfig.repr","kind":"def","line":41,"name":"Mathlib.Tactic.AtomM.Recurse.instReprConfig.repr","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/AtomM/Recurse.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.instReprConfig\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">Recurse</span>.<span class=\"name\">instReprConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Config\">Config</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.instReprConfig","kind":"instance","line":41,"name":"Mathlib.Tactic.AtomM.Recurse.instReprConfig","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/AtomM/Recurse.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.instBEqConfig\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">Recurse</span>.<span class=\"name\">instBEqConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Config\">Config</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.instBEqConfig","kind":"instance","line":41,"name":"Mathlib.Tactic.AtomM.Recurse.instBEqConfig","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/AtomM/Recurse.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.instBEqConfig.beq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">Recurse</span>.<span class=\"name\">instBEqConfig</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Config\">Config</a> → <a href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Config\">Config</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.instBEqConfig.beq","kind":"def","line":41,"name":"Mathlib.Tactic.AtomM.Recurse.instBEqConfig.beq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/AtomM/Recurse.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.instInhabitedConfig.default\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">Recurse</span>.<span class=\"name\">instInhabitedConfig</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.instInhabitedConfig.default","kind":"def","line":41,"name":"Mathlib.Tactic.AtomM.Recurse.instInhabitedConfig.default","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/AtomM/Recurse.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.instInhabitedConfig\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">Recurse</span>.<span class=\"name\">instInhabitedConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Config\">Config</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.instInhabitedConfig","kind":"instance","line":41,"name":"Mathlib.Tactic.AtomM.Recurse.instInhabitedConfig","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/AtomM/Recurse.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Config.zetaDelta\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">Recurse</span>.<span class=\"name\">Config</span>.<span class=\"name\">zetaDelta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"if true, local let variables can be unfolded ","docLink":"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Config.zetaDelta","kind":"def","line":40,"name":"Mathlib.Tactic.AtomM.Recurse.Config.zetaDelta","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/AtomM/Recurse.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Config.red\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">Recurse</span>.<span class=\"name\">Config</span>.<span class=\"name\">red</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a></div></div>","info":{"doc":"the reducibility setting to use when comparing atoms for defeq ","docLink":"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Config.red","kind":"def","line":38,"name":"Mathlib.Tactic.AtomM.Recurse.Config.red","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/AtomM/Recurse.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Config.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">Recurse</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">red</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zetaDelta</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Config.mk","kind":"ctor","line":36,"name":"Mathlib.Tactic.AtomM.Recurse.Config.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/AtomM/Recurse.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Config\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">Recurse</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Configuration for `AtomM.Recurse`. ","docLink":"./Mathlib/Util/AtomM/Recurse.html#Mathlib.Tactic.AtomM.Recurse.Config","kind":"structure","line":35,"name":"Mathlib.Tactic.AtomM.Recurse.Config","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/AtomM/Recurse.lean#L35-L41"}}],"imports":["Init","Mathlib.Util.AtomM"],"instances":[{"className":"Inhabited","name":"Mathlib.Tactic.AtomM.Recurse.instInhabitedConfig","typeNames":["Mathlib.Tactic.AtomM.Recurse.Config"]},{"className":"BEq","name":"Mathlib.Tactic.AtomM.Recurse.instBEqConfig","typeNames":["Mathlib.Tactic.AtomM.Recurse.Config"]},{"className":"Repr","name":"Mathlib.Tactic.AtomM.Recurse.instReprConfig","typeNames":["Mathlib.Tactic.AtomM.Recurse.Config"]}],"name":"Mathlib.Util.AtomM.Recurse"}