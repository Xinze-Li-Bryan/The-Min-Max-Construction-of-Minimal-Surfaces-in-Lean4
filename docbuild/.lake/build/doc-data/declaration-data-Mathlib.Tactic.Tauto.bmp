{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.tauto\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">tauto</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`tauto` breaks down assumptions of the form `_ ∧ _`, `_ ∨ _`, `_ ↔ _` and `∃ _, _`\nand splits a goal of the form `_ ∧ _`, `_ ↔ _` or `∃ _, _` until it can be discharged\nusing `reflexivity` or `solve_by_elim`.\nThis is a finishing tactic: it either closes the goal or raises an error.\n\nThe Lean 3 version of this tactic by default attempted to avoid classical reasoning\nwhere possible. This Lean 4 version makes no such attempt. The `itauto` tactic\nis designed for that purpose.\n","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.tauto","kind":"def","line":207,"name":"Mathlib.Tactic.Tauto.tauto","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Tauto.lean#L207-L217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.tautology\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">tautology</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Implementation of the `tauto` tactic. ","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.tautology","kind":"def","line":198,"name":"Mathlib.Tactic.Tauto.tautology","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Tauto.lean#L198-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.finishingConstructorMatcher\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">finishingConstructorMatcher</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Matches propositions where we want to apply the `constructor` tactic in the\nfinishing stage of `tauto`. ","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.finishingConstructorMatcher","kind":"def","line":188,"name":"Mathlib.Tactic.Tauto.finishingConstructorMatcher","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Tauto.lean#L188-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.tautoCore\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">tautoCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"The core loop of the `tauto` tactic. Repeatedly tries to break down propositions\nuntil no more progress can be made. Tries `assumption` and `contradiction` at every\nstep, to discharge goals as soon as possible. Does not do anything that requires\nbacktracking.\n\nTODO: The Lean 3 version uses more-powerful versions of `contradiction` and `assumption`\nthat additionally apply `symm` and use a fancy union-find data structure to avoid\nduplicated work.\n","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.tautoCore","kind":"def","line":160,"name":"Mathlib.Tactic.Tauto.tautoCore","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Tauto.lean#L160-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.casesMatcher\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">casesMatcher</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Matches propositions where we want to apply the `cases` tactic\nin the core loop of `tauto`. ","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.casesMatcher","kind":"def","line":147,"name":"Mathlib.Tactic.Tauto.casesMatcher","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Tauto.lean#L147-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.coreConstructorMatcher\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">coreConstructorMatcher</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Matches propositions where we want to apply the `constructor` tactic\nin the core loop of `tauto`. ","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.coreConstructorMatcher","kind":"def","line":138,"name":"Mathlib.Tactic.Tauto.coreConstructorMatcher","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Tauto.lean#L138-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.elabConfig\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">elabConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.Config\">Config</a></span></span></div></div>","info":{"doc":"Function elaborating `Config`. ","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.elabConfig","kind":"def","line":135,"name":"Mathlib.Tactic.Tauto.elabConfig","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Tauto.lean#L135-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.Config.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.Config.mk","kind":"ctor","line":133,"name":"Mathlib.Tactic.Tauto.Config.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Tauto.lean#L133-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.Config\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Config for the `tauto` tactic. Currently empty. TODO: add `closer` option. ","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.Config","kind":"structure","line":132,"name":"Mathlib.Tactic.Tauto.Config","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Tauto.lean#L132-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.distribNot\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">distribNot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Tries to apply de-Morgan-like rules on all hypotheses.\nAlways succeeds, regardless of whether any progress was actually made.\n","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.distribNot","kind":"def","line":121,"name":"Mathlib.Tactic.Tauto.distribNot","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Tauto.lean#L121-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.distribNotAux\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">distribNotAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>","info":{"doc":"For each fvar in `fvars`, calls `distribNotAt` and carries along the resulting\nrenamings.\n","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.distribNotAux","kind":"opaque","line":110,"name":"Mathlib.Tactic.Tauto.distribNotAux","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Tauto.lean#L110-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.distribNotAt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">distribNotAt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nIters</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state</span> : <a href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState\">DistribNotState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState\">DistribNotState</a></span></div></div>","info":{"doc":"Calls `distribNotAt` on the head of `state.fvars` up to `nIters` times, returning\nearly on failure.\n","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.distribNotAt","kind":"opaque","line":96,"name":"Mathlib.Tactic.Tauto.distribNotAt","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Tauto.lean#L96-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState.currentGoal\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">DistribNotState</span>.<span class=\"name\">currentGoal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState\">DistribNotState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></div></div>","info":{"doc":"The current goal. ","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState.currentGoal","kind":"def","line":94,"name":"Mathlib.Tactic.Tauto.DistribNotState.currentGoal","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Tauto.lean#L94-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState.fvars\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">DistribNotState</span>.<span class=\"name\">fvars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState\">DistribNotState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"The list of hypothesis left to work on, renamed to be up-to-date with\nthe current goal. ","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState.fvars","kind":"def","line":91,"name":"Mathlib.Tactic.Tauto.DistribNotState.fvars","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Tauto.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">DistribNotState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currentGoal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState\">DistribNotState</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState.mk","kind":"ctor","line":88,"name":"Mathlib.Tactic.Tauto.DistribNotState.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Tauto.lean#L88-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">DistribNotState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"State of the `distribNotAt` function. We need to carry around the list of\nremaining hypothesis as fvars so that we can incrementally apply the\n`AssertAfterResult.subst` from each step to each of them. Otherwise,\nthey could end up referring to old hypotheses.\n","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState","kind":"structure","line":82,"name":"Mathlib.Tactic.Tauto.DistribNotState","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Tauto.lean#L82-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.distribNotOnceAt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">distribNotOnceAt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hypFVar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Assert.html#Lean.Meta.AssertAfterResult\">Lean.Meta.AssertAfterResult</a></span></div></div>","info":{"doc":"Tries to apply de-Morgan-like rules on a hypothesis. ","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.distribNotOnceAt","kind":"def","line":23,"name":"Mathlib.Tactic.Tauto.distribNotOnceAt","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Tauto.lean#L23-L80"}}],"imports":["Init","Mathlib.Tactic.CasesM","Mathlib.Tactic.Core","Mathlib.Lean.Elab.Tactic.Basic","Mathlib.Logic.Basic","Qq"],"instances":[],"name":"Mathlib.Tactic.Tauto"}