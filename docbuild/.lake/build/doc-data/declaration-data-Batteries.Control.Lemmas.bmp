{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Control/Lemmas.html#StateT.run_tryCatchThe\"><span class=\"name\">StateT</span>.<span class=\"name\">run_tryCatchThe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">handler</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#tryCatchThe\">tryCatchThe</a> <span class=\"fn\">ε</span> <span class=\"fn\">body</span> <span class=\"fn\">handler</span>)</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#tryCatchThe\">tryCatchThe</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">body</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">handler</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Control/Lemmas.html#StateT.run_tryCatchThe","kind":"theorem","line":54,"name":"StateT.run_tryCatchThe","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Control/Lemmas.lean#L54-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Control/Lemmas.html#StateT.run_tryCatch\"><span class=\"name\">StateT</span>.<span class=\"name\">run_tryCatch</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">handler</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadExcept.tryCatch\">tryCatch</a> <span class=\"fn\">body</span> <span class=\"fn\">handler</span>)</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept.tryCatch\">tryCatch</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">body</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">handler</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Control/Lemmas.html#StateT.run_tryCatch","kind":"theorem","line":50,"name":"StateT.run_tryCatch","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Control/Lemmas.lean#L50-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Control/Lemmas.html#StateT.run_throwThe\"><span class=\"name\">StateT</span>.<span class=\"name\">run_throwThe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#throwThe\">throwThe</a> <span class=\"fn\">ε</span> <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">do\n  let <span class=\"fn\">a</span> ← <span class=\"fn\"><a href=\"./Init/Prelude.html#throwThe\">throwThe</a> <span class=\"fn\">ε</span> <span class=\"fn\">e</span></span>\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">s</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Control/Lemmas.html#StateT.run_throwThe","kind":"theorem","line":47,"name":"StateT.run_throwThe","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Control/Lemmas.lean#L47-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Control/Lemmas.html#StateT.run_throw\"><span class=\"name\">StateT</span>.<span class=\"name\">run_throw</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadExcept.throw\">throw</a> <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">do\n  let <span class=\"fn\">a</span> ← <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept.throw\">throw</a> <span class=\"fn\">e</span></span>\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">s</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Control/Lemmas.html#StateT.run_throw","kind":"theorem","line":44,"name":"StateT.run_throw","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Control/Lemmas.lean#L44-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Control/Lemmas.html#StateT.run_orElse\"><span class=\"name\">StateT</span>.<span class=\"name\">run_orElse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#Alternative\">Alternative</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> &lt;|&gt; <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span></span> &lt;|&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span></span>)</span></div></div>","info":{"doc":"","docLink":"./Batteries/Control/Lemmas.html#StateT.run_orElse","kind":"theorem","line":41,"name":"StateT.run_orElse","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Control/Lemmas.lean#L41-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Control/Lemmas.html#StateT.run_failure\"><span class=\"name\">StateT</span>.<span class=\"name\">run_failure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#Alternative\">Alternative</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Control/Basic.html#Alternative.failure\">failure</a>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Control/Basic.html#Alternative.failure\">failure</a></div></div>","info":{"doc":"","docLink":"./Batteries/Control/Lemmas.html#StateT.run_failure","kind":"theorem","line":38,"name":"StateT.run_failure","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Control/Lemmas.lean#L38-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Control/Lemmas.html#ReaderT.run_tryCatchThe\"><span class=\"name\">ReaderT</span>.<span class=\"name\">run_tryCatchThe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">handler</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#tryCatchThe\">tryCatchThe</a> <span class=\"fn\">ε</span> <span class=\"fn\">body</span> <span class=\"fn\">handler</span>)</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">ctx</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#tryCatchThe\">tryCatchThe</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">body</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">ctx</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">handler</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">ctx</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Control/Lemmas.html#ReaderT.run_tryCatchThe","kind":"theorem","line":27,"name":"ReaderT.run_tryCatchThe","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Control/Lemmas.lean#L27-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Control/Lemmas.html#ReaderT.run_tryCatch\"><span class=\"name\">ReaderT</span>.<span class=\"name\">run_tryCatch</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">handler</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadExcept.tryCatch\">tryCatch</a> <span class=\"fn\">body</span> <span class=\"fn\">handler</span>)</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">ctx</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept.tryCatch\">tryCatch</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">body</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">ctx</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">handler</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">ctx</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Control/Lemmas.html#ReaderT.run_tryCatch","kind":"theorem","line":23,"name":"ReaderT.run_tryCatch","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Control/Lemmas.lean#L23-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Control/Lemmas.html#ReaderT.run_throwThe\"><span class=\"name\">ReaderT</span>.<span class=\"name\">run_throwThe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#throwThe\">throwThe</a> <span class=\"fn\">ε</span> <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">ctx</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#throwThe\">throwThe</a> <span class=\"fn\">ε</span> <span class=\"fn\">e</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Control/Lemmas.html#ReaderT.run_throwThe","kind":"theorem","line":20,"name":"ReaderT.run_throwThe","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Control/Lemmas.lean#L20-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Control/Lemmas.html#ReaderT.run_throw\"><span class=\"name\">ReaderT</span>.<span class=\"name\">run_throw</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadExcept.throw\">throw</a> <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">ctx</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept.throw\">throw</a> <span class=\"fn\">e</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Control/Lemmas.html#ReaderT.run_throw","kind":"theorem","line":17,"name":"ReaderT.run_throw","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Control/Lemmas.lean#L17-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Control/Lemmas.html#ReaderT.run_orElse\"><span class=\"name\">ReaderT</span>.<span class=\"name\">run_orElse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#Alternative\">Alternative</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> &lt;|&gt; <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">ctx</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">ctx</span></span> &lt;|&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">ctx</span></span>)</span></div></div>","info":{"doc":"","docLink":"./Batteries/Control/Lemmas.html#ReaderT.run_orElse","kind":"theorem","line":14,"name":"ReaderT.run_orElse","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Control/Lemmas.lean#L14-L15"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Control/Lemmas.html#ReaderT.run_failure\"><span class=\"name\">ReaderT</span>.<span class=\"name\">run_failure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#Alternative\">Alternative</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Control/Basic.html#Alternative.failure\">failure</a>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">ctx</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Control/Basic.html#Alternative.failure\">failure</a></div></div>","info":{"doc":"","docLink":"./Batteries/Control/Lemmas.html#ReaderT.run_failure","kind":"theorem","line":11,"name":"ReaderT.run_failure","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Control/Lemmas.lean#L11-L12"}}],"imports":["Init"],"instances":[],"name":"Batteries.Control.Lemmas"}