{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.notationClassAttr\"><span class=\"name\">Simps</span>.<span class=\"name\">notationClassAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Lean/NameMapAttribute.html#Lean.NameMapExtension\">Lean.NameMapExtension</a> <a href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.AutomaticProjectionData\">AutomaticProjectionData</a></span></div></div>","info":{"doc":"`@[notation_class]` attribute. Note: this is *not* a `NameMapAttribute` because we key on the\nargument of the attribute, not the declaration name. ","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.notationClassAttr","kind":"opaque","line":102,"name":"Simps.notationClassAttr","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Simps/NotationClass.lean#L102-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.instInhabitedAutomaticProjectionData\"><span class=\"name\">Simps</span>.<span class=\"name\">instInhabitedAutomaticProjectionData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.AutomaticProjectionData\">AutomaticProjectionData</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.instInhabitedAutomaticProjectionData","kind":"instance","line":100,"name":"Simps.instInhabitedAutomaticProjectionData","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Simps/NotationClass.lean#L100-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.instInhabitedAutomaticProjectionData.default\"><span class=\"name\">Simps</span>.<span class=\"name\">instInhabitedAutomaticProjectionData</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.AutomaticProjectionData\">AutomaticProjectionData</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.instInhabitedAutomaticProjectionData.default","kind":"def","line":100,"name":"Simps.instInhabitedAutomaticProjectionData.default","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Simps/NotationClass.lean#L100-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.AutomaticProjectionData.findArgs\"><span class=\"name\">Simps</span>.<span class=\"name\">AutomaticProjectionData</span>.<span class=\"name\">findArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.AutomaticProjectionData\">AutomaticProjectionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>","info":{"doc":"The method to find the arguments of the class. ","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.AutomaticProjectionData.findArgs","kind":"def","line":99,"name":"Simps.AutomaticProjectionData.findArgs","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Simps/NotationClass.lean#L99-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.AutomaticProjectionData.isNotation\"><span class=\"name\">Simps</span>.<span class=\"name\">AutomaticProjectionData</span>.<span class=\"name\">isNotation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.AutomaticProjectionData\">AutomaticProjectionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"`isNotation` is a Boolean that specifies whether this is notation\n(false for the coercions `DFunLike` and `SetLike`). If this is set to true, we add the current\nclass as hypothesis during type-class synthesis. ","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.AutomaticProjectionData.isNotation","kind":"def","line":97,"name":"Simps.AutomaticProjectionData.isNotation","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Simps/NotationClass.lean#L97-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.AutomaticProjectionData.className\"><span class=\"name\">Simps</span>.<span class=\"name\">AutomaticProjectionData</span>.<span class=\"name\">className</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.AutomaticProjectionData\">AutomaticProjectionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>","info":{"doc":"`className` is the name of the class we are looking for. ","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.AutomaticProjectionData.className","kind":"def","line":93,"name":"Simps.AutomaticProjectionData.className","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Simps/NotationClass.lean#L93-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.AutomaticProjectionData.mk\"><span class=\"name\">Simps</span>.<span class=\"name\">AutomaticProjectionData</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">className</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isNotation</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">findArgs</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.AutomaticProjectionData\">AutomaticProjectionData</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.AutomaticProjectionData.mk","kind":"ctor","line":91,"name":"Simps.AutomaticProjectionData.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Simps/NotationClass.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.AutomaticProjectionData\"><span class=\"name\">Simps</span>.<span class=\"name\">AutomaticProjectionData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Data needed to generate automatic projections. This data is associated to a name of a projection\nin a structure that must be used to trigger the search. ","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.AutomaticProjectionData","kind":"structure","line":89,"name":"Simps.AutomaticProjectionData","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Simps/NotationClass.lean#L89-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.findCoercionArgs\"><span class=\"name\">Simps</span>.<span class=\"name\">findCoercionArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.findArgType\">findArgType</a></div></div>","info":{"doc":"Find arguments of a coercion class (`DFunLike` or `SetLike`) ","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.findCoercionArgs","kind":"def","line":81,"name":"Simps.findCoercionArgs","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Simps/NotationClass.lean#L81-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.findOneArgs\"><span class=\"name\">Simps</span>.<span class=\"name\">findOneArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.findArgType\">findArgType</a></div></div>","info":{"doc":"Find arguments for the `One` class. ","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.findOneArgs","kind":"def","line":77,"name":"Simps.findOneArgs","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Simps/NotationClass.lean#L77-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.findZeroArgs\"><span class=\"name\">Simps</span>.<span class=\"name\">findZeroArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.findArgType\">findArgType</a></div></div>","info":{"doc":"Find arguments for the `Zero` class. ","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.findZeroArgs","kind":"def","line":73,"name":"Simps.findZeroArgs","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Simps/NotationClass.lean#L73-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.zsmulArgs\"><span class=\"name\">Simps</span>.<span class=\"name\">zsmulArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.findArgType\">findArgType</a></div></div>","info":{"doc":"Find arguments by prepending `ℤ` and duplicating the first argument. Used for `zsmul`. ","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.zsmulArgs","kind":"def","line":69,"name":"Simps.zsmulArgs","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Simps/NotationClass.lean#L69-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.nsmulArgs\"><span class=\"name\">Simps</span>.<span class=\"name\">nsmulArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.findArgType\">findArgType</a></div></div>","info":{"doc":"Find arguments by prepending `ℕ` and duplicating the first argument. Used for `nsmul`. ","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.nsmulArgs","kind":"def","line":65,"name":"Simps.nsmulArgs","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Simps/NotationClass.lean#L65-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.copySecond\"><span class=\"name\">Simps</span>.<span class=\"name\">copySecond</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.findArgType\">findArgType</a></div></div>","info":{"doc":"Find arguments by duplicating the first argument. Used for `smul`. ","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.copySecond","kind":"def","line":62,"name":"Simps.copySecond","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Simps/NotationClass.lean#L62-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.copyFirst\"><span class=\"name\">Simps</span>.<span class=\"name\">copyFirst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.findArgType\">findArgType</a></div></div>","info":{"doc":"Find arguments by duplicating the first argument. Used for `pow`. ","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.copyFirst","kind":"def","line":59,"name":"Simps.copyFirst","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Simps/NotationClass.lean#L59-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.defaultfindArgs\"><span class=\"name\">Simps</span>.<span class=\"name\">defaultfindArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.findArgType\">findArgType</a></div></div>","info":{"doc":"Find arguments for a notation class ","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.defaultfindArgs","kind":"def","line":47,"name":"Simps.defaultfindArgs","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Simps/NotationClass.lean#L47-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Simps/NotationClass.html#Simps.findArgType\"><span class=\"name\">Simps</span>.<span class=\"name\">findArgType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The type of methods to find arguments for automatic projections for `simps`.\nWe partly define this as a separate definition so that the unused arguments linter doesn't complain.\n","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#Simps.findArgType","kind":"def","line":42,"name":"Simps.findArgType","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Simps/NotationClass.lean#L42-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Simps/NotationClass.html#notation_class\"><span class=\"name\">notation_class</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"The `@[notation_class]` attribute specifies that this is a notation class,\nand this notation should be used instead of projections by `@[simps]`.\n  * This is only important if the projection is written differently using notation, e.g.\n    `+` uses `HAdd.hAdd`, not `Add.add` and `0` uses `OfNat.ofNat` not `Zero.zero`.\n    We also add it to non-heterogeneous notation classes, like `Neg`, but it doesn't do much for any\n    class that extends `Neg`.\n  * `@[notation_class* <projName> Simps.findCoercionArgs]` is used to configure the\n    `SetLike` and `DFunLike` coercions.\n  * The first name argument is the projection name we use as the key to search for this class\n    (default: name of first projection of the class).\n  * The second argument is the name of a declaration that has type\n    `findArgType` which is defined to be `Name → Name → Array Expr → MetaM (Array (Option Expr))`.\n    This declaration specifies how to generate the arguments of the notation class from the\n    arguments of classes that use the projection. ","docLink":"./Mathlib/Tactic/Simps/NotationClass.html#notation_class","kind":"def","line":22,"name":"notation_class","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Simps/NotationClass.lean#L22-L36"}}],"imports":["Init","Mathlib.Init","Lean.Elab.Exception","Batteries.Lean.NameMapAttribute","Batteries.Tactic.Lint"],"instances":[{"className":"Inhabited","name":"Simps.instInhabitedAutomaticProjectionData","typeNames":["Simps.AutomaticProjectionData"]}],"name":"Mathlib.Tactic.Simps.NotationClass"}