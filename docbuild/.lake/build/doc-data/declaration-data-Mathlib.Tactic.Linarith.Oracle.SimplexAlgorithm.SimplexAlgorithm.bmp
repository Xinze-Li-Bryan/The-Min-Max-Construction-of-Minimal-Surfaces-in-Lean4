{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.runSimplexAlgorithm\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">runSimplexAlgorithm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">matType</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">matType</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.SimplexAlgorithmM\">SimplexAlgorithmM</a> <span class=\"fn\">matType</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Runs the Simplex Algorithm inside the `SimplexAlgorithmM`. It always terminates, finding solution if\nsuch exists.\n","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.runSimplexAlgorithm","kind":"def","line":113,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.runSimplexAlgorithm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.lean#L113-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.choosePivots\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">choosePivots</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">matType</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">matType</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.SimplexAlgorithmM\">SimplexAlgorithmM</a> <span class=\"fn\">matType</span> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>","info":{"doc":"Chooses entering and exiting variables using\n(Bland's rule)[(https://en.wikipedia.org/wiki/Bland%27s_rule)] that guarantees that the Simplex\nAlgorithm terminates.\n","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.choosePivots","kind":"def","line":103,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.choosePivots","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.lean#L103-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.chooseExitingVar\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">chooseExitingVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">matType</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">matType</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">enterIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.SimplexAlgorithmM\">SimplexAlgorithmM</a> <span class=\"fn\">matType</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Chooses an exiting variable: the variable imposing the strictest limit on the increase of the\nentering variable, breaking ties by choosing the variable with smallest index.\n","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.chooseExitingVar","kind":"def","line":83,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.chooseExitingVar","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.lean#L83-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.chooseEnteringVar\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">chooseEnteringVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">matType</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">matType</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.SimplexAlgorithmM\">SimplexAlgorithmM</a> <span class=\"fn\">matType</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Chooses an entering variable: among the variables with a positive coefficient in the objective\nfunction, the one with the smallest index (in the initial indexing).\n","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.chooseEnteringVar","kind":"def","line":65,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.chooseEnteringVar","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.lean#L65-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.checkSuccess\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">checkSuccess</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">matType</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">matType</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.SimplexAlgorithmM\">SimplexAlgorithmM</a> <span class=\"fn\">matType</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Check if the solution is found: the objective function is positive and all basic variables are\nnonnegative.\n","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.checkSuccess","kind":"def","line":56,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.checkSuccess","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.lean#L56-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.doPivotOperation\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">doPivotOperation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">matType</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">matType</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exitIdx </span><span class=\"fn\">enterIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.SimplexAlgorithmM\">SimplexAlgorithmM</a> <span class=\"fn\">matType</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Given indexes `exitIdx` and `enterIdx` of exiting and entering variables in the `basic` and `free`\narrays, performs pivot operation, i.e. expresses one through the other and makes the free one basic\nand vice versa.\n","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.doPivotOperation","kind":"def","line":28,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.doPivotOperation","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.lean#L28-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.SimplexAlgorithmM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">SimplexAlgorithmM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matType</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/Datatypes.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.UsableInSimplexAlgorithm\">UsableInSimplexAlgorithm</a> <span class=\"fn\">matType</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The monad for the Simplex Algorithm. ","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.SimplexAlgorithmM","kind":"def","line":22,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.SimplexAlgorithmM","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.lean#L22-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.SimplexAlgorithmException.infeasible\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">SimplexAlgorithmException</span>.<span class=\"name\">infeasible</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.SimplexAlgorithmException\">SimplexAlgorithmException</a></div></div>","info":{"doc":"The solution is infeasible. ","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.SimplexAlgorithmException.infeasible","kind":"ctor","line":19,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.SimplexAlgorithmException.infeasible","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.lean#L19-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.SimplexAlgorithmException\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">SimplexAlgorithm</span>.<span class=\"name\">SimplexAlgorithmException</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"An exception in the `SimplexAlgorithmM` monad. ","docLink":"./Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.html#Mathlib.Tactic.Linarith.SimplexAlgorithm.SimplexAlgorithmException","kind":"inductive","line":17,"name":"Mathlib.Tactic.Linarith.SimplexAlgorithm.SimplexAlgorithmException","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linarith/Oracle/SimplexAlgorithm/SimplexAlgorithm.lean#L17-L20"}}],"imports":["Init","Mathlib.Tactic.Linarith.Oracle.SimplexAlgorithm.Datatypes"],"instances":[],"name":"Mathlib.Tactic.Linarith.Oracle.SimplexAlgorithm.SimplexAlgorithm"}