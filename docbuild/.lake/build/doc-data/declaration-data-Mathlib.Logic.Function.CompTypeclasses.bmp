{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.comp_apply\"><span class=\"name\">CompTriple</span>.<span class=\"name\">comp_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\">N</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ψ</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">χ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple\">CompTriple</a> <span class=\"fn\">φ</span> <span class=\"fn\">ψ</span> <span class=\"fn\">χ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">ψ</span> <span class=\"fn\">(<span class=\"fn\">φ</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">χ</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.comp_apply","kind":"theorem","line":61,"name":"CompTriple.comp_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Logic/Function/CompTypeclasses.lean#L61-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.comp_inv\"><span class=\"name\">CompTriple</span>.<span class=\"name\">comp_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\">N</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ψ</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/Function.html#Function.RightInverse\">Function.RightInverse</a> <span class=\"fn\">φ</span> <span class=\"fn\">ψ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">χ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.IsId\">IsId</a> <span class=\"fn\">χ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple\">CompTriple</a> <span class=\"fn\">φ</span> <span class=\"fn\">ψ</span> <span class=\"fn\">χ</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.comp_inv","kind":"theorem","line":56,"name":"CompTriple.comp_inv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Logic/Function/CompTypeclasses.lean#L56-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.comp\"><span class=\"name\">CompTriple</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\">N</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ψ</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple\">CompTriple</a> <span class=\"fn\">φ</span> <span class=\"fn\">ψ</span> (<span class=\"fn\">ψ</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">φ</span>)</span></div></div>","info":{"doc":"`φ`, `ψ` and `ψ ∘ φ` for` a `CompTriple` ","docLink":"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.comp","kind":"theorem","line":50,"name":"CompTriple.comp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Logic/Function/CompTypeclasses.lean#L50-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.instId_comp\"><span class=\"name\">CompTriple</span>.<span class=\"name\">instId_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\">N</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ψ</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.IsId\">IsId</a> <span class=\"fn\">ψ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple\">CompTriple</a> <span class=\"fn\">φ</span> <span class=\"fn\">ψ</span> <span class=\"fn\">φ</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.instId_comp","kind":"instance","line":46,"name":"CompTriple.instId_comp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Logic/Function/CompTypeclasses.lean#L46-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.instComp_id\"><span class=\"name\">CompTriple</span>.<span class=\"name\">instComp_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.IsId\">IsId</a> <span class=\"fn\">φ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ψ</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple\">CompTriple</a> <span class=\"fn\">φ</span> <span class=\"fn\">ψ</span> <span class=\"fn\">ψ</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.instComp_id","kind":"instance","line":42,"name":"CompTriple.instComp_id","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Logic/Function/CompTypeclasses.lean#L42-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.instIsIdId\"><span class=\"name\">CompTriple</span>.<span class=\"name\">instIsIdId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.IsId\">IsId</a> <a href=\"./Init/Prelude.html#id\">id</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.instIsIdId","kind":"instance","line":39,"name":"CompTriple.instIsIdId","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Logic/Function/CompTypeclasses.lean#L39-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.IsId.eq_id\"><span class=\"name\">CompTriple</span>.<span class=\"name\">IsId</span>.<span class=\"name\">eq_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.IsId\">IsId</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#id\">id</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.IsId.eq_id","kind":"theorem","line":37,"name":"CompTriple.IsId.eq_id","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Logic/Function/CompTypeclasses.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.IsId.mk\"><span class=\"name\">CompTriple</span>.<span class=\"name\">IsId</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq_id</span> : <span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#id\">id</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.IsId\">IsId</a> <span class=\"fn\">σ</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.IsId.mk","kind":"ctor","line":36,"name":"CompTriple.IsId.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Logic/Function/CompTypeclasses.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.IsId\"><span class=\"name\">CompTriple</span>.<span class=\"name\">IsId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Class of Id maps ","docLink":"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.IsId","kind":"class","line":35,"name":"CompTriple.IsId","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Logic/Function/CompTypeclasses.lean#L35-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.comp_eq\"><span class=\"name\">CompTriple</span>.<span class=\"name\">comp_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\">N</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ψ</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">χ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<span class=\"fn\">M</span> → <span class=\"fn\">P</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple\">CompTriple</a> <span class=\"fn\">φ</span> <span class=\"fn\">ψ</span> <span class=\"fn\">χ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">ψ</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">χ</span></div></div>","info":{"doc":"The maps form a commuting triangle ","docLink":"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.comp_eq","kind":"theorem","line":29,"name":"CompTriple.comp_eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Logic/Function/CompTypeclasses.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.mk\"><span class=\"name\">CompTriple</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\">N</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ψ</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">χ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<span class=\"fn\">M</span> → <span class=\"fn\">P</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">comp_eq</span> : <span class=\"fn\">ψ</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">χ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple\">CompTriple</a> <span class=\"fn\">φ</span> <span class=\"fn\">ψ</span> <span class=\"fn\">χ</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple.mk","kind":"ctor","line":27,"name":"CompTriple.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Logic/Function/CompTypeclasses.lean#L27-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple\"><span class=\"name\">CompTriple</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ψ</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">χ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<span class=\"fn\">M</span> → <span class=\"fn\">P</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Class of composing triples ","docLink":"./Mathlib/Logic/Function/CompTypeclasses.html#CompTriple","kind":"class","line":26,"name":"CompTriple","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Logic/Function/CompTypeclasses.lean#L26-L29"}}],"imports":["Init","Mathlib.Tactic.TypeStar","Mathlib.Tactic.Lemma"],"instances":[{"className":"CompTriple.IsId","name":"CompTriple.instIsIdId","typeNames":["id"]},{"className":"CompTriple","name":"CompTriple.instComp_id","typeNames":[]},{"className":"CompTriple","name":"CompTriple.instId_comp","typeNames":[]}],"name":"Mathlib.Logic.Function.CompTypeclasses"}