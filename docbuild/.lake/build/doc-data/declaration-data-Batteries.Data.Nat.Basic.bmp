{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Basic.html#Nat.ofBits\"><span class=\"name\">Nat</span>.<span class=\"name\">ofBits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Construct a natural number from a sequence of bits using little endian convention.\n","docLink":"./Batteries/Data/Nat/Basic.html#Nat.ofBits","kind":"def","line":110,"name":"Nat.ofBits","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Data/Nat/Basic.lean#L110-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Basic.html#Nat.sqrt.iter\"><span class=\"name\">Nat</span>.<span class=\"name\">sqrt</span>.<span class=\"name\">iter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">guess</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Auxiliary for `sqrt`. If `guess` is greater than the integer square root of `n`,\nreturns the integer square root of `n`.\n\nBy default this well-founded recursion would be irreducible.\nThis prevents use `decide` to resolve `Nat.sqrt n` for small values of `n`,\nso we mark this as `@[semireducible]`. ","docLink":"./Batteries/Data/Nat/Basic.html#Nat.sqrt.iter","kind":"def","line":102,"name":"Nat.sqrt.iter","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Data/Nat/Basic.lean#L102-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Basic.html#Nat.sqrt\"><span class=\"name\">Nat</span>.<span class=\"name\">sqrt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Integer square root function. Implemented via Newton's method.\n","docLink":"./Batteries/Data/Nat/Basic.html#Nat.sqrt","kind":"def","line":89,"name":"Nat.sqrt","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Data/Nat/Basic.lean#L89-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Basic.html#Nat.casesDiagOn\"><span class=\"name\">Nat</span>.<span class=\"name\">casesDiagOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">motive</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zero_zero</span> : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zero_succ</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">succ_zero</span> : <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">succ_succ</span> : <span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"Diagonal recursor for `Nat`\n","docLink":"./Batteries/Data/Nat/Basic.html#Nat.casesDiagOn","kind":"def","line":76,"name":"Nat.casesDiagOn","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Data/Nat/Basic.lean#L76-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Basic.html#Nat.recDiagOn\"><span class=\"name\">Nat</span>.<span class=\"name\">recDiagOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">motive</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zero_zero</span> : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zero_succ</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">succ_zero</span> : <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">succ_succ</span> : <span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"Diagonal recursor for `Nat`\n","docLink":"./Batteries/Data/Nat/Basic.html#Nat.recDiagOn","kind":"def","line":65,"name":"Nat.recDiagOn","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Data/Nat/Basic.lean#L65-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Basic.html#Nat.recDiag.right\"><span class=\"name\">Nat</span>.<span class=\"name\">recDiag</span>.<span class=\"name\">right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">motive</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zero_zero</span> : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">succ_zero</span> : <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"Right leg for `Nat.recDiag` ","docLink":"./Batteries/Data/Nat/Basic.html#Nat.recDiag.right","kind":"def","line":61,"name":"Nat.recDiag.right","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Data/Nat/Basic.lean#L61-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Basic.html#Nat.recDiag.left\"><span class=\"name\">Nat</span>.<span class=\"name\">recDiag</span>.<span class=\"name\">left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">motive</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zero_zero</span> : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zero_succ</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"Left leg for `Nat.recDiag` ","docLink":"./Batteries/Data/Nat/Basic.html#Nat.recDiag.left","kind":"def","line":57,"name":"Nat.recDiag.left","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Data/Nat/Basic.lean#L57-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Basic.html#Nat.recDiag\"><span class=\"name\">Nat</span>.<span class=\"name\">recDiag</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">motive</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zero_zero</span> : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zero_succ</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">succ_zero</span> : <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">0</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">succ_succ</span> : <span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"Diagonal recursor for `Nat`\n","docLink":"./Batteries/Data/Nat/Basic.html#Nat.recDiag","kind":"def","line":45,"name":"Nat.recDiag","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Data/Nat/Basic.lean#L45-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Basic.html#Nat.recDiagAux\"><span class=\"name\">Nat</span>.<span class=\"name\">recDiagAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">motive</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zero_left</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zero_right</span> : <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">succ_succ</span> : <span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"Simple diagonal recursor for `Nat`\n","docLink":"./Batteries/Data/Nat/Basic.html#Nat.recDiagAux","kind":"def","line":32,"name":"Nat.recDiagAux","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Data/Nat/Basic.lean#L32-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Basic.html#Nat.strongRecMeasure\"><span class=\"name\">Nat</span>.<span class=\"name\">strongRecMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">motive</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ind</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">((<span class=\"fn\">y</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">y</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"Strong recursor via a `Nat`-valued measure\n","docLink":"./Batteries/Data/Nat/Basic.html#Nat.strongRecMeasure","kind":"def","line":23,"name":"Nat.strongRecMeasure","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Data/Nat/Basic.lean#L23-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Basic.html#Nat.strongRec\"><span class=\"name\">Nat</span>.<span class=\"name\">strongRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">motive</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ind</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">((<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">n</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"Strong recursor for `Nat`\n","docLink":"./Batteries/Data/Nat/Basic.html#Nat.strongRec","kind":"def","line":16,"name":"Nat.strongRec","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Data/Nat/Basic.lean#L16-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Nat/Basic.html#Nat.recAuxOn\"><span class=\"name\">Nat</span>.<span class=\"name\">recAuxOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">motive</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zero</span> : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">succ</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"Recursor identical to `Nat.recOn` but uses notations `0` for `Nat.zero` and `·+1` for `Nat.succ`\n","docLink":"./Batteries/Data/Nat/Basic.html#Nat.recAuxOn","kind":"def","line":9,"name":"Nat.recAuxOn","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Data/Nat/Basic.lean#L9-L14"}}],"imports":["Init"],"instances":[],"name":"Batteries.Data.Nat.Basic"}