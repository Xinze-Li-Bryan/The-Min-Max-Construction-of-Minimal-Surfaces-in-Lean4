{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./ProofWidgets/Util.html#Lean.PrettyPrinter.Delaborator.withAnnotateTermLikeInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">withAnnotateTermLikeInfo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">n</span>)</span></span></div></div>","info":{"doc":"A copy of `Delaborator.withAnnotateTermInfo` for other syntactic categories. ","docLink":"./ProofWidgets/Util.html#Lean.PrettyPrinter.Delaborator.withAnnotateTermLikeInfo","kind":"def","line":65,"name":"Lean.PrettyPrinter.Delaborator.withAnnotateTermLikeInfo","sourceLink":"https://github.com/leanprover-community/ProofWidgets4/blob/556caed0eadb7901e068131d1be208dd907d07a2/ProofWidgets/Util.lean#L65-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./ProofWidgets/Util.html#Lean.PrettyPrinter.Delaborator.annotateTermLikeInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">annotateTermLikeInfo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">n</span>)</span></span></div></div>","info":{"doc":"A copy of `Delaborator.annotateTermInfo` for other syntactic categories. ","docLink":"./ProofWidgets/Util.html#Lean.PrettyPrinter.Delaborator.annotateTermLikeInfo","kind":"def","line":59,"name":"Lean.PrettyPrinter.Delaborator.annotateTermLikeInfo","sourceLink":"https://github.com/leanprover-community/ProofWidgets4/blob/556caed0eadb7901e068131d1be208dd907d07a2/ProofWidgets/Util.lean#L59-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./ProofWidgets/Util.html#Lean.PrettyPrinter.Delaborator.delabArrayLiteral\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabArrayLiteral</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elem</span> : <span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Delaborate the elements of an array literal separately, calling `elem` on each. ","docLink":"./ProofWidgets/Util.html#Lean.PrettyPrinter.Delaborator.delabArrayLiteral","kind":"def","line":53,"name":"Lean.PrettyPrinter.Delaborator.delabArrayLiteral","sourceLink":"https://github.com/leanprover-community/ProofWidgets4/blob/556caed0eadb7901e068131d1be208dd907d07a2/ProofWidgets/Util.lean#L53-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./ProofWidgets/Util.html#Lean.PrettyPrinter.Delaborator.delabListLiteral.go\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabListLiteral</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elem</span> : <span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./ProofWidgets/Util.html#Lean.PrettyPrinter.Delaborator.delabListLiteral.go","kind":"opaque","line":45,"name":"Lean.PrettyPrinter.Delaborator.delabListLiteral.go","sourceLink":"https://github.com/leanprover-community/ProofWidgets4/blob/556caed0eadb7901e068131d1be208dd907d07a2/ProofWidgets/Util.lean#L45-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./ProofWidgets/Util.html#Lean.PrettyPrinter.Delaborator.delabListLiteral\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabListLiteral</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elem</span> : <span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Delaborate the elements of a list literal separately, calling `elem` on each. ","docLink":"./ProofWidgets/Util.html#Lean.PrettyPrinter.Delaborator.delabListLiteral","kind":"def","line":41,"name":"Lean.PrettyPrinter.Delaborator.delabListLiteral","sourceLink":"https://github.com/leanprover-community/ProofWidgets4/blob/556caed0eadb7901e068131d1be208dd907d07a2/ProofWidgets/Util.lean#L41-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./ProofWidgets/Util.html#ProofWidgets.Util.foldInlsM\"><span class=\"name\">ProofWidgets</span>.<span class=\"name\">Util</span>.<span class=\"name\">foldInlsM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arr</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"Collapse adjacent `inl (_ : α)`s into a `β` using `f`.\nFor example, `#[.inl a₁, .inl a₂, .inr b, .inl a₃] ↦ #[← f #[a₁, a₂], b, ← f #[a₃]]`. ","docLink":"./ProofWidgets/Util.html#ProofWidgets.Util.foldInlsM","kind":"def","line":18,"name":"ProofWidgets.Util.foldInlsM","sourceLink":"https://github.com/leanprover-community/ProofWidgets4/blob/556caed0eadb7901e068131d1be208dd907d07a2/ProofWidgets/Util.lean#L18-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./ProofWidgets/Util.html#ProofWidgets.Util.joinArrays\"><span class=\"name\">ProofWidgets</span>.<span class=\"name\">Util</span>.<span class=\"name\">joinArrays</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">Lean.MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">Lean.MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arr</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Lean.Term</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>","info":{"doc":"Sends `#[a, b, c]` to `` `(term| $a ++ $b ++ $c)``","docLink":"./ProofWidgets/Util.html#ProofWidgets.Util.joinArrays","kind":"def","line":11,"name":"ProofWidgets.Util.joinArrays","sourceLink":"https://github.com/leanprover-community/ProofWidgets4/blob/556caed0eadb7901e068131d1be208dd907d07a2/ProofWidgets/Util.lean#L11-L16"}}],"imports":["Init","Lean.PrettyPrinter.Delaborator.Basic"],"instances":[],"name":"ProofWidgets.Util"}