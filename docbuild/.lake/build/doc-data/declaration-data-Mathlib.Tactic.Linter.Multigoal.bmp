{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Multigoal.html#Mathlib.Linter.Style.multiGoal.multiGoalLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">multiGoal</span>.<span class=\"name\">multiGoalLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>","info":{"doc":"The \"multiGoal\" linter emits a warning when there are multiple active goals. ","docLink":"./Mathlib/Tactic/Linter/Multigoal.html#Mathlib.Linter.Style.multiGoal.multiGoalLinter","kind":"def","line":157,"name":"Mathlib.Linter.Style.multiGoal.multiGoalLinter","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/Multigoal.lean#L157-L173"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Multigoal.html#Mathlib.Linter.Style.multiGoal.getManyGoals\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">multiGoal</span>.<span class=\"name\">getManyGoals</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>","info":{"doc":"`getManyGoals t` returns the syntax nodes of the `InfoTree` `t` corresponding to tactic calls\nwhich\n* leave at least one goal that was present before it ran\n  (with the exception of tactics that leave the sole goal unchanged);\n* are not excluded through `exclusions` or `ignoreBranch`;\n\ntogether with the number of goals before the tactic,\nthe number of goals after the tactic, and the number of unaffected goals.\n","docLink":"./Mathlib/Tactic/Linter/Multigoal.html#Mathlib.Linter.Style.multiGoal.getManyGoals","kind":"opaque","line":129,"name":"Mathlib.Linter.Style.multiGoal.getManyGoals","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/Multigoal.lean#L129-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Multigoal.html#Mathlib.Linter.Style.multiGoal.ignoreBranch\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">multiGoal</span>.<span class=\"name\">ignoreBranch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a></span></div></div>","info":{"doc":"The `SyntaxNodeKind`s in `ignoreBranch` correspond to tactics that disable the linter from\ntheir first application until the corresponding proof branch is closed.\nReasons for ignoring these tactics include\n* the linter gets confused by the proof management, e.g. `conv`;\n* the tactics are *intended* to act on multiple goals, e.g. `repeat`, `any_goals`, `all_goals`, ...\n\nThere is some overlap in scope between `exclusions` and `ignoreBranch`.\n","docLink":"./Mathlib/Tactic/Linter/Multigoal.html#Mathlib.Linter.Style.multiGoal.ignoreBranch","kind":"def","line":107,"name":"Mathlib.Linter.Style.multiGoal.ignoreBranch","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/Multigoal.lean#L107-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Multigoal.html#Mathlib.Linter.Style.multiGoal.exclusions\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">multiGoal</span>.<span class=\"name\">exclusions</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a></span></div></div>","info":{"doc":"The `SyntaxNodeKind`s in `exclusions` correspond to tactics that the linter allows,\neven though there are multiple active goals.\nReasons for admitting a kind in `exclusions` include\n* the tactic focuses on one goal, e.g. `·`, `focus`, `on_goal i =>`, ...;\n* the tactic is reordering the goals, e.g. `swap`, `rotate_left`, ...;\n* the tactic is structuring a proof, e.g. `skip`, `<;>`, ...;\n* the tactic is creating new goals, e.g. `constructor`, `cases`, `induction`, ....\n\nThere is some overlap in scope between `ignoreBranch` and `exclusions`.\n\nTactic combinators like `repeat` or `try` are a mix of both.\n","docLink":"./Mathlib/Tactic/Linter/Multigoal.html#Mathlib.Linter.Style.multiGoal.exclusions","kind":"def","line":52,"name":"Mathlib.Linter.Style.multiGoal.exclusions","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/Multigoal.lean#L52-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Multigoal.html#Mathlib.Linter.linter.style.multiGoal\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">multiGoal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The \"multiGoal\" linter emits a warning when there are multiple active goals. ","docLink":"./Mathlib/Tactic/Linter/Multigoal.html#Mathlib.Linter.linter.style.multiGoal","kind":"opaque","line":44,"name":"Mathlib.Linter.linter.style.multiGoal","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/Multigoal.lean#L44-L48"}}],"imports":["Init","Lean.Elab.Command","Mathlib.Tactic.Linter.Header"],"instances":[],"name":"Mathlib.Tactic.Linter.Multigoal"}