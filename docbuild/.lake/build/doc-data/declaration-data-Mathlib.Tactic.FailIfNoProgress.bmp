{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FailIfNoProgress.html#Mathlib.Tactic.runAndFailIfNoProgress\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">runAndFailIfNoProgress</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacs</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span></div></div>","info":{"doc":"Run `tacs : TacticM Unit` on `goal`, and fail if no progress is made. ","docLink":"./Mathlib/Tactic/FailIfNoProgress.html#Mathlib.Tactic.runAndFailIfNoProgress","kind":"def","line":63,"name":"Mathlib.Tactic.runAndFailIfNoProgress","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FailIfNoProgress.lean#L63-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FailIfNoProgress.html#Mathlib.Tactic.lctxIsDefEq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">lctxIsDefEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"`lctxIsDefEq l₁ l₂` compares two lists of `Option LocalDecl`s (as returned from e.g.\n`(← (← getMainGoal).getDecl).lctx.decls.toList`). It returns `true` if they have the same\nlocal declarations in the same order (up to defeq, without setting mvars), and `false` otherwise.\n\nAssumption: this function is run with one of the local contexts as the current `MetaM` local\ncontext, and one of the two lists consists of the `LocalDecl`s of that context. ","docLink":"./Mathlib/Tactic/FailIfNoProgress.html#Mathlib.Tactic.lctxIsDefEq","kind":"def","line":39,"name":"Mathlib.Tactic.lctxIsDefEq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FailIfNoProgress.lean#L39-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FailIfNoProgress.html#Mathlib.Tactic.failIfNoProgress\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">failIfNoProgress</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`fail_if_no_progress tacs` evaluates `tacs`, and fails if no progress is made on the main goal\nor the local context at reducible transparency. ","docLink":"./Mathlib/Tactic/FailIfNoProgress.html#Mathlib.Tactic.failIfNoProgress","kind":"def","line":35,"name":"Mathlib.Tactic.failIfNoProgress","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FailIfNoProgress.lean#L35-L37"}}],"imports":["Init","Mathlib.Init","Lean.Elab.Tactic.Basic","Lean.Meta.Tactic.Util"],"instances":[],"name":"Mathlib.Tactic.FailIfNoProgress"}