{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#CauchySeq.norm_bddAbove\"><span class=\"name\">CauchySeq</span>.<span class=\"name\">norm_bddAbove</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CauchySeq\">CauchySeq</a> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Defs.html#BddAbove\">BddAbove</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">n</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#CauchySeq.norm_bddAbove","kind":"theorem","line":414,"name":"CauchySeq.norm_bddAbove","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L414-L414"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#CauchySeq.mul_norm_bddAbove\"><span class=\"name\">CauchySeq</span>.<span class=\"name\">mul_norm_bddAbove</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CauchySeq\">CauchySeq</a> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Defs.html#BddAbove\">BddAbove</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">n</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#CauchySeq.mul_norm_bddAbove","kind":"theorem","line":414,"name":"CauchySeq.mul_norm_bddAbove","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L414-L425"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#cauchySeq_sum_of_eventually_eq\"><span class=\"name\">cauchySeq_sum_of_eventually_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">huv</span> : <span class=\"fn\">∀ <span class=\"fn\">n</span> ≥ <span class=\"fn\">N</span>, <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CauchySeq\">CauchySeq</a> <span class=\"fn\">fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">∑ <span class=\"fn\">k</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Range.html#Finset.range\">Finset.range</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>, <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">k</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CauchySeq\">CauchySeq</a> <span class=\"fn\">fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">∑ <span class=\"fn\">k</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Range.html#Finset.range\">Finset.range</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>, <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">k</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#cauchySeq_sum_of_eventually_eq","kind":"theorem","line":400,"name":"cauchySeq_sum_of_eventually_eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L400-L400"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#cauchySeq_prod_of_eventually_eq\"><span class=\"name\">cauchySeq_prod_of_eventually_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">huv</span> : <span class=\"fn\">∀ <span class=\"fn\">n</span> ≥ <span class=\"fn\">N</span>, <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CauchySeq\">CauchySeq</a> <span class=\"fn\">fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">∏ <span class=\"fn\">k</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Range.html#Finset.range\">Finset.range</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>, <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">k</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CauchySeq\">CauchySeq</a> <span class=\"fn\">fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">∏ <span class=\"fn\">k</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Range.html#Finset.range\">Finset.range</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>, <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">k</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#cauchySeq_prod_of_eventually_eq","kind":"theorem","line":400,"name":"cauchySeq_prod_of_eventually_eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L400-L412"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#SeparationQuotient.nnnorm_mk\"><span class=\"name\">SeparationQuotient</span>.<span class=\"name\">nnnorm_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\"><a href=\"./Mathlib/Topology/Inseparable.html#SeparationQuotient.mk\">mk</a> <span class=\"fn\">p</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\">p</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#SeparationQuotient.nnnorm_mk","kind":"theorem","line":395,"name":"SeparationQuotient.nnnorm_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L395-L395"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#SeparationQuotient.nnnorm_mk'\"><span class=\"name\">SeparationQuotient</span>.<span class=\"name\">nnnorm_mk'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\"><a href=\"./Mathlib/Topology/Inseparable.html#SeparationQuotient.mk\">mk</a> <span class=\"fn\">p</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\">p</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#SeparationQuotient.nnnorm_mk'","kind":"theorem","line":395,"name":"SeparationQuotient.nnnorm_mk'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L395-L396"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#SeparationQuotient.mk_eq_zero_iff\"><span class=\"name\">SeparationQuotient</span>.<span class=\"name\">mk_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Inseparable.html#SeparationQuotient.mk\">mk</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">p</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#SeparationQuotient.mk_eq_zero_iff","kind":"theorem","line":390,"name":"SeparationQuotient.mk_eq_zero_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L390-L390"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#SeparationQuotient.mk_eq_one_iff\"><span class=\"name\">SeparationQuotient</span>.<span class=\"name\">mk_eq_one_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Inseparable.html#SeparationQuotient.mk\">mk</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">p</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#SeparationQuotient.mk_eq_one_iff","kind":"theorem","line":390,"name":"SeparationQuotient.mk_eq_one_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L390-L392"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#SeparationQuotient.instNormedAddCommGroup\"><span class=\"name\">SeparationQuotient</span>.<span class=\"name\">instNormedAddCommGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#SeparationQuotient\">SeparationQuotient</a> <span class=\"fn\">E</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#SeparationQuotient.instNormedAddCommGroup","kind":"instance","line":385,"name":"SeparationQuotient.instNormedAddCommGroup","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L385-L385"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#SeparationQuotient.instNormedCommGroup\"><span class=\"name\">SeparationQuotient</span>.<span class=\"name\">instNormedCommGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedCommGroup\">NormedCommGroup</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#SeparationQuotient\">SeparationQuotient</a> <span class=\"fn\">E</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#SeparationQuotient.instNormedCommGroup","kind":"instance","line":385,"name":"SeparationQuotient.instNormedCommGroup","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L385-L388"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#SeparationQuotient.norm_mk\"><span class=\"name\">SeparationQuotient</span>.<span class=\"name\">norm_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><a href=\"./Mathlib/Topology/Inseparable.html#SeparationQuotient.mk\">mk</a> <span class=\"fn\">p</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">p</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#SeparationQuotient.norm_mk","kind":"theorem","line":382,"name":"SeparationQuotient.norm_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L382-L382"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#SeparationQuotient.norm_mk'\"><span class=\"name\">SeparationQuotient</span>.<span class=\"name\">norm_mk'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><a href=\"./Mathlib/Topology/Inseparable.html#SeparationQuotient.mk\">mk</a> <span class=\"fn\">p</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">p</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#SeparationQuotient.norm_mk'","kind":"theorem","line":382,"name":"SeparationQuotient.norm_mk'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L382-L383"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#SeparationQuotient.instNorm\"><span class=\"name\">SeparationQuotient</span>.<span class=\"name\">instNorm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm\">Norm</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#SeparationQuotient\">SeparationQuotient</a> <span class=\"fn\">E</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#SeparationQuotient.instNorm","kind":"instance","line":377,"name":"SeparationQuotient.instNorm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L377-L377"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#SeparationQuotient.instMulNorm\"><span class=\"name\">SeparationQuotient</span>.<span class=\"name\">instMulNorm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm\">Norm</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#SeparationQuotient\">SeparationQuotient</a> <span class=\"fn\">E</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#SeparationQuotient.instMulNorm","kind":"instance","line":377,"name":"SeparationQuotient.instMulNorm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L377-L379"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#SeminormedAddCommGroup.toIsTopologicalAddGroup\"><span class=\"name\">SeminormedAddCommGroup</span>.<span class=\"name\">toIsTopologicalAddGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Algebra/Group/Defs.html#IsTopologicalAddGroup\">IsTopologicalAddGroup</a> <span class=\"fn\">E</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#SeminormedAddCommGroup.toIsTopologicalAddGroup","kind":"instance","line":369,"name":"SeminormedAddCommGroup.toIsTopologicalAddGroup","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L369-L369"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#SeminormedCommGroup.toIsTopologicalGroup\"><span class=\"name\">SeminormedCommGroup</span>.<span class=\"name\">toIsTopologicalGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Algebra/Group/Defs.html#IsTopologicalGroup\">IsTopologicalGroup</a> <span class=\"fn\">E</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#SeminormedCommGroup.toIsTopologicalGroup","kind":"instance","line":369,"name":"SeminormedCommGroup.toIsTopologicalGroup","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L369-L371"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#SeminormedAddCommGroup.to_isUniformAddGroup\"><span class=\"name\">SeminormedAddCommGroup</span>.<span class=\"name\">to_isUniformAddGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Algebra/IsUniformGroup/Defs.html#IsUniformAddGroup\">IsUniformAddGroup</a> <span class=\"fn\">E</span></span></div></div>","info":{"doc":"A seminormed group is a uniform additive group, i.e., addition and subtraction are\nuniformly continuous. ","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#SeminormedAddCommGroup.to_isUniformAddGroup","kind":"instance","line":362,"name":"SeminormedAddCommGroup.to_isUniformAddGroup","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L362-L363"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#SeminormedCommGroup.to_isUniformGroup\"><span class=\"name\">SeminormedCommGroup</span>.<span class=\"name\">to_isUniformGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Algebra/IsUniformGroup/Defs.html#IsUniformGroup\">IsUniformGroup</a> <span class=\"fn\">E</span></span></div></div>","info":{"doc":"A seminormed group is a uniform group, i.e., multiplication and division are uniformly\ncontinuous. ","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#SeminormedCommGroup.to_isUniformGroup","kind":"instance","line":360,"name":"SeminormedCommGroup.to_isUniformGroup","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L360-L365"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#SeminormedAddCommGroup.to_lipschitzAdd\"><span class=\"name\">SeminormedAddCommGroup</span>.<span class=\"name\">to_lipschitzAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Algebra.html#LipschitzAdd\">LipschitzAdd</a> <span class=\"fn\">E</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#SeminormedAddCommGroup.to_lipschitzAdd","kind":"instance","line":355,"name":"SeminormedAddCommGroup.to_lipschitzAdd","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L355-L355"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#SeminormedCommGroup.to_lipschitzMul\"><span class=\"name\">SeminormedCommGroup</span>.<span class=\"name\">to_lipschitzMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Algebra.html#LipschitzMul\">LipschitzMul</a> <span class=\"fn\">E</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#SeminormedCommGroup.to_lipschitzMul","kind":"instance","line":355,"name":"SeminormedCommGroup.to_lipschitzMul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L355-L357"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.le_mul_norm_sub\"><span class=\"name\">AntilipschitzWith</span>.<span class=\"name\">le_mul_norm_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.le_mul_norm_sub","kind":"theorem","line":347,"name":"AntilipschitzWith.le_mul_norm_sub","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L347-L347"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.le_mul_norm_div\"><span class=\"name\">AntilipschitzWith</span>.<span class=\"name\">le_mul_norm_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.le_mul_norm_div","kind":"theorem","line":347,"name":"AntilipschitzWith.le_mul_norm_div","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L347-L349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.add_sub_lipschitzWith\"><span class=\"name\">AntilipschitzWith</span>.<span class=\"name\">add_sub_lipschitzWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Kf </span><span class=\"fn\">Kg</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">Kf</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">Kg</span> (<span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">f</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hK</span> : <span class=\"fn\">Kg</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">Kf</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> (<span class=\"fn\">Kf</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">Kg</span>)<a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a> <span class=\"fn\">g</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.add_sub_lipschitzWith","kind":"theorem","line":342,"name":"AntilipschitzWith.add_sub_lipschitzWith","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L342-L342"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.mul_div_lipschitzWith\"><span class=\"name\">AntilipschitzWith</span>.<span class=\"name\">mul_div_lipschitzWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Kf </span><span class=\"fn\">Kg</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">Kf</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">Kg</span> (<span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">f</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hK</span> : <span class=\"fn\">Kg</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">Kf</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> (<span class=\"fn\">Kf</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">Kg</span>)<a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a> <span class=\"fn\">g</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.mul_div_lipschitzWith","kind":"theorem","line":342,"name":"AntilipschitzWith.mul_div_lipschitzWith","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L342-L345"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.add_lipschitzWith\"><span class=\"name\">AntilipschitzWith</span>.<span class=\"name\">add_lipschitzWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Kf </span><span class=\"fn\">Kg</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">Kf</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">Kg</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hK</span> : <span class=\"fn\">Kg</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">Kf</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> (<span class=\"fn\">Kf</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">Kg</span>)<a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.add_lipschitzWith","kind":"theorem","line":329,"name":"AntilipschitzWith.add_lipschitzWith","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L329-L329"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.mul_lipschitzWith\"><span class=\"name\">AntilipschitzWith</span>.<span class=\"name\">mul_lipschitzWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Kf </span><span class=\"fn\">Kg</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">Kf</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">Kg</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hK</span> : <span class=\"fn\">Kg</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">Kf</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> (<span class=\"fn\">Kf</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">Kg</span>)<a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.mul_lipschitzWith","kind":"theorem","line":329,"name":"AntilipschitzWith.mul_lipschitzWith","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L329-L340"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitz.sub\"><span class=\"name\">LocallyLipschitz</span>.<span class=\"name\">sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitz.sub","kind":"theorem","line":322,"name":"LocallyLipschitz.sub","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L322-L322"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitz.div\"><span class=\"name\">LocallyLipschitz</span>.<span class=\"name\">div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitz.div","kind":"theorem","line":322,"name":"LocallyLipschitz.div","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L322-L325"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitzOn.sub\"><span class=\"name\">LocallyLipschitzOn</span>.<span class=\"name\">sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitzOn.sub","kind":"theorem","line":317,"name":"LocallyLipschitzOn.sub","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L317-L317"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitzOn.div\"><span class=\"name\">LocallyLipschitzOn</span>.<span class=\"name\">div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitzOn.div","kind":"theorem","line":317,"name":"LocallyLipschitzOn.div","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L317-L320"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.sub\"><span class=\"name\">LipschitzWith</span>.<span class=\"name\">sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Kf </span><span class=\"fn\">Kg</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">Kf</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">Kg</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> (<span class=\"fn\">Kf</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">Kg</span>) <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.sub","kind":"theorem","line":312,"name":"LipschitzWith.sub","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L312-L312"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.div\"><span class=\"name\">LipschitzWith</span>.<span class=\"name\">div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Kf </span><span class=\"fn\">Kg</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">Kf</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">Kg</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> (<span class=\"fn\">Kf</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">Kg</span>) <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.div","kind":"theorem","line":312,"name":"LipschitzWith.div","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L312-L315"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.sub\"><span class=\"name\">LipschitzOnWith</span>.<span class=\"name\">sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Kf </span><span class=\"fn\">Kg</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">Kf</span> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">Kg</span> <span class=\"fn\">g</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> (<span class=\"fn\">Kf</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">Kg</span>) <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.sub","kind":"theorem","line":307,"name":"LipschitzOnWith.sub","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L307-L307"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.div\"><span class=\"name\">LipschitzOnWith</span>.<span class=\"name\">div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Kf </span><span class=\"fn\">Kg</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">Kf</span> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">Kg</span> <span class=\"fn\">g</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> (<span class=\"fn\">Kf</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">Kg</span>) <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.div","kind":"theorem","line":307,"name":"LipschitzOnWith.div","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L307-L310"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitz.add\"><span class=\"name\">LocallyLipschitz</span>.<span class=\"name\">add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitz.add","kind":"theorem","line":302,"name":"LocallyLipschitz.add","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L302-L302"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitz.mul\"><span class=\"name\">LocallyLipschitz</span>.<span class=\"name\">mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitz.mul","kind":"theorem","line":302,"name":"LocallyLipschitz.mul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L302-L305"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitzOn.add\"><span class=\"name\">LocallyLipschitzOn</span>.<span class=\"name\">add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitzOn.add","kind":"theorem","line":294,"name":"LocallyLipschitzOn.add","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L294-L294"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitzOn.mul\"><span class=\"name\">LocallyLipschitzOn</span>.<span class=\"name\">mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitzOn.mul","kind":"theorem","line":294,"name":"LocallyLipschitzOn.mul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L294-L300"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.add\"><span class=\"name\">LipschitzWith</span>.<span class=\"name\">add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Kf </span><span class=\"fn\">Kg</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">Kf</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">Kg</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> (<span class=\"fn\">Kf</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">Kg</span>) <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.add","kind":"theorem","line":289,"name":"LipschitzWith.add","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L289-L289"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.mul\"><span class=\"name\">LipschitzWith</span>.<span class=\"name\">mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Kf </span><span class=\"fn\">Kg</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">Kf</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">Kg</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> (<span class=\"fn\">Kf</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">Kg</span>) <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.mul","kind":"theorem","line":289,"name":"LipschitzWith.mul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L289-L292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.add\"><span class=\"name\">LipschitzOnWith</span>.<span class=\"name\">add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Kf </span><span class=\"fn\">Kg</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">Kf</span> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">Kg</span> <span class=\"fn\">g</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> (<span class=\"fn\">Kf</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">Kg</span>) <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.add","kind":"theorem","line":280,"name":"LipschitzOnWith.add","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L280-L280"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.mul\"><span class=\"name\">LipschitzOnWith</span>.<span class=\"name\">mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Kf </span><span class=\"fn\">Kg</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">Kf</span> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">Kg</span> <span class=\"fn\">g</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> (<span class=\"fn\">Kf</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">Kg</span>) <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.mul","kind":"theorem","line":280,"name":"LipschitzOnWith.mul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L280-L287"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitzOn.of_neg\"><span class=\"name\">LocallyLipschitzOn</span>.<span class=\"name\">of_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span>)</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitzOn.of_neg","kind":"theorem","line":277,"name":"LocallyLipschitzOn.of_neg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L277-L277"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitzOn.neg\"><span class=\"name\">LocallyLipschitzOn</span>.<span class=\"name\">neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitzOn.neg","kind":"theorem","line":277,"name":"LocallyLipschitzOn.neg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L277-L277"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitzOn.inv\"><span class=\"name\">LocallyLipschitzOn</span>.<span class=\"name\">inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></span></span></div></div>","info":{"doc":"**Alias** of the reverse direction of `locallyLipschitzOn_inv_iff`.","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitzOn.inv","kind":"theorem","line":277,"name":"LocallyLipschitzOn.inv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L277-L278"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitzOn.of_inv\"><span class=\"name\">LocallyLipschitzOn</span>.<span class=\"name\">of_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span></span></div></div>","info":{"doc":"**Alias** of the forward direction of `locallyLipschitzOn_inv_iff`.","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitzOn.of_inv","kind":"theorem","line":277,"name":"LocallyLipschitzOn.of_inv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L277-L278"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitz.of_neg\"><span class=\"name\">LocallyLipschitz</span>.<span class=\"name\">of_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span>)</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> <span class=\"fn\">f</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitz.of_neg","kind":"theorem","line":276,"name":"LocallyLipschitz.of_neg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L276-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitz.neg\"><span class=\"name\">LocallyLipschitz</span>.<span class=\"name\">neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitz.neg","kind":"theorem","line":276,"name":"LocallyLipschitz.neg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L276-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitz.inv\"><span class=\"name\">LocallyLipschitz</span>.<span class=\"name\">inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> <span class=\"fn\">f</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></span></span></div></div>","info":{"doc":"**Alias** of the reverse direction of `locallyLipschitz_inv_iff`.","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitz.inv","kind":"theorem","line":276,"name":"LocallyLipschitz.inv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L276-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitz.of_inv\"><span class=\"name\">LocallyLipschitz</span>.<span class=\"name\">of_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> <span class=\"fn\">f</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> <span class=\"fn\">f</span></span></span></div></div>","info":{"doc":"**Alias** of the forward direction of `locallyLipschitz_inv_iff`.","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LocallyLipschitz.of_inv","kind":"theorem","line":276,"name":"LocallyLipschitz.of_inv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L276-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.of_neg\"><span class=\"name\">LipschitzOnWith</span>.<span class=\"name\">of_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">K</span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span>) <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.of_neg","kind":"theorem","line":275,"name":"LipschitzOnWith.of_neg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L275-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.neg\"><span class=\"name\">LipschitzOnWith</span>.<span class=\"name\">neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">K</span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span>) <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.neg","kind":"theorem","line":275,"name":"LipschitzOnWith.neg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L275-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.of_inv\"><span class=\"name\">LipschitzOnWith</span>.<span class=\"name\">of_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"**Alias** of the forward direction of `lipschitzOnWith_inv_iff`.","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.of_inv","kind":"theorem","line":275,"name":"LipschitzOnWith.of_inv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L275-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.inv\"><span class=\"name\">LipschitzOnWith</span>.<span class=\"name\">inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"**Alias** of the reverse direction of `lipschitzOnWith_inv_iff`.","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.inv","kind":"theorem","line":275,"name":"LipschitzOnWith.inv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L275-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.neg\"><span class=\"name\">AntilipschitzWith</span>.<span class=\"name\">neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">K</span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.neg","kind":"theorem","line":274,"name":"AntilipschitzWith.neg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L274-L274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.of_neg\"><span class=\"name\">AntilipschitzWith</span>.<span class=\"name\">of_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">K</span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span>)</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.of_neg","kind":"theorem","line":274,"name":"AntilipschitzWith.of_neg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L274-L274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.inv\"><span class=\"name\">AntilipschitzWith</span>.<span class=\"name\">inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></span></span></div></div>","info":{"doc":"**Alias** of the reverse direction of `antilipschitzWith_inv_iff`.","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.inv","kind":"theorem","line":274,"name":"AntilipschitzWith.inv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L274-L274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.of_inv\"><span class=\"name\">AntilipschitzWith</span>.<span class=\"name\">of_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span></span></span></div></div>","info":{"doc":"**Alias** of the forward direction of `antilipschitzWith_inv_iff`.","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.of_inv","kind":"theorem","line":274,"name":"AntilipschitzWith.of_inv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L274-L274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.of_neg\"><span class=\"name\">LipschitzWith</span>.<span class=\"name\">of_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">K</span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span>)</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.of_neg","kind":"theorem","line":273,"name":"LipschitzWith.of_neg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L273-L273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.neg\"><span class=\"name\">LipschitzWith</span>.<span class=\"name\">neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">K</span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.neg","kind":"theorem","line":273,"name":"LipschitzWith.neg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L273-L273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.inv\"><span class=\"name\">LipschitzWith</span>.<span class=\"name\">inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></span></span></div></div>","info":{"doc":"**Alias** of the reverse direction of `lipschitzWith_inv_iff`.","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.inv","kind":"theorem","line":273,"name":"LipschitzWith.inv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L273-L273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.of_inv\"><span class=\"name\">LipschitzWith</span>.<span class=\"name\">of_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span></span></span></div></div>","info":{"doc":"**Alias** of the forward direction of `lipschitzWith_inv_iff`.","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.of_inv","kind":"theorem","line":273,"name":"LipschitzWith.of_inv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L273-L273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#locallyLipschitzOn_neg_iff\"><span class=\"name\">locallyLipschitzOn_neg_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#locallyLipschitzOn_neg_iff","kind":"theorem","line":269,"name":"locallyLipschitzOn_neg_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L269-L269"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#locallyLipschitzOn_inv_iff\"><span class=\"name\">locallyLipschitzOn_inv_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitzOn\">LocallyLipschitzOn</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#locallyLipschitzOn_inv_iff","kind":"theorem","line":269,"name":"locallyLipschitzOn_inv_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L269-L271"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#locallyLipschitz_neg_iff\"><span class=\"name\">locallyLipschitz_neg_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#locallyLipschitz_neg_iff","kind":"theorem","line":265,"name":"locallyLipschitz_neg_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L265-L265"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#locallyLipschitz_inv_iff\"><span class=\"name\">locallyLipschitz_inv_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> <span class=\"fn\">f</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LocallyLipschitz\">LocallyLipschitz</a> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#locallyLipschitz_inv_iff","kind":"theorem","line":265,"name":"locallyLipschitz_inv_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L265-L267"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzOnWith_neg_iff\"><span class=\"name\">lipschitzOnWith_neg_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">K</span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span>) <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzOnWith_neg_iff","kind":"theorem","line":261,"name":"lipschitzOnWith_neg_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L261-L261"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzOnWith_inv_iff\"><span class=\"name\">lipschitzOnWith_inv_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzOnWith_inv_iff","kind":"theorem","line":261,"name":"lipschitzOnWith_inv_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L261-L263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#antilipschitzWith_neg_iff\"><span class=\"name\">antilipschitzWith_neg_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">K</span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#antilipschitzWith_neg_iff","kind":"theorem","line":257,"name":"antilipschitzWith_neg_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L257-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#antilipschitzWith_inv_iff\"><span class=\"name\">antilipschitzWith_inv_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#antilipschitzWith_inv_iff","kind":"theorem","line":257,"name":"antilipschitzWith_inv_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L257-L259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzWith_neg_iff\"><span class=\"name\">lipschitzWith_neg_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">K</span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzWith_neg_iff","kind":"theorem","line":254,"name":"lipschitzWith_neg_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L254-L254"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzWith_inv_iff\"><span class=\"name\">lipschitzWith_inv_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzWith_inv_iff","kind":"theorem","line":254,"name":"lipschitzWith_inv_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L254-L255"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#edist_add_add_le\"><span class=\"name\">edist_add_add_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EDist.edist\">edist</a> (<span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a₂</span>) (<span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span>)</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EDist.edist\">edist</a> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EDist.edist\">edist</a> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#edist_add_add_le","kind":"theorem","line":243,"name":"edist_add_add_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L243-L243"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#edist_mul_mul_le\"><span class=\"name\">edist_mul_mul_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EDist.edist\">edist</a> (<span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a₂</span>) (<span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₂</span>)</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EDist.edist\">edist</a> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EDist.edist\">edist</a> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#edist_mul_mul_le","kind":"theorem","line":243,"name":"edist_mul_mul_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L243-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#nndist_add_add_le\"><span class=\"name\">nndist_add_add_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#NNDist.nndist\">nndist</a> (<span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a₂</span>) (<span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span>)</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#NNDist.nndist\">nndist</a> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#NNDist.nndist\">nndist</a> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#nndist_add_add_le","kind":"theorem","line":238,"name":"nndist_add_add_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L238-L238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#nndist_mul_mul_le\"><span class=\"name\">nndist_mul_mul_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#NNDist.nndist\">nndist</a> (<span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a₂</span>) (<span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₂</span>)</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#NNDist.nndist\">nndist</a> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#NNDist.nndist\">nndist</a> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#nndist_mul_mul_le","kind":"theorem","line":238,"name":"nndist_mul_mul_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L238-L241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#abs_dist_sub_le_dist_add_add\"><span class=\"name\">abs_dist_sub_le_dist_add_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Algebra/Order/Group/Unbundled/Abs.html#abs\">|</a><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span></span><a href=\"./Mathlib/Algebra/Order/Group/Unbundled/Abs.html#abs\">|</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> (<span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a₂</span>) (<span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#abs_dist_sub_le_dist_add_add","kind":"theorem","line":230,"name":"abs_dist_sub_le_dist_add_add","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L230-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#abs_dist_sub_le_dist_mul_mul\"><span class=\"name\">abs_dist_sub_le_dist_mul_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Algebra/Order/Group/Unbundled/Abs.html#abs\">|</a><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span></span><a href=\"./Mathlib/Algebra/Order/Group/Unbundled/Abs.html#abs\">|</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> (<span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a₂</span>) (<span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₂</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#abs_dist_sub_le_dist_mul_mul","kind":"theorem","line":230,"name":"abs_dist_sub_le_dist_mul_mul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L230-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_sub_sub_le_of_le\"><span class=\"name\">dist_sub_sub_le_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁ </span><span class=\"fn\">r₂</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> (<span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a₂</span>) (<span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b₂</span>)</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">r₂</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_sub_sub_le_of_le","kind":"theorem","line":225,"name":"dist_sub_sub_le_of_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L225-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_div_div_le_of_le\"><span class=\"name\">dist_div_div_le_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁ </span><span class=\"fn\">r₂</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> (<span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">a₂</span>) (<span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b₂</span>)</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">r₂</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_div_div_le_of_le","kind":"theorem","line":225,"name":"dist_div_div_le_of_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L225-L228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_sub_sub_le\"><span class=\"name\">dist_sub_sub_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> (<span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a₂</span>) (<span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b₂</span>)</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_sub_sub_le","kind":"theorem","line":221,"name":"dist_sub_sub_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L221-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_div_div_le\"><span class=\"name\">dist_div_div_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> (<span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">a₂</span>) (<span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b₂</span>)</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_div_div_le","kind":"theorem","line":221,"name":"dist_div_div_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L221-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_add_add_le_of_le\"><span class=\"name\">dist_add_add_le_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁ </span><span class=\"fn\">r₂</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> (<span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a₂</span>) (<span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span>)</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">r₂</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_add_add_le_of_le","kind":"theorem","line":216,"name":"dist_add_add_le_of_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L216-L216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_mul_mul_le_of_le\"><span class=\"name\">dist_mul_mul_le_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁ </span><span class=\"fn\">r₂</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> (<span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a₂</span>) (<span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₂</span>)</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">r₂</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_mul_mul_le_of_le","kind":"theorem","line":216,"name":"dist_mul_mul_le_of_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L216-L219"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_add_add_le\"><span class=\"name\">dist_add_add_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> (<span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a₂</span>) (<span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span>)</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_add_add_le","kind":"theorem","line":212,"name":"dist_add_add_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L212-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_mul_mul_le\"><span class=\"name\">dist_mul_mul_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> (<span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a₂</span>) (<span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b₂</span>)</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_mul_mul_le","kind":"theorem","line":212,"name":"dist_mul_mul_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L212-L214"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_self_sub_left\"><span class=\"name\">dist_self_sub_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>) <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">b</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_self_sub_left","kind":"theorem","line":208,"name":"dist_self_sub_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L208-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_self_div_left\"><span class=\"name\">dist_self_div_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>) <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">b</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_self_div_left","kind":"theorem","line":208,"name":"dist_self_div_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L208-L210"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_self_sub_right\"><span class=\"name\">dist_self_sub_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">b</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_self_sub_right","kind":"theorem","line":204,"name":"dist_self_sub_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L204-L204"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_self_div_right\"><span class=\"name\">dist_self_div_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">b</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_self_div_right","kind":"theorem","line":204,"name":"dist_self_div_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L204-L206"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_self_add_left\"><span class=\"name\">dist_self_add_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">b</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_self_add_left","kind":"theorem","line":200,"name":"dist_self_add_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L200-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_self_mul_left\"><span class=\"name\">dist_self_mul_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>) <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">b</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_self_mul_left","kind":"theorem","line":200,"name":"dist_self_mul_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L200-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_self_add_right\"><span class=\"name\">dist_self_add_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">b</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_self_add_right","kind":"theorem","line":196,"name":"dist_self_add_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L196-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_self_mul_right\"><span class=\"name\">dist_self_mul_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">b</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_self_mul_right","kind":"theorem","line":196,"name":"dist_self_mul_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L196-L198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#NormedAddGroup.to_isIsometricVAdd_left\"><span class=\"name\">NormedAddGroup</span>.<span class=\"name\">to_isIsometricVAdd_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/IsometricSMul.html#IsIsometricVAdd\">IsIsometricVAdd</a> <span class=\"fn\">E</span> <span class=\"fn\">E</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#NormedAddGroup.to_isIsometricVAdd_left","kind":"instance","line":192,"name":"NormedAddGroup.to_isIsometricVAdd_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L192-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#NormedGroup.to_isIsometricSMul_left\"><span class=\"name\">NormedGroup</span>.<span class=\"name\">to_isIsometricSMul_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedCommGroup\">SeminormedCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/IsometricSMul.html#IsIsometricSMul\">IsIsometricSMul</a> <span class=\"fn\">E</span> <span class=\"fn\">E</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#NormedGroup.to_isIsometricSMul_left","kind":"instance","line":192,"name":"NormedGroup.to_isIsometricSMul_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L192-L194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#uniformContinuous_nnnorm\"><span class=\"name\">uniformContinuous_nnnorm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">E</span>) =&gt; <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\">a</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#uniformContinuous_nnnorm","kind":"theorem","line":182,"name":"uniformContinuous_nnnorm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L182-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#uniformContinuous_nnnorm'\"><span class=\"name\">uniformContinuous_nnnorm'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">E</span>) =&gt; <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\">a</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#uniformContinuous_nnnorm'","kind":"theorem","line":182,"name":"uniformContinuous_nnnorm'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L182-L184"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#uniformContinuous_norm\"><span class=\"name\">uniformContinuous_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformContinuous\">UniformContinuous</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">norm</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#uniformContinuous_norm","kind":"theorem","line":178,"name":"uniformContinuous_norm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L178-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#uniformContinuous_norm'\"><span class=\"name\">uniformContinuous_norm'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformContinuous\">UniformContinuous</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">norm</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#uniformContinuous_norm'","kind":"theorem","line":178,"name":"uniformContinuous_norm'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L178-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzWith_one_nnnorm\"><span class=\"name\">lipschitzWith_one_nnnorm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">1</span> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">nnnorm</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzWith_one_nnnorm","kind":"theorem","line":174,"name":"lipschitzWith_one_nnnorm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L174-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzWith_one_nnnorm'\"><span class=\"name\">lipschitzWith_one_nnnorm'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">1</span> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">nnnorm</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzWith_one_nnnorm'","kind":"theorem","line":174,"name":"lipschitzWith_one_nnnorm'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L174-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzWith_one_norm\"><span class=\"name\">lipschitzWith_one_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">1</span> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">norm</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzWith_one_norm","kind":"theorem","line":170,"name":"lipschitzWith_one_norm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L170-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzWith_one_norm'\"><span class=\"name\">lipschitzWith_one_norm'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">1</span> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">norm</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzWith_one_norm'","kind":"theorem","line":170,"name":"lipschitzWith_one_norm'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L170-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#Isometry.nnnorm_map_of_map_zero\"><span class=\"name\">Isometry</span>.<span class=\"name\">nnnorm_map_of_map_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#Isometry\">Isometry</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#Isometry.nnnorm_map_of_map_zero","kind":"theorem","line":163,"name":"Isometry.nnnorm_map_of_map_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L163-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#Isometry.nnnorm_map_of_map_one\"><span class=\"name\">Isometry</span>.<span class=\"name\">nnnorm_map_of_map_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#Isometry\">Isometry</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#Isometry.nnnorm_map_of_map_one","kind":"theorem","line":163,"name":"Isometry.nnnorm_map_of_map_one","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L163-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#ZeroHomClass.bound_of_antilipschitz\"><span class=\"name\">ZeroHomClass</span>.<span class=\"name\">bound_of_antilipschitz</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝓕</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#ZeroHomClass\">ZeroHomClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">𝓕</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#ZeroHomClass.bound_of_antilipschitz","kind":"theorem","line":158,"name":"ZeroHomClass.bound_of_antilipschitz","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L158-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#OneHomClass.bound_of_antilipschitz\"><span class=\"name\">OneHomClass</span>.<span class=\"name\">bound_of_antilipschitz</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝓕</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#OneHomClass\">OneHomClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">𝓕</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#OneHomClass.bound_of_antilipschitz","kind":"theorem","line":158,"name":"OneHomClass.bound_of_antilipschitz","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L158-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.le_mul_nnnorm\"><span class=\"name\">AntilipschitzWith</span>.<span class=\"name\">le_mul_nnnorm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">K</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.le_mul_nnnorm","kind":"theorem","line":153,"name":"AntilipschitzWith.le_mul_nnnorm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L153-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.le_mul_nnnorm'\"><span class=\"name\">AntilipschitzWith</span>.<span class=\"name\">le_mul_nnnorm'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">K</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.le_mul_nnnorm'","kind":"theorem","line":153,"name":"AntilipschitzWith.le_mul_nnnorm'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L153-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.le_mul_norm\"><span class=\"name\">AntilipschitzWith</span>.<span class=\"name\">le_mul_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.le_mul_norm","kind":"theorem","line":148,"name":"AntilipschitzWith.le_mul_norm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L148-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.le_mul_norm'\"><span class=\"name\">AntilipschitzWith</span>.<span class=\"name\">le_mul_norm'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#AntilipschitzWith.le_mul_norm'","kind":"theorem","line":148,"name":"AntilipschitzWith.le_mul_norm'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L148-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.nnorm_le_mul\"><span class=\"name\">LipschitzWith</span>.<span class=\"name\">nnorm_le_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">K</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.nnorm_le_mul","kind":"theorem","line":143,"name":"LipschitzWith.nnorm_le_mul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L143-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.nnorm_le_mul'\"><span class=\"name\">LipschitzWith</span>.<span class=\"name\">nnorm_le_mul'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">K</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.nnorm_le_mul'","kind":"theorem","line":143,"name":"LipschitzWith.nnorm_le_mul'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L143-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.norm_le_mul\"><span class=\"name\">LipschitzWith</span>.<span class=\"name\">norm_le_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.norm_le_mul","kind":"theorem","line":139,"name":"LipschitzWith.norm_le_mul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L139-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.norm_le_mul'\"><span class=\"name\">LipschitzWith</span>.<span class=\"name\">norm_le_mul'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.norm_le_mul'","kind":"theorem","line":139,"name":"LipschitzWith.norm_le_mul'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L139-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#AddMonoidHomClass.antilipschitz_of_bound\"><span class=\"name\">AddMonoidHomClass</span>.<span class=\"name\">antilipschitz_of_bound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝓕</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHomClass\">AddMonoidHomClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">𝓕</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">E</span>), <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#AddMonoidHomClass.antilipschitz_of_bound","kind":"theorem","line":133,"name":"AddMonoidHomClass.antilipschitz_of_bound","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L133-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#MonoidHomClass.antilipschitz_of_bound\"><span class=\"name\">MonoidHomClass</span>.<span class=\"name\">antilipschitz_of_bound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝓕</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHomClass\">MonoidHomClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">𝓕</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">E</span>), <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Antilipschitz.html#AntilipschitzWith\">AntilipschitzWith</a> <span class=\"fn\">K</span> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#MonoidHomClass.antilipschitz_of_bound","kind":"theorem","line":133,"name":"MonoidHomClass.antilipschitz_of_bound","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L133-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#AddMonoidHomClass.lipschitz_of_bound_nnnorm\"><span class=\"name\">AddMonoidHomClass</span>.<span class=\"name\">lipschitz_of_bound_nnnorm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝓕</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHomClass\">AddMonoidHomClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">𝓕</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">E</span>), <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">C</span> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#AddMonoidHomClass.lipschitz_of_bound_nnnorm","kind":"theorem","line":128,"name":"AddMonoidHomClass.lipschitz_of_bound_nnnorm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L128-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#MonoidHomClass.lipschitz_of_bound_nnnorm\"><span class=\"name\">MonoidHomClass</span>.<span class=\"name\">lipschitz_of_bound_nnnorm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝓕</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHomClass\">MonoidHomClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">𝓕</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">E</span>), <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">C</span> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#MonoidHomClass.lipschitz_of_bound_nnnorm","kind":"theorem","line":128,"name":"MonoidHomClass.lipschitz_of_bound_nnnorm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L128-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#AddMonoidHomClass.isometry_of_norm\"><span class=\"name\">AddMonoidHomClass</span>.<span class=\"name\">isometry_of_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝓕</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHomClass\">AddMonoidHomClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">𝓕</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">E</span>), <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a>)</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#Isometry\">Isometry</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#AddMonoidHomClass.isometry_of_norm","kind":"theorem","line":124,"name":"AddMonoidHomClass.isometry_of_norm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L124-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#MonoidHomClass.isometry_of_norm\"><span class=\"name\">MonoidHomClass</span>.<span class=\"name\">isometry_of_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝓕</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHomClass\">MonoidHomClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">𝓕</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">E</span>), <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a>)</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#Isometry\">Isometry</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></span></div></div>","info":{"doc":"**Alias** of the reverse direction of `MonoidHomClass.isometry_iff_norm`.","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#MonoidHomClass.isometry_of_norm","kind":"theorem","line":122,"name":"MonoidHomClass.isometry_of_norm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L122-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#AddMonoidHomClass.isometry_iff_norm\"><span class=\"name\">AddMonoidHomClass</span>.<span class=\"name\">isometry_iff_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝓕</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHomClass\">AddMonoidHomClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">𝓕</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#Isometry\">Isometry</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">E</span>), <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#AddMonoidHomClass.isometry_iff_norm","kind":"theorem","line":115,"name":"AddMonoidHomClass.isometry_iff_norm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L115-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#MonoidHomClass.isometry_iff_norm\"><span class=\"name\">MonoidHomClass</span>.<span class=\"name\">isometry_iff_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝓕</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHomClass\">MonoidHomClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">𝓕</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#Isometry\">Isometry</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">E</span>), <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#MonoidHomClass.isometry_iff_norm","kind":"theorem","line":115,"name":"MonoidHomClass.isometry_iff_norm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L115-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#AddMonoidHomClass.uniformContinuous_of_bound\"><span class=\"name\">AddMonoidHomClass</span>.<span class=\"name\">uniformContinuous_of_bound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝓕</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHomClass\">AddMonoidHomClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">𝓕</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">E</span>), <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#AddMonoidHomClass.uniformContinuous_of_bound","kind":"theorem","line":110,"name":"AddMonoidHomClass.uniformContinuous_of_bound","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#MonoidHomClass.uniformContinuous_of_bound\"><span class=\"name\">MonoidHomClass</span>.<span class=\"name\">uniformContinuous_of_bound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝓕</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHomClass\">MonoidHomClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">𝓕</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">E</span>), <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#MonoidHomClass.uniformContinuous_of_bound","kind":"theorem","line":110,"name":"MonoidHomClass.uniformContinuous_of_bound","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L110-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#AddMonoidHomClass.continuous_of_bound\"><span class=\"name\">AddMonoidHomClass</span>.<span class=\"name\">continuous_of_bound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝓕</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHomClass\">AddMonoidHomClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">𝓕</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">E</span>), <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></div></div>","info":{"doc":"A homomorphism `f` of seminormed groups is continuous, if there exists a constant\n`C` such that for all `x`, one has `‖f x‖ ≤ C * ‖x‖`. ","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#AddMonoidHomClass.continuous_of_bound","kind":"theorem","line":104,"name":"AddMonoidHomClass.continuous_of_bound","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L104-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#MonoidHomClass.continuous_of_bound\"><span class=\"name\">MonoidHomClass</span>.<span class=\"name\">continuous_of_bound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝓕</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHomClass\">MonoidHomClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">𝓕</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">E</span>), <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></div></div>","info":{"doc":"A homomorphism `f` of seminormed groups is continuous, if there exists a constant `C` such that\nfor all `x`, one has `‖f x‖ ≤ C * ‖x‖`. ","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#MonoidHomClass.continuous_of_bound","kind":"theorem","line":102,"name":"MonoidHomClass.continuous_of_bound","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L102-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.norm_sub_le_of_le\"><span class=\"name\">LipschitzWith</span>.<span class=\"name\">norm_sub_le_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">C</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">r</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.norm_sub_le_of_le","kind":"theorem","line":97,"name":"LipschitzWith.norm_sub_le_of_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L97-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.norm_div_le_of_le\"><span class=\"name\">LipschitzWith</span>.<span class=\"name\">norm_div_le_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">C</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">r</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.norm_div_le_of_le","kind":"theorem","line":97,"name":"LipschitzWith.norm_div_le_of_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L97-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.norm_sub_le\"><span class=\"name\">LipschitzWith</span>.<span class=\"name\">norm_sub_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">C</span> <span class=\"fn\">f</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">E</span>), <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.norm_sub_le","kind":"theorem","line":95,"name":"LipschitzWith.norm_sub_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L95-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.norm_div_le\"><span class=\"name\">LipschitzWith</span>.<span class=\"name\">norm_div_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">C</span> <span class=\"fn\">f</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">E</span>), <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></span></div></div>","info":{"doc":"**Alias** of the forward direction of `lipschitzWith_iff_norm_div_le`.","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzWith.norm_div_le","kind":"theorem","line":93,"name":"LipschitzWith.norm_div_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L93-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzWith_iff_norm_sub_le\"><span class=\"name\">lipschitzWith_iff_norm_sub_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">C</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">E</span>), <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzWith_iff_norm_sub_le","kind":"theorem","line":88,"name":"lipschitzWith_iff_norm_sub_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L88-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzWith_iff_norm_div_le\"><span class=\"name\">lipschitzWith_iff_norm_div_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">C</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">E</span>), <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzWith_iff_norm_div_le","kind":"theorem","line":88,"name":"lipschitzWith_iff_norm_div_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L88-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.norm_sub_le_of_le\"><span class=\"name\">LipschitzOnWith</span>.<span class=\"name\">norm_sub_le_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">C</span> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">r</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.norm_sub_le_of_le","kind":"theorem","line":83,"name":"LipschitzOnWith.norm_sub_le_of_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L83-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.norm_div_le_of_le\"><span class=\"name\">LipschitzOnWith</span>.<span class=\"name\">norm_div_le_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">E</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">C</span> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">r</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.norm_div_le_of_le","kind":"theorem","line":83,"name":"LipschitzOnWith.norm_div_le_of_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L83-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.norm_sub_le\"><span class=\"name\">LipschitzOnWith</span>.<span class=\"name\">norm_sub_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">C</span> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">∀ ⦃<span class=\"fn\">x</span> : <span class=\"fn\">E</span>⦄, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span> → <span class=\"fn\">∀ ⦃<span class=\"fn\">y</span> : <span class=\"fn\">E</span>⦄, <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span> → <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.norm_sub_le","kind":"theorem","line":81,"name":"LipschitzOnWith.norm_sub_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.norm_div_le\"><span class=\"name\">LipschitzOnWith</span>.<span class=\"name\">norm_div_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">C</span> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">∀ ⦃<span class=\"fn\">x</span> : <span class=\"fn\">E</span>⦄, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span> → <span class=\"fn\">∀ ⦃<span class=\"fn\">y</span> : <span class=\"fn\">E</span>⦄, <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span> → <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></span></span></span></span></div></div>","info":{"doc":"**Alias** of the forward direction of `lipschitzOnWith_iff_norm_div_le`.","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#LipschitzOnWith.norm_div_le","kind":"theorem","line":79,"name":"LipschitzOnWith.norm_div_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L79-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzOnWith_iff_norm_sub_le\"><span class=\"name\">lipschitzOnWith_iff_norm_sub_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">C</span> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ ⦃<span class=\"fn\">x</span> : <span class=\"fn\">E</span>⦄, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span> → <span class=\"fn\">∀ ⦃<span class=\"fn\">y</span> : <span class=\"fn\">E</span>⦄, <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span> → <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzOnWith_iff_norm_sub_le","kind":"theorem","line":74,"name":"lipschitzOnWith_iff_norm_sub_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L74-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzOnWith_iff_norm_div_le\"><span class=\"name\">lipschitzOnWith_iff_norm_div_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">E</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzOnWith\">LipschitzOnWith</a> <span class=\"fn\">C</span> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ ⦃<span class=\"fn\">x</span> : <span class=\"fn\">E</span>⦄, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span> → <span class=\"fn\">∀ ⦃<span class=\"fn\">y</span> : <span class=\"fn\">E</span>⦄, <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span> → <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#lipschitzOnWith_iff_norm_div_le","kind":"theorem","line":74,"name":"lipschitzOnWith_iff_norm_div_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L74-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#AddMonoidHomClass.lipschitz_of_bound\"><span class=\"name\">AddMonoidHomClass</span>.<span class=\"name\">lipschitz_of_bound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝓕</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHomClass\">AddMonoidHomClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">𝓕</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">E</span>), <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\"><span class=\"fn\">C</span>.<a href=\"./Mathlib/Data/NNReal/Defs.html#Real.toNNReal\">toNNReal</a></span> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></div></div>","info":{"doc":"A homomorphism `f` of seminormed groups is Lipschitz, if there exists a constant\n`C` such that for all `x`, one has `‖f x‖ ≤ C * ‖x‖`. The analogous condition for a linear map of\n(semi)normed spaces is in `Mathlib/Analysis/NormedSpace/OperatorNorm.lean`. ","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#AddMonoidHomClass.lipschitz_of_bound","kind":"theorem","line":67,"name":"AddMonoidHomClass.lipschitz_of_bound","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L67-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#MonoidHomClass.lipschitz_of_bound\"><span class=\"name\">MonoidHomClass</span>.<span class=\"name\">lipschitz_of_bound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝓕</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHomClass\">MonoidHomClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">𝓕</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">E</span>), <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\"><span class=\"fn\">C</span>.<a href=\"./Mathlib/Data/NNReal/Defs.html#Real.toNNReal\">toNNReal</a></span> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></div></div>","info":{"doc":"A homomorphism `f` of seminormed groups is Lipschitz, if there exists a constant `C` such that\nfor all `x`, one has `‖f x‖ ≤ C * ‖x‖`. The analogous condition for a linear map of\n(semi)normed spaces is in `Mathlib/Analysis/NormedSpace/OperatorNorm.lean`. ","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#MonoidHomClass.lipschitz_of_bound","kind":"theorem","line":64,"name":"MonoidHomClass.lipschitz_of_bound","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L64-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_sub_eq_dist_add_right\"><span class=\"name\">dist_sub_eq_dist_add_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a</span> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_sub_eq_dist_add_right","kind":"theorem","line":56,"name":"dist_sub_eq_dist_add_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L56-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_div_eq_dist_mul_right\"><span class=\"name\">dist_div_eq_dist_mul_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a</span> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">c</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span>) <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_div_eq_dist_mul_right","kind":"theorem","line":56,"name":"dist_div_eq_dist_mul_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L56-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_sub_eq_dist_add_left\"><span class=\"name\">dist_sub_eq_dist_add_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>) <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a</span> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_sub_eq_dist_add_left","kind":"theorem","line":52,"name":"dist_sub_eq_dist_add_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L52-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_div_eq_dist_mul_left\"><span class=\"name\">dist_div_eq_dist_mul_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>) <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">a</span> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_div_eq_dist_mul_left","kind":"theorem","line":52,"name":"dist_div_eq_dist_mul_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L52-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_add_self_left\"><span class=\"name\">dist_add_self_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">a</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_add_self_left","kind":"theorem","line":48,"name":"dist_add_self_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_mul_self_left\"><span class=\"name\">dist_mul_self_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>) <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">a</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_mul_self_left","kind":"theorem","line":48,"name":"dist_mul_self_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L48-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_add_self_right\"><span class=\"name\">dist_add_self_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">b</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">a</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_add_self_right","kind":"theorem","line":44,"name":"dist_add_self_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_mul_self_right\"><span class=\"name\">dist_mul_self_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">b</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">a</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#dist_mul_self_right","kind":"theorem","line":44,"name":"dist_mul_self_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L44-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#nnnorm_map\"><span class=\"name\">nnnorm_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝓕</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#IsometryClass\">IsometryClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#ZeroHomClass\">ZeroHomClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">𝓕</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#nnnorm_map","kind":"theorem","line":39,"name":"nnnorm_map","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#nnnorm_map'\"><span class=\"name\">nnnorm_map'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝓕</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#IsometryClass\">IsometryClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#OneHomClass\">OneHomClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">𝓕</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‖₊</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#nnnorm_map'","kind":"theorem","line":39,"name":"nnnorm_map'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L39-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#norm_map\"><span class=\"name\">norm_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝓕</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#IsometryClass\">IsometryClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#ZeroHomClass\">ZeroHomClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">𝓕</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#norm_map","kind":"theorem","line":34,"name":"norm_map","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#norm_map'\"><span class=\"name\">norm_map'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝓕</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#IsometryClass\">IsometryClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#OneHomClass\">OneHomClass</a> <span class=\"fn\">𝓕</span> <span class=\"fn\">E</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">𝓕</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#norm_map'","kind":"theorem","line":34,"name":"norm_map'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L34-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#Isometry.norm_map_of_map_zero\"><span class=\"name\">Isometry</span>.<span class=\"name\">norm_map_of_map_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#Isometry\">Isometry</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#Isometry.norm_map_of_map_zero","kind":"theorem","line":30,"name":"Isometry.norm_map_of_map_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#Isometry.norm_map_of_map_one\"><span class=\"name\">Isometry</span>.<span class=\"name\">norm_map_of_map_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">E</span> → <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Isometry.html#Isometry\">Isometry</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">E</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#Isometry.norm_map_of_map_one","kind":"theorem","line":30,"name":"Isometry.norm_map_of_map_one","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L30-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#NormedAddGroup.to_isIsometricVAdd_right\"><span class=\"name\">NormedAddGroup</span>.<span class=\"name\">to_isIsometricVAdd_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddGroup\">SeminormedAddGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/IsometricSMul.html#IsIsometricVAdd\">IsIsometricVAdd</a> <span class=\"fn\">E</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a> <span class=\"fn\">E</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#NormedAddGroup.to_isIsometricVAdd_right","kind":"instance","line":26,"name":"NormedAddGroup.to_isIsometricVAdd_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/Uniform.html#NormedGroup.to_isIsometricSMul_right\"><span class=\"name\">NormedGroup</span>.<span class=\"name\">to_isIsometricSMul_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedGroup\">SeminormedGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/IsometricSMul.html#IsIsometricSMul\">IsIsometricSMul</a> <span class=\"fn\">E</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <span class=\"fn\">E</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Analysis/Normed/Group/Uniform.html#NormedGroup.to_isIsometricSMul_right","kind":"instance","line":26,"name":"NormedGroup.to_isIsometricSMul_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Analysis/Normed/Group/Uniform.lean#L26-L28"}}],"imports":["Init","Mathlib.Analysis.Normed.Group.Continuity","Mathlib.Topology.Algebra.IsUniformGroup.Basic","Mathlib.Topology.MetricSpace.Algebra","Mathlib.Topology.MetricSpace.IsometricSMul"],"instances":[{"className":"IsIsometricSMul","name":"NormedGroup.to_isIsometricSMul_right","typeNames":["MulOpposite"]},{"className":"IsIsometricVAdd","name":"NormedAddGroup.to_isIsometricVAdd_right","typeNames":["AddOpposite"]},{"className":"IsIsometricSMul","name":"NormedGroup.to_isIsometricSMul_left","typeNames":[]},{"className":"IsIsometricVAdd","name":"NormedAddGroup.to_isIsometricVAdd_left","typeNames":[]},{"className":"LipschitzMul","name":"SeminormedCommGroup.to_lipschitzMul","typeNames":[]},{"className":"LipschitzAdd","name":"SeminormedAddCommGroup.to_lipschitzAdd","typeNames":[]},{"className":"IsUniformGroup","name":"SeminormedCommGroup.to_isUniformGroup","typeNames":[]},{"className":"IsUniformAddGroup","name":"SeminormedAddCommGroup.to_isUniformAddGroup","typeNames":[]},{"className":"IsTopologicalGroup","name":"SeminormedCommGroup.toIsTopologicalGroup","typeNames":[]},{"className":"IsTopologicalAddGroup","name":"SeminormedAddCommGroup.toIsTopologicalAddGroup","typeNames":[]},{"className":"Norm","name":"SeparationQuotient.instMulNorm","typeNames":["SeparationQuotient"]},{"className":"Norm","name":"SeparationQuotient.instNorm","typeNames":["SeparationQuotient"]},{"className":"NormedCommGroup","name":"SeparationQuotient.instNormedCommGroup","typeNames":["SeparationQuotient"]},{"className":"NormedAddCommGroup","name":"SeparationQuotient.instNormedAddCommGroup","typeNames":["SeparationQuotient"]}],"name":"Mathlib.Analysis.Normed.Group.Uniform"}