{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.directoryDependencyCheck\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">directoryDependencyCheck</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mainModule</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span></div></div>","info":{"doc":"The `directoryDependency` linter detects detects imports between directories that are supposed to be\nindependent. If this is the case, it emits a warning.\n","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.directoryDependencyCheck","kind":"def","line":621,"name":"Mathlib.Linter.directoryDependencyCheck","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DirectoryDependency.lean#L621-L680"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.overrideAllowedImportDirs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DirectoryDependency</span>.<span class=\"name\">overrideAllowedImportDirs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel\">NamePrefixRel</a></div></div>","info":{"doc":"`overrideAllowedImportDirs` relates module prefixes, specifying that modules with the first\nprefix are allowed to import modules with the second prefix, even if disallowed in\n`forbiddenImportDirs`.\n\nFor example, ``(`Mathlib.Algebra.Notation, `Mathlib.Algebra)`` is in `forbiddenImportDirs` and\n``(`Mathlib.Algebra.Notation, `Mathlib.Algebra.Notation)`` is in `overrideAllowedImportDirs`\nbecause modules in `Mathlib/Algebra/Notation.lean` cannot import modules in `Mathlib.Algebra` that are\noutside `Mathlib/Algebra/Notation.lean`.\n","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.overrideAllowedImportDirs","kind":"def","line":577,"name":"Mathlib.Linter.DirectoryDependency.overrideAllowedImportDirs","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DirectoryDependency.lean#L577-L596"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.forbiddenImportDirs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DirectoryDependency</span>.<span class=\"name\">forbiddenImportDirs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel\">NamePrefixRel</a></div></div>","info":{"doc":"`forbiddenImportDirs` relates module prefixes, specifying that modules with the first prefix\nshould not import modules with the second prefix (except if specifically allowed in\n`overrideAllowedImportDirs`).\n\nFor example, ``(`Mathlib.Algebra.Notation, `Mathlib.Algebra)`` is in `forbiddenImportDirs` and\n``(`Mathlib.Algebra.Notation, `Mathlib.Algebra.Notation)`` is in `overrideAllowedImportDirs`\nbecause modules in `Mathlib/Algebra/Notation.lean` cannot import modules in `Mathlib.Algebra` that are\noutside `Mathlib/Algebra/Notation.lean`.\n","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.forbiddenImportDirs","kind":"def","line":261,"name":"Mathlib.Linter.DirectoryDependency.forbiddenImportDirs","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DirectoryDependency.lean#L261-L575"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.allowedImportDirs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DirectoryDependency</span>.<span class=\"name\">allowedImportDirs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel\">NamePrefixRel</a></div></div>","info":{"doc":"`allowedImportDirs` relates module prefixes, specifying that modules with the first prefix\nare only allowed to import modules in the second directory.\nFor directories which are low in the import hierarchy, this opt-out approach is both more ergonomic\n(fewer updates needed) and needs less configuration.\n\nWe always allow imports of `Init`, `Lean`, `Std`, `Qq` and\n`Mathlib.Init` (as well as their transitive dependencies.)\n","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.allowedImportDirs","kind":"def","line":159,"name":"Mathlib.Linter.DirectoryDependency.allowedImportDirs","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DirectoryDependency.lean#L159-L259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.getAllLeft\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DirectoryDependency</span>.<span class=\"name\">NamePrefixRel</span>.<span class=\"name\">getAllLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel\">NamePrefixRel</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">Lean.NameSet</a></div></div>","info":{"doc":"Look up all names `m` which are values of some prefix of `n` under this relation. ","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.getAllLeft","kind":"def","line":143,"name":"Mathlib.Linter.DirectoryDependency.NamePrefixRel.getAllLeft","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DirectoryDependency.lean#L143-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.contains\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DirectoryDependency</span>.<span class=\"name\">NamePrefixRel</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel\">NamePrefixRel</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n₁ </span><span class=\"fn\">n₂</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Is a prefix of `n₁` related to a prefix of `n₂`? ","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.contains","kind":"def","line":140,"name":"Mathlib.Linter.DirectoryDependency.NamePrefixRel.contains","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DirectoryDependency.lean#L140-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.containsKey\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DirectoryDependency</span>.<span class=\"name\">NamePrefixRel</span>.<span class=\"name\">containsKey</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel\">NamePrefixRel</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Does `r` contain any entries with key `n`? ","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.containsKey","kind":"def","line":137,"name":"Mathlib.Linter.DirectoryDependency.NamePrefixRel.containsKey","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DirectoryDependency.lean#L137-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.findAny\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DirectoryDependency</span>.<span class=\"name\">NamePrefixRel</span>.<span class=\"name\">findAny</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel\">NamePrefixRel</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n₁</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ns</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></div></div>","info":{"doc":"Get a prefix of `n₁` that is related to any prefix of the names in `ns`; return the prefixes.\n\nThis should be more efficient than iterating over all names in `ns` and calling `find`,\nsince it doesn't need to worry about overlapping prefixes.\n","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.findAny","kind":"def","line":121,"name":"Mathlib.Linter.DirectoryDependency.NamePrefixRel.findAny","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DirectoryDependency.lean#L121-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.find\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DirectoryDependency</span>.<span class=\"name\">NamePrefixRel</span>.<span class=\"name\">find</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel\">NamePrefixRel</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n₁ </span><span class=\"fn\">n₂</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></div></div>","info":{"doc":"Get a prefix of `n₁` that is related to a prefix of `n₂`. ","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.find","kind":"def","line":111,"name":"Mathlib.Linter.DirectoryDependency.NamePrefixRel.find","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DirectoryDependency.lean#L111-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.ofArray\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DirectoryDependency</span>.<span class=\"name\">NamePrefixRel</span>.<span class=\"name\">ofArray</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel\">NamePrefixRel</a></div></div>","info":{"doc":"Convert an array of prefix pairs to a `NamePrefixRel`. ","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.ofArray","kind":"def","line":106,"name":"Mathlib.Linter.DirectoryDependency.NamePrefixRel.ofArray","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DirectoryDependency.lean#L106-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.insert\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DirectoryDependency</span>.<span class=\"name\">NamePrefixRel</span>.<span class=\"name\">insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel\">NamePrefixRel</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n₁ </span><span class=\"fn\">n₂</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel\">NamePrefixRel</a></div></div>","info":{"doc":"Make all names with prefix `n₁` related to names with prefix `n₂`. ","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.insert","kind":"def","line":100,"name":"Mathlib.Linter.DirectoryDependency.NamePrefixRel.insert","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DirectoryDependency.lean#L100-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.instEmptyCollection\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DirectoryDependency</span>.<span class=\"name\">NamePrefixRel</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <a href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel\">NamePrefixRel</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.instEmptyCollection","kind":"instance","line":98,"name":"Mathlib.Linter.DirectoryDependency.NamePrefixRel.instEmptyCollection","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DirectoryDependency.lean#L98-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DirectoryDependency</span>.<span class=\"name\">NamePrefixRel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`NamePrefixRel` is a datatype for storing relations between name prefixes.\n\nThat is, `R : NamePrefixRel` is supposed to answer given names `(n₁, n₂)` whether there are any\nprefixes `n₁'` of `n₁` and `n₂'` of `n₂` such that `n₁' R n₂'`.\n\nThe current implementation is a `NameMap` of `NameSet`s, testing each prefix of `n₁` and `n₂` in\nturn. This can probably be optimized.\n","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel","kind":"def","line":86,"name":"Mathlib.Linter.DirectoryDependency.NamePrefixRel","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DirectoryDependency.lean#L86-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.linter.directoryDependency\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">directoryDependency</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The `directoryDependency` linter detects detects imports between directories that are supposed to be\nindependent. If this is the case, it emits a warning.\n","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.linter.directoryDependency","kind":"opaque","line":75,"name":"Mathlib.Linter.linter.directoryDependency","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DirectoryDependency.lean#L75-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Lean.Environment.importPath\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">importPath</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imported</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Find the dependency chain, starting at a module that imports `imported`, and ends with the\ncurrent module.\n\nThe path only contains the intermediate steps: it excludes `imported` and the current module.\n","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Lean.Environment.importPath","kind":"def","line":54,"name":"Lean.Environment.importPath","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DirectoryDependency.lean#L54-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Lean.Name.prefixToName\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">prefixToName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ns</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Find a name in `ns` that starts with prefix `p`. ","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Lean.Name.prefixToName","kind":"def","line":50,"name":"Lean.Name.prefixToName","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DirectoryDependency.lean#L50-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Lean.Name.collectPrefixes\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">collectPrefixes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ns</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">NameSet</a></div></div>","info":{"doc":"Collect all prefixes of names in `ns` into a single `NameSet`. ","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Lean.Name.collectPrefixes","kind":"def","line":46,"name":"Lean.Name.collectPrefixes","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DirectoryDependency.lean#L46-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Lean.Name.prefix?\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">prefix?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Return the immediate prefix of `n` (if any). ","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Lean.Name.prefix?","kind":"def","line":39,"name":"Lean.Name.prefix?","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DirectoryDependency.lean#L39-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Lean.Name.prefixes\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">prefixes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">NameSet</a></div></div>","info":{"doc":"Make a `NameSet` containing all prefixes of `n`. ","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Lean.Name.prefixes","kind":"def","line":32,"name":"Lean.Name.prefixes","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DirectoryDependency.lean#L32-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Lean.Name.findPrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">findPrefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Find the longest prefix of `n` such that `f` returns `some` (or return `none` otherwise). ","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Lean.Name.findPrefix","kind":"def","line":25,"name":"Lean.Name.findPrefix","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DirectoryDependency.lean#L25-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#findImports\"><span class=\"name\">findImports</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">path</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span></div></div>","info":{"doc":"Parse all imports in a text file at `path` and return just their names:\nthis is just a thin wrapper around `Lean.parseImports'`.\nOmit `Init` (which is part of the prelude). ","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#findImports","kind":"def","line":18,"name":"findImports","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DirectoryDependency.lean#L18-L23"}}],"imports":["Init","Lean.Elab.Command","Lean.Elab.ParseImportsFast"],"instances":[{"className":"EmptyCollection","name":"Mathlib.Linter.DirectoryDependency.NamePrefixRel.instEmptyCollection","typeNames":["Mathlib.Linter.DirectoryDependency.NamePrefixRel"]}],"name":"Mathlib.Tactic.Linter.DirectoryDependency"}