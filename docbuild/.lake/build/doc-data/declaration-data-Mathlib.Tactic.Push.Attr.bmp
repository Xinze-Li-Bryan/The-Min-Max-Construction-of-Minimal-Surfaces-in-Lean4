{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.pushAttr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Push</span>.<span class=\"name\">pushAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"The `push` attribute is used to tag lemmas that \"push\" a constant into an expression.\n\nFor example:\n```lean\n@[push] theorem log_mul (hx : x ≠ 0) (hy : y ≠ 0) : log (x * y) = log x + log y\n@[push] theorem log_abs : log |x| = log x\n\n@[push] theorem not_imp (p q : Prop) : ¬(p → q) ↔ p ∧ ¬q\n@[push] theorem not_iff (p q : Prop) : ¬(p ↔ q) ↔ (p ∧ ¬q) ∨ (¬p ∧ q)\n@[push] theorem not_not (p : Prop) : ¬ ¬p ↔ p\n@[push] theorem not_le : ¬a ≤ b ↔ b < a\n```\n\nNote that some `push` lemmas don't push the constant away from the head (`log_abs`) and\nsome `push` lemmas cancel the constant out (`not_not` and `not_le`).\nFor the other lemmas that are \"genuine\" `push` lemmas, a `pull` attribute is automatically added\nin the reverse direction. To not add a `pull` tag, use `@[push only]`.\n\nTo tag the reverse direction of the lemma, use `@[push ←]`.\n","docLink":"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.pushAttr","kind":"def","line":81,"name":"Mathlib.Tactic.Push.pushAttr","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Push/Attr.lean#L81-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.pullExt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Push</span>.<span class=\"name\">pullExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ScopedEnvExtension.html#Lean.SimpleScopedEnvExtension\">Lean.SimpleScopedEnvExtension</a> <a href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.PullTheorem\">PullTheorem</a> <span class=\"fn\">(<a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <a href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.PullTheorem\">PullTheorem</a>)</span></span></div></div>","info":{"doc":"The `pull` environment extension ","docLink":"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.pullExt","kind":"opaque","line":74,"name":"Mathlib.Tactic.Push.pullExt","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Push/Attr.lean#L74-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.PullTheorem\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Push</span>.<span class=\"name\">PullTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A theorem for the `pull` tactic ","docLink":"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.PullTheorem","kind":"def","line":71,"name":"Mathlib.Tactic.Push.PullTheorem","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Push/Attr.lean#L71-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.isPullThm.containsHead\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Push</span>.<span class=\"name\">isPullThm</span>.<span class=\"name\">containsHead</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head\">Head</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks if the expression has the head in any subexpression.\nWe don't need to check this for `.lambda`, because the term being a function\nis sufficient for `pull fun _ ↦ _` to be applicable. ","docLink":"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.isPullThm.containsHead","kind":"def","line":66,"name":"Mathlib.Tactic.Push.isPullThm.containsHead","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Push/Attr.lean#L66-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.isPullThm\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Push</span>.<span class=\"name\">isPullThm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head\">Head</a>)</span></span></div></div>","info":{"doc":"Checks if the theorem is suitable for the `pull` tactic. That is,\ncheck if it is of the form `x = f ...` where `x` contains the head `f`,\nbut `f` is not the head of `x`.\n","docLink":"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.isPullThm","kind":"def","line":48,"name":"Mathlib.Tactic.Push.isPullThm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Push/Attr.lean#L48-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.pushExt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Push</span>.<span class=\"name\">pushExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ScopedEnvExtension.html#Lean.SimpleScopedEnvExtension\">Lean.SimpleScopedEnvExtension</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a> <span class=\"fn\">(<a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Lean.Meta.SimpTheorem</a>)</span></span></div></div>","info":{"doc":"The `push` environment extension ","docLink":"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.pushExt","kind":"opaque","line":41,"name":"Mathlib.Tactic.Push.pushExt","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Push/Attr.lean#L41-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head.ofExpr?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Push</span>.<span class=\"name\">Head</span>.<span class=\"name\">ofExpr?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head\">Head</a></span></span></div></div>","info":{"doc":"Returns the head of an expression. ","docLink":"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head.ofExpr?","kind":"def","line":34,"name":"Mathlib.Tactic.Push.Head.ofExpr?","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Push/Attr.lean#L34-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.instToStringHead\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Push</span>.<span class=\"name\">instToStringHead</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head\">Head</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.instToStringHead","kind":"instance","line":32,"name":"Mathlib.Tactic.Push.instToStringHead","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Push/Attr.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head.toString\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Push</span>.<span class=\"name\">Head</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head\">Head</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Converts a `Head` to a string. ","docLink":"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head.toString","kind":"def","line":26,"name":"Mathlib.Tactic.Push.Head.toString","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Push/Attr.lean#L26-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.instBEqHead.beq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Push</span>.<span class=\"name\">instBEqHead</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head\">Head</a> → <a href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head\">Head</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.instBEqHead.beq","kind":"def","line":24,"name":"Mathlib.Tactic.Push.instBEqHead.beq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Push/Attr.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.instBEqHead\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Push</span>.<span class=\"name\">instBEqHead</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head\">Head</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.instBEqHead","kind":"instance","line":24,"name":"Mathlib.Tactic.Push.instBEqHead","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Push/Attr.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.instInhabitedHead.default\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Push</span>.<span class=\"name\">instInhabitedHead</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head\">Head</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.instInhabitedHead.default","kind":"def","line":24,"name":"Mathlib.Tactic.Push.instInhabitedHead.default","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Push/Attr.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.instInhabitedHead\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Push</span>.<span class=\"name\">instInhabitedHead</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head\">Head</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.instInhabitedHead","kind":"instance","line":24,"name":"Mathlib.Tactic.Push.instInhabitedHead","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Push/Attr.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head.forall\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Push</span>.<span class=\"name\">Head</span>.<span class=\"name\">forall</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head\">Head</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head.forall","kind":"ctor","line":23,"name":"Mathlib.Tactic.Push.Head.forall","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Push/Attr.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head.lambda\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Push</span>.<span class=\"name\">Head</span>.<span class=\"name\">lambda</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head\">Head</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head.lambda","kind":"ctor","line":22,"name":"Mathlib.Tactic.Push.Head.lambda","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Push/Attr.lean#L22-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head.const\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Push</span>.<span class=\"name\">Head</span>.<span class=\"name\">const</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head\">Head</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head.const","kind":"ctor","line":21,"name":"Mathlib.Tactic.Push.Head.const","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Push/Attr.lean#L21-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Push</span>.<span class=\"name\">Head</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The type for a constant to be pushed by `push`. ","docLink":"./Mathlib/Tactic/Push/Attr.html#Mathlib.Tactic.Push.Head","kind":"inductive","line":19,"name":"Mathlib.Tactic.Push.Head","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Push/Attr.lean#L19-L24"}}],"imports":["Init","Mathlib.Lean.Expr.Basic"],"instances":[{"className":"Inhabited","name":"Mathlib.Tactic.Push.instInhabitedHead","typeNames":["Mathlib.Tactic.Push.Head"]},{"className":"BEq","name":"Mathlib.Tactic.Push.instBEqHead","typeNames":["Mathlib.Tactic.Push.Head"]},{"className":"ToString","name":"Mathlib.Tactic.Push.instToStringHead","typeNames":["Mathlib.Tactic.Push.Head"]}],"name":"Mathlib.Tactic.Push.Attr"}