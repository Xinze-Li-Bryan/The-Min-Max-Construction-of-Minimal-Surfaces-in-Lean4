{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#Rat.cast_eq_id\"><span class=\"name\">Rat</span>.<span class=\"name\">cast_eq_id</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Classes/RatCast.html#Rat.cast\">Rat.cast</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#id\">id</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Rat/Init.html#Rat.cast_eq_id","kind":"theorem","line":81,"name":"Rat.cast_eq_id","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Rat/Init.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#Rat.cast_id\"><span class=\"name\">Rat</span>.<span class=\"name\">cast_id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">ℚ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Rat/Init.html#Rat.cast_id","kind":"theorem","line":80,"name":"Rat.cast_id","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Rat/Init.lean#L80-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRat.cast_eq_id\"><span class=\"name\">NNRat</span>.<span class=\"name\">cast_eq_id</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRat.cast\">NNRat.cast</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#id\">id</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Rat/Init.html#NNRat.cast_eq_id","kind":"theorem","line":74,"name":"NNRat.cast_eq_id","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Rat/Init.lean#L74-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRat.cast_id\"><span class=\"name\">NNRat</span>.<span class=\"name\">cast_id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Mathlib/Data/Rat/Init.html#NNRat\">ℚ≥0</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Rat/Init.html#NNRat.cast_id","kind":"theorem","line":73,"name":"NNRat.cast_id","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Rat/Init.lean#L73-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRat.den_mk\"><span class=\"name\">NNRat</span>.<span class=\"name\">den_mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">ℚ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hq</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRat.den\">den</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\">q</span>, <span class=\"fn\">hq</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">q</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.den\">den</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Rat/Init.html#NNRat.den_mk","kind":"theorem","line":71,"name":"NNRat.den_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Rat/Init.lean#L71-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRat.num_mk\"><span class=\"name\">NNRat</span>.<span class=\"name\">num_mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">ℚ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hq</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRat.num\">num</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\">q</span>, <span class=\"fn\">hq</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">q</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.num\">num</a></span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Rat/Init.html#NNRat.num_mk","kind":"theorem","line":70,"name":"NNRat.num_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Rat/Init.lean#L70-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRat.den\"><span class=\"name\">NNRat</span>.<span class=\"name\">den</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <a href=\"./Mathlib/Data/Rat/Init.html#NNRat\">ℚ≥0</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>","info":{"doc":"The denominator of a nonnegative rational. ","docLink":"./Mathlib/Data/Rat/Init.html#NNRat.den","kind":"def","line":67,"name":"NNRat.den","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Rat/Init.lean#L67-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRat.num\"><span class=\"name\">NNRat</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <a href=\"./Mathlib/Data/Rat/Init.html#NNRat\">ℚ≥0</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>","info":{"doc":"The numerator of a nonnegative rational. ","docLink":"./Mathlib/Data/Rat/Init.html#NNRat.num","kind":"def","line":64,"name":"NNRat.num","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Rat/Init.lean#L64-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#Rat.instNNRatCast\"><span class=\"name\">Rat</span>.<span class=\"name\">instNNRatCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRatCast\">NNRatCast</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">ℚ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Rat/Init.html#Rat.instNNRatCast","kind":"instance","line":58,"name":"Rat.instNNRatCast","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Rat/Init.lean#L58-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRatCast.toCoeHTCT\"><span class=\"name\">NNRatCast</span>.<span class=\"name\">toCoeHTCT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRatCast\">NNRatCast</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeHTCT\">CoeHTCT</a> <a href=\"./Mathlib/Data/Rat/Init.html#NNRat\">ℚ≥0</a> <span class=\"fn\">K</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Rat/Init.html#NNRatCast.toCoeHTCT","kind":"instance","line":56,"name":"NNRatCast.toCoeHTCT","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Rat/Init.lean#L56-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRatCast.toCoeTail\"><span class=\"name\">NNRatCast</span>.<span class=\"name\">toCoeTail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRatCast\">NNRatCast</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeTail\">CoeTail</a> <a href=\"./Mathlib/Data/Rat/Init.html#NNRat\">ℚ≥0</a> <span class=\"fn\">K</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Rat/Init.html#NNRatCast.toCoeTail","kind":"instance","line":53,"name":"NNRatCast.toCoeTail","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Rat/Init.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRat.cast\"><span class=\"name\">NNRat</span>.<span class=\"name\">cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRatCast\">NNRatCast</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRat\">ℚ≥0</a> → <span class=\"fn\">K</span></span></div></div>","info":{"doc":"Canonical homomorphism from `ℚ≥0` to a division semiring `K`.\n\nThis is just the bare function in order to aid in creating instances of `DivisionSemiring`. ","docLink":"./Mathlib/Data/Rat/Init.html#NNRat.cast","kind":"def","line":47,"name":"NNRat.cast","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Rat/Init.lean#L47-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRat.instNNRatCast\"><span class=\"name\">NNRat</span>.<span class=\"name\">instNNRatCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRatCast\">NNRatCast</a> <a href=\"./Mathlib/Data/Rat/Init.html#NNRat\">ℚ≥0</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Rat/Init.html#NNRat.instNNRatCast","kind":"instance","line":43,"name":"NNRat.instNNRatCast","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Rat/Init.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRatCast.nnratCast\"><span class=\"name\">NNRatCast</span>.<span class=\"name\">nnratCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRatCast\">NNRatCast</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRat\">ℚ≥0</a> → <span class=\"fn\">K</span></span></div></div>","info":{"doc":"The canonical homomorphism `ℚ≥0 → K`.\n\nDo not use directly. Use the coercion instead. ","docLink":"./Mathlib/Data/Rat/Init.html#NNRatCast.nnratCast","kind":"def","line":41,"name":"NNRatCast.nnratCast","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Rat/Init.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRatCast.mk\"><span class=\"name\">NNRatCast</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nnratCast</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRat\">ℚ≥0</a> → <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Rat/Init.html#NNRatCast\">NNRatCast</a> <span class=\"fn\">K</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Rat/Init.html#NNRatCast.mk","kind":"ctor","line":37,"name":"NNRatCast.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Rat/Init.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRatCast\"><span class=\"name\">NNRatCast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>","info":{"doc":"Typeclass for the canonical homomorphism `ℚ≥0 → K`.\n\nThis should be considered as a notation typeclass. The sole purpose of this typeclass is to be\nextended by `DivisionSemiring`. ","docLink":"./Mathlib/Data/Rat/Init.html#NNRatCast","kind":"class","line":33,"name":"NNRatCast","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Rat/Init.lean#L33-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#«termℚ≥0»\"><span class=\"name\">«termℚ≥0»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Nonnegative rational numbers. ","docLink":"./Mathlib/Data/Rat/Init.html#«termℚ≥0»","kind":"def","line":24,"name":"«termℚ≥0»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Rat/Init.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#NNRat\"><span class=\"name\">NNRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Nonnegative rational numbers. ","docLink":"./Mathlib/Data/Rat/Init.html#NNRat","kind":"def","line":21,"name":"NNRat","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Rat/Init.lean#L21-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Rat/Init.html#termℚ\"><span class=\"name\">termℚ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Rational numbers, implemented as a pair of integers `num / den` such that the\ndenominator is positive and the numerator and denominator are coprime.\n","docLink":"./Mathlib/Data/Rat/Init.html#termℚ","kind":"def","line":19,"name":"termℚ","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Rat/Init.lean#L19-L19"}}],"imports":["Init","Mathlib.Data.Nat.Notation","Mathlib.Tactic.Lemma","Mathlib.Tactic.TypeStar","Batteries.Classes.RatCast"],"instances":[{"className":"NNRatCast","name":"NNRat.instNNRatCast","typeNames":["NNRat"]},{"className":"CoeTail","name":"NNRatCast.toCoeTail","typeNames":["NNRat"]},{"className":"CoeHTCT","name":"NNRatCast.toCoeHTCT","typeNames":["NNRat"]},{"className":"NNRatCast","name":"Rat.instNNRatCast","typeNames":["Rat"]}],"name":"Mathlib.Data.Rat.Init"}