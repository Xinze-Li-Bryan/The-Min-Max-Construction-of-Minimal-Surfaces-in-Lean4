{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/ToBatteries.html#Mathlib.Meta.FunProp.headBetaThroughLet\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">headBetaThroughLet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>","info":{"doc":"Beta reduces head of an expression, `(fun x => e) a` ==> `e[x/a]`. This version applies\narguments through let bindings without inlining them.\n\nExample\n```\nheadBeta' ((fun x => let y := x * x; fun z => x + y + z) a b)\n==>\nlet y := a * a; a + y + b\n```\n","docLink":"./Mathlib/Tactic/FunProp/ToBatteries.html#Mathlib.Meta.FunProp.headBetaThroughLet","kind":"def","line":141,"name":"Mathlib.Meta.FunProp.headBetaThroughLet","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/ToBatteries.lean#L141-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/ToBatteries.html#Mathlib.Meta.FunProp.betaThroughLet\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">betaThroughLet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>","info":{"doc":"Apply the given arguments to `f`, beta-reducing if `f` is a lambda expression. This variant\ndoes beta-reduction through let bindings without inlining them.\n\nExample\n```\nbeta' (fun x => let y := x * x; fun z => x + y + z) #[a,b]\n==>\nlet y := a * a; a + y + b\n```\n","docLink":"./Mathlib/Tactic/FunProp/ToBatteries.html#Mathlib.Meta.FunProp.betaThroughLet","kind":"def","line":128,"name":"Mathlib.Meta.FunProp.betaThroughLet","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/ToBatteries.lean#L128-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/ToBatteries.html#Mathlib.Meta.FunProp.etaExpand1\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">etaExpand1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"Eta expand `f` in only one variable and reduce in others.\n\nExamples:\n```\n  f                ==> fun x => f x\n  fun x y => f x y ==> fun x => f x\n  HAdd.hAdd y      ==> fun x => HAdd.hAdd y x\n  HAdd.hAdd        ==> fun x => HAdd.hAdd x\n``` ","docLink":"./Mathlib/Tactic/FunProp/ToBatteries.html#Mathlib.Meta.FunProp.etaExpand1","kind":"def","line":102,"name":"Mathlib.Meta.FunProp.etaExpand1","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/ToBatteries.lean#L102-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/ToBatteries.html#Mathlib.Meta.FunProp.mkUncurryFun\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">mkUncurryFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"Uncurry function `f` in `n` arguments. ","docLink":"./Mathlib/Tactic/FunProp/ToBatteries.html#Mathlib.Meta.FunProp.mkUncurryFun","kind":"def","line":88,"name":"Mathlib.Meta.FunProp.mkUncurryFun","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/ToBatteries.lean#L88-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/ToBatteries.html#Mathlib.Meta.FunProp.mkProdSplitElem\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">mkProdSplitElem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>","info":{"doc":"For an element of a product type(of size`n`) `xs` create an array of all possible projections\ni.e. `#[xs.1, xs.2.1, xs.2.2.1, ..., xs.2..2]` ","docLink":"./Mathlib/Tactic/FunProp/ToBatteries.html#Mathlib.Meta.FunProp.mkProdSplitElem","kind":"def","line":82,"name":"Mathlib.Meta.FunProp.mkProdSplitElem","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/ToBatteries.lean#L82-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/ToBatteries.html#Mathlib.Meta.FunProp.mkProdProj\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">mkProdProj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"For `(x₀, .., xₙ₋₁)` return `xᵢ` but as a product projection.\n\nWe need to know the total size of the product to be considered.\n\nFor example for `xyz : X × Y × Z`\n- `mkProdProj xyz 1 3` returns `xyz.snd.fst`.\n- `mkProdProj xyz 1 2` returns `xyz.snd`.\n","docLink":"./Mathlib/Tactic/FunProp/ToBatteries.html#Mathlib.Meta.FunProp.mkProdProj","kind":"def","line":64,"name":"Mathlib.Meta.FunProp.mkProdProj","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/ToBatteries.lean#L64-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/ToBatteries.html#Mathlib.Meta.FunProp.mkProdElem\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">mkProdElem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"For `#[x₁, .., xₙ]` create `(x₁, .., xₙ)`.\n","docLink":"./Mathlib/Tactic/FunProp/ToBatteries.html#Mathlib.Meta.FunProp.mkProdElem","kind":"def","line":54,"name":"Mathlib.Meta.FunProp.mkProdElem","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/ToBatteries.lean#L54-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/ToBatteries.html#Lean.Expr.swapBVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">swapBVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"Swaps bvars indices `i` and `j`\n\nNOTE: the indices `i` and `j` do not correspond to the `n` in `bvar n`. Rather\nthey behave like indices in `Expr.lowerLooseBVars`, `Expr.liftLooseBVars`, etc.\n\nTODO: This has to have a better implementation, but I'm still beyond confused with how bvar\nindices work\n","docLink":"./Mathlib/Tactic/FunProp/ToBatteries.html#Lean.Expr.swapBVars","kind":"def","line":35,"name":"Lean.Expr.swapBVars","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/ToBatteries.lean#L35-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/ToBatteries.html#Mathlib.Meta.FunProp.isOrderedSubsetOf\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">isOrderedSubsetOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Check if `a` can be obtained by removing elements from `b`. ","docLink":"./Mathlib/Tactic/FunProp/ToBatteries.html#Mathlib.Meta.FunProp.isOrderedSubsetOf","kind":"def","line":17,"name":"Mathlib.Meta.FunProp.isOrderedSubsetOf","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/ToBatteries.lean#L17-L33"}}],"imports":["Init","Mathlib.Init"],"instances":[],"name":"Mathlib.Tactic.FunProp.ToBatteries"}