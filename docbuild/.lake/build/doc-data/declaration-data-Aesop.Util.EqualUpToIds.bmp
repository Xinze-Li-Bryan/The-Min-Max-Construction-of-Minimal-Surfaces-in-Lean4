{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.tacticStatesEqualUpToIds'\"><span class=\"name\">Aesop</span>.<span class=\"name\">tacticStatesEqualUpToIds'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">commonMCtx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx₁ </span><span class=\"fn\">mctx₂</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goals₁ </span><span class=\"fn\">goals₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowAssignmentDiff</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">EqualUpToIdsM.State</a>)</span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.tacticStatesEqualUpToIds'","kind":"def","line":415,"name":"Aesop.tacticStatesEqualUpToIds'","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L415-L420"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.tacticStatesEqualUpToIds\"><span class=\"name\">Aesop</span>.<span class=\"name\">tacticStatesEqualUpToIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">commonMCtx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx₁ </span><span class=\"fn\">mctx₂</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goals₁ </span><span class=\"fn\">goals₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowAssignmentDiff</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.tacticStatesEqualUpToIds","kind":"def","line":409,"name":"Aesop.tacticStatesEqualUpToIds","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L409-L413"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.unassignedMVarsEqualUptoIds'\"><span class=\"name\">Aesop</span>.<span class=\"name\">unassignedMVarsEqualUptoIds'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">commonMCtx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx₁ </span><span class=\"fn\">mctx₂</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId₁ </span><span class=\"fn\">mvarId₂</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowAssignmentDiff</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">EqualUpToIdsM.State</a>)</span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.unassignedMVarsEqualUptoIds'","kind":"def","line":402,"name":"Aesop.unassignedMVarsEqualUptoIds'","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L402-L407"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.unassignedMVarsEqualUptoIds\"><span class=\"name\">Aesop</span>.<span class=\"name\">unassignedMVarsEqualUptoIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">commonMCtx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx₁ </span><span class=\"fn\">mctx₂</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId₁ </span><span class=\"fn\">mvarId₂</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowAssignmentDiff</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.unassignedMVarsEqualUptoIds","kind":"def","line":396,"name":"Aesop.unassignedMVarsEqualUptoIds","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L396-L400"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.exprsEqualUpToIds'\"><span class=\"name\">Aesop</span>.<span class=\"name\">exprsEqualUpToIds'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowAssignmentDiff</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.exprsEqualUpToIds'","kind":"def","line":388,"name":"Aesop.exprsEqualUpToIds'","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L388-L394"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.exprsEqualUpToIds\"><span class=\"name\">Aesop</span>.<span class=\"name\">exprsEqualUpToIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx₁ </span><span class=\"fn\">mctx₂</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx₁ </span><span class=\"fn\">lctx₂</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localInstances₁ </span><span class=\"fn\">localInstances₂</span> : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowAssignmentDiff</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.exprsEqualUpToIds","kind":"def","line":380,"name":"Aesop.exprsEqualUpToIds","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L380-L386"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.tacticStatesEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">tacticStatesEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goals₁ </span><span class=\"fn\">goals₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.tacticStatesEqualUpToIdsCore","kind":"def","line":368,"name":"Aesop.EqualUpToIds.tacticStatesEqualUpToIdsCore","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L368-L376"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.unassignedMVarsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">unassignedMVarsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId₁ </span><span class=\"fn\">mvarId₂</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.unassignedMVarsEqualUpToIdsCore","kind":"opaque","line":364,"name":"Aesop.EqualUpToIds.unassignedMVarsEqualUpToIdsCore","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L364-L366"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.exprsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">exprsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.exprsEqualUpToIdsCore","kind":"opaque","line":361,"name":"Aesop.EqualUpToIds.exprsEqualUpToIdsCore","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L361-L362"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.unassignedMVarsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">unassignedMVarsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId₁ </span><span class=\"fn\">mvarId₂</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.unassignedMVarsEqualUpToIdsCore","kind":"def","line":325,"name":"Aesop.EqualUpToIds.Unsafe.unassignedMVarsEqualUpToIdsCore","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L325-L356"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore.go\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">localContextsEqualUpToIdsCore</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls₁ </span><span class=\"fn\">decls₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">decls₁</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">decls₂</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">gctx</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore.go","kind":"def","line":310,"name":"Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore.go","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L310-L323"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">localContextsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx₁ </span><span class=\"fn\">lctx₂</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localInstances₁ </span><span class=\"fn\">localInstances₂</span> : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore","kind":"def","line":298,"name":"Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L298-L323"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localDeclsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">localDeclsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ldecl₁ </span><span class=\"fn\">ldecl₂</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localDeclsEqualUpToIdsCore","kind":"def","line":283,"name":"Aesop.EqualUpToIds.Unsafe.localDeclsEqualUpToIdsCore","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L283-L296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₃.compareMVarValues\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore₃</span>.<span class=\"name\">compareMVarValues</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">MVarValue</a> → <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">MVarValue</a> → <span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.ExprsEqualUpToIdsM\">ExprsEqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₃.compareMVarValues","kind":"def","line":250,"name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₃.compareMVarValues","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L250-L281"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₃.normalizeMVar\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore₃</span>.<span class=\"name\">normalizeMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">MVarValue</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₃.normalizeMVar","kind":"def","line":243,"name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₃.normalizeMVar","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L243-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₃\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore₃</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.ExprsEqualUpToIdsM\">ExprsEqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₃","kind":"def","line":196,"name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₃","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L196-L281"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₂.printExpr\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore₂</span>.<span class=\"name\">printExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localInstances</span> : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₂.printExpr","kind":"def","line":190,"name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₂.printExpr","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L190-L194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₂\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.ExprsEqualUpToIdsM\">ExprsEqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₂","kind":"def","line":174,"name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₂","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L174-L194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₁\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₁","kind":"def","line":167,"name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₁","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L167-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.ExprsEqualUpToIdsM\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">ExprsEqualUpToIdsM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.ExprsEqualUpToIdsM","kind":"def","line":160,"name":"Aesop.EqualUpToIds.ExprsEqualUpToIdsM","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L160-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.levelsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">levelsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.levelsEqualUpToIdsCore","kind":"opaque","line":152,"name":"Aesop.EqualUpToIds.levelsEqualUpToIdsCore","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L152-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore'\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">levelsEqualUpToIdsCore'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a> → <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a> → <span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore'","kind":"def","line":129,"name":"Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore'","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L129-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">levelsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore","kind":"def","line":122,"name":"Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L122-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.delayedAssignment\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">MVarValue</span>.<span class=\"name\">delayedAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">da</span> : <a href=\"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment\">Lean.DelayedMetavarAssignment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">MVarValue</a></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.delayedAssignment","kind":"ctor","line":112,"name":"Aesop.EqualUpToIds.MVarValue.delayedAssignment","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L112-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.expr\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">MVarValue</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">MVarValue</a></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.expr","kind":"ctor","line":111,"name":"Aesop.EqualUpToIds.MVarValue.expr","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L111-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.mvarId\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">MVarValue</span>.<span class=\"name\">mvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">MVarValue</a></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.mvarId","kind":"ctor","line":110,"name":"Aesop.EqualUpToIds.MVarValue.mvarId","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">MVarValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue","kind":"inductive","line":109,"name":"Aesop.EqualUpToIds.MVarValue","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L109-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.equalFVarIds\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span>.<span class=\"name\">equalFVarIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.equalFVarIds","kind":"def","line":107,"name":"Aesop.EqualUpToIds.GoalContext.equalFVarIds","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L107-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.localInstances₂\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span>.<span class=\"name\">localInstances₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.localInstances₂","kind":"def","line":106,"name":"Aesop.EqualUpToIds.GoalContext.localInstances₂","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L106-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.lctx₂\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span>.<span class=\"name\">lctx₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.lctx₂","kind":"def","line":105,"name":"Aesop.EqualUpToIds.GoalContext.lctx₂","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L105-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.localInstances₁\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span>.<span class=\"name\">localInstances₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.localInstances₁","kind":"def","line":104,"name":"Aesop.EqualUpToIds.GoalContext.localInstances₁","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L104-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.lctx₁\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span>.<span class=\"name\">lctx₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.lctx₁","kind":"def","line":103,"name":"Aesop.EqualUpToIds.GoalContext.lctx₁","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L103-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx₁</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localInstances₁</span> : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx₂</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localInstances₂</span> : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">equalFVarIds</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.mk","kind":"ctor","line":102,"name":"Aesop.EqualUpToIds.GoalContext.mk","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L102-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext","kind":"structure","line":102,"name":"Aesop.EqualUpToIds.GoalContext","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L102-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.equalCommonMVars?\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">equalCommonMVars?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId₁ </span><span class=\"fn\">mvarId₂</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.equalCommonMVars?","kind":"def","line":91,"name":"Aesop.EqualUpToIds.equalCommonMVars?","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L91-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.equalCommonLMVars?\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">equalCommonLMVars?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lmvarId₁ </span><span class=\"fn\">lmvarId₂</span> : <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.equalCommonLMVars?","kind":"def","line":80,"name":"Aesop.EqualUpToIds.equalCommonLMVars?","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L80-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readAllowAssignmentDiff\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">readAllowAssignmentDiff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readAllowAssignmentDiff","kind":"def","line":76,"name":"Aesop.EqualUpToIds.readAllowAssignmentDiff","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L76-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readMCtx₂\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">readMCtx₂</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readMCtx₂","kind":"def","line":72,"name":"Aesop.EqualUpToIds.readMCtx₂","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L72-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readMCtx₁\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">readMCtx₁</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readMCtx₁","kind":"def","line":68,"name":"Aesop.EqualUpToIds.readMCtx₁","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L68-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readCommonMCtx?\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">readCommonMCtx?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readCommonMCtx?","kind":"def","line":64,"name":"Aesop.EqualUpToIds.readCommonMCtx?","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L64-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.run\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">commonMCtx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx₁ </span><span class=\"fn\">mctx₂</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowAssignmentDiff</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.run","kind":"def","line":57,"name":"Aesop.EqualUpToIdsM.run","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L57-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.run'\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">run'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">commonMCtx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx₁ </span><span class=\"fn\">mctx₂</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowAssignmentDiff</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">State</a>)</span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.run'","kind":"def","line":51,"name":"Aesop.EqualUpToIdsM.run'","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L51-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.instMonadEqualUpToIdsM\"><span class=\"name\">Aesop</span>.<span class=\"name\">instMonadEqualUpToIdsM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.instMonadEqualUpToIdsM","kind":"instance","line":47,"name":"Aesop.instMonadEqualUpToIdsM","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L47-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM","kind":"def","line":42,"name":"Aesop.EqualUpToIdsM","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L42-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.rightUnassignedMVarValues\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">State</span>.<span class=\"name\">rightUnassignedMVarValues</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"A map from metavariables which are unassigned in the right goal\nto their corresponding expression in the left goal. Only used when\n`allowAssignmentDiff = true`. ","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.rightUnassignedMVarValues","kind":"def","line":37,"name":"Aesop.EqualUpToIdsM.State.rightUnassignedMVarValues","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.leftUnassignedMVarValues\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">State</span>.<span class=\"name\">leftUnassignedMVarValues</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"A map from metavariables which are unassigned in the left goal\nto their corresponding expression in the right goal. Only used when\n`allowAssignmentDiff = true`. ","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.leftUnassignedMVarValues","kind":"def","line":33,"name":"Aesop.EqualUpToIdsM.State.leftUnassignedMVarValues","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.equalLMVarIds\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">State</span>.<span class=\"name\">equalLMVarIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.equalLMVarIds","kind":"def","line":29,"name":"Aesop.EqualUpToIdsM.State.equalLMVarIds","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.equalMVarIds\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">State</span>.<span class=\"name\">equalMVarIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.equalMVarIds","kind":"def","line":28,"name":"Aesop.EqualUpToIdsM.State.equalMVarIds","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">equalMVarIds</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">equalLMVarIds</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">leftUnassignedMVarValues </span><span class=\"fn\">rightUnassignedMVarValues</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">State</a></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.mk","kind":"ctor","line":27,"name":"Aesop.EqualUpToIdsM.State.mk","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L27-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State","kind":"structure","line":27,"name":"Aesop.EqualUpToIdsM.State","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L27-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.allowAssignmentDiff\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">Context</span>.<span class=\"name\">allowAssignmentDiff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Allow metavariables to be unassigned on one side of the comparison and\nassigned on the other. So when we compare two expressions and we encounter\na metavariable `?x` in one of them and a subexpression `e` in the other (at\nthe same position), we consider `?x` equal to `e`. ","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.allowAssignmentDiff","kind":"def","line":25,"name":"Aesop.EqualUpToIdsM.Context.allowAssignmentDiff","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.mctx₂\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mctx₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.mctx₂","kind":"def","line":19,"name":"Aesop.EqualUpToIdsM.Context.mctx₂","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L19-L19"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.mctx₁\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mctx₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.mctx₁","kind":"def","line":18,"name":"Aesop.EqualUpToIdsM.Context.mctx₁","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.commonMCtx?\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">Context</span>.<span class=\"name\">commonMCtx?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.commonMCtx?","kind":"def","line":17,"name":"Aesop.EqualUpToIdsM.Context.commonMCtx?","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L17-L17"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">commonMCtx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx₁ </span><span class=\"fn\">mctx₂</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowAssignmentDiff</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.mk","kind":"ctor","line":16,"name":"Aesop.EqualUpToIdsM.Context.mk","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L16-L16"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context","kind":"structure","line":16,"name":"Aesop.EqualUpToIdsM.Context","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Util/EqualUpToIds.lean#L16-L25"}}],"imports":["Init","Batteries.Lean.Meta.Basic"],"instances":[{"className":"Monad","name":"Aesop.instMonadEqualUpToIdsM","typeNames":["Aesop.EqualUpToIdsM"]}],"name":"Aesop.Util.EqualUpToIds"}