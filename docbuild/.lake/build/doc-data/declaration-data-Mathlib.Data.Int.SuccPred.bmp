{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#CovBy.intCast\"><span class=\"name\">CovBy</span>.<span class=\"name\">intCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Order/Defs/PartialOrder.html#CovBy\">⋖</a> <span class=\"fn\">b</span> → <span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Mathlib/Order/Defs/PartialOrder.html#CovBy\">⋖</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span></span></div></div>","info":{"doc":"**Alias** of the reverse direction of `Int.natCast_covBy`.","docLink":"./Mathlib/Data/Int/SuccPred.html#CovBy.intCast","kind":"theorem","line":61,"name":"CovBy.intCast","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Int/SuccPred.lean#L61-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#Int.natCast_covBy\"><span class=\"name\">Int</span>.<span class=\"name\">natCast_covBy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Mathlib/Order/Defs/PartialOrder.html#CovBy\">⋖</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Order/Defs/PartialOrder.html#CovBy\">⋖</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Int/SuccPred.html#Int.natCast_covBy","kind":"theorem","line":54,"name":"Int.natCast_covBy","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Int/SuccPred.lean#L54-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#Int.instIsPredArchimedean\"><span class=\"name\">Int</span>.<span class=\"name\">instIsPredArchimedean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Archimedean.html#IsPredArchimedean\">IsPredArchimedean</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Int/SuccPred.html#Int.instIsPredArchimedean","kind":"instance","line":47,"name":"Int.instIsPredArchimedean","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Int/SuccPred.lean#L47-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#Int.instIsSuccArchimedean\"><span class=\"name\">Int</span>.<span class=\"name\">instIsSuccArchimedean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Archimedean.html#IsSuccArchimedean\">IsSuccArchimedean</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Int/SuccPred.html#Int.instIsSuccArchimedean","kind":"instance","line":43,"name":"Int.instIsSuccArchimedean","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Int/SuccPred.lean#L43-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#Int.pred_eq_pred\"><span class=\"name\">Int</span>.<span class=\"name\">pred_eq_pred</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.pred\">Order.pred</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Int/Init.html#Int.pred\">pred</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Int/SuccPred.html#Int.pred_eq_pred","kind":"theorem","line":39,"name":"Int.pred_eq_pred","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Int/SuccPred.lean#L39-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#Int.succ_eq_succ\"><span class=\"name\">Int</span>.<span class=\"name\">succ_eq_succ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Int/Init.html#Int.succ\">succ</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Int/SuccPred.html#Int.succ_eq_succ","kind":"theorem","line":35,"name":"Int.succ_eq_succ","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Int/SuccPred.lean#L35-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#Int.instPredSubOrder\"><span class=\"name\">Int</span>.<span class=\"name\">instPredSubOrder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/SuccPred.html#PredSubOrder\">PredSubOrder</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Int/SuccPred.html#Int.instPredSubOrder","kind":"instance","line":33,"name":"Int.instPredSubOrder","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Int/SuccPred.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#Int.instPredOrder\"><span class=\"name\">Int</span>.<span class=\"name\">instPredOrder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#PredOrder\">PredOrder</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Int/SuccPred.html#Int.instPredOrder","kind":"instance","line":27,"name":"Int.instPredOrder","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Int/SuccPred.lean#L27-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#Int.instSuccAddOrder\"><span class=\"name\">Int</span>.<span class=\"name\">instSuccAddOrder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/SuccPred.html#SuccAddOrder\">SuccAddOrder</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Int/SuccPred.html#Int.instSuccAddOrder","kind":"instance","line":24,"name":"Int.instSuccAddOrder","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Int/SuccPred.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#Int.instSuccOrder\"><span class=\"name\">Int</span>.<span class=\"name\">instSuccOrder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#SuccOrder\">SuccOrder</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Int/SuccPred.html#Int.instSuccOrder","kind":"instance","line":21,"name":"Int.instSuccOrder","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Data/Int/SuccPred.lean#L21-L22"}}],"imports":["Init","Mathlib.Algebra.Order.Ring.Int","Mathlib.Data.Nat.SuccPred"],"instances":[{"className":"SuccOrder","name":"Int.instSuccOrder","typeNames":["Int"]},{"className":"SuccAddOrder","name":"Int.instSuccAddOrder","typeNames":["Int"]},{"className":"PredOrder","name":"Int.instPredOrder","typeNames":["Int"]},{"className":"PredSubOrder","name":"Int.instPredSubOrder","typeNames":["Int"]},{"className":"IsSuccArchimedean","name":"Int.instIsSuccArchimedean","typeNames":["Int"]},{"className":"IsPredArchimedean","name":"Int.instIsPredArchimedean","typeNames":["Int"]}],"name":"Mathlib.Data.Int.SuccPred"}