{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.elabUnfoldCommand\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">InteractiveUnfold</span>.<span class=\"name\">elabUnfoldCommand</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">Lean.Elab.Command.CommandElab</a></div></div>","info":{"doc":"Elaborate a `#unfold?` command. ","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.elabUnfoldCommand","kind":"def","line":225,"name":"Mathlib.Tactic.InteractiveUnfold.elabUnfoldCommand","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L225-L238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.unfoldCommand\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">InteractiveUnfold</span>.<span class=\"name\">unfoldCommand</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`#unfold? e` gives all unfolds of `e`.\nIn tactic mode, use `unfold?` instead. ","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.unfoldCommand","kind":"def","line":220,"name":"Mathlib.Tactic.InteractiveUnfold.unfoldCommand","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L220-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.tacticUnfold?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">InteractiveUnfold</span>.<span class=\"name\">tacticUnfold?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Replace the selected expression with a definitional unfolding.\n- After each unfolding, we apply `whnfCore` to simplify the expression.\n- Explicit natural number expressions are evaluated.\n- Unfolds of class projections of instances marked with `@[default_instance]` are not shown.\n  This is relevant for notational type classes like `+`: we don't want to suggest `Add.add a b`\n  as an unfolding of `a + b`. Similarly for `OfNat n : Nat` which unfolds into `n : Nat`.\n\nTo use `unfold?`, shift-click an expression in the tactic state.\nThis gives a list of rewrite suggestions for the selected expression.\nClick on a suggestion to replace `unfold?` by a tactic that performs this rewrite.\n","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.tacticUnfold?","kind":"def","line":204,"name":"Mathlib.Tactic.InteractiveUnfold.tacticUnfold?","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L204-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.UnfoldComponent\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">InteractiveUnfold</span>.<span class=\"name\">UnfoldComponent</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./ProofWidgets/Component/Basic.html#ProofWidgets.Component\">ProofWidgets.Component</a> <a href=\"./Mathlib/Tactic/Widget/SelectPanelUtils.html#SelectInsertParams\">SelectInsertParams</a></span></div></div>","info":{"doc":"The component called by the `unfold?` tactic ","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.UnfoldComponent","kind":"def","line":198,"name":"Mathlib.Tactic.InteractiveUnfold.UnfoldComponent","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L198-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.renderUnfolds\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">InteractiveUnfold</span>.<span class=\"name\">renderUnfolds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">occ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">loc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">range</span> : <a href=\"./Lean/Data/Lsp/BasicAux.html#Lean.Lsp.Range\">Lean.Lsp.Range</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doc</span> : <a href=\"./Lean/Server/FileWorker/Utils.html#Lean.Server.FileWorker.EditableDocument\">Lean.Server.FileWorker.EditableDocument</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./ProofWidgets/Data/Html.html#ProofWidgets.Html\">ProofWidgets.Html</a>)</span></span></div></div>","info":{"doc":"Render the unfolds of `e` as given by `filteredUnfolds`, with buttons at each suggestion\nfor pasting the rewrite tactic. Return `none` when there are no unfolds. ","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.renderUnfolds","kind":"def","line":142,"name":"Mathlib.Tactic.InteractiveUnfold.renderUnfolds","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L142-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.tacticSyntax\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">InteractiveUnfold</span>.<span class=\"name\">tacticSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e </span><span class=\"fn\">eNew</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">occ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">loc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span>)</span></div></div>","info":{"doc":"Return the tactic string that does the unfolding. ","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.tacticSyntax","kind":"def","line":134,"name":"Mathlib.Tactic.InteractiveUnfold.tacticSyntax","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L134-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.tacticPasteString\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticPasteString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tac</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">range</span> : <a href=\"./Lean/Data/Lsp/BasicAux.html#Lean.Lsp.Range\">Lean.Lsp.Range</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Given tactic syntax `tac` that we want to paste into the editor, return it as a string.\nThis function respects the 100 character limit for long lines. ","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.tacticPasteString","kind":"def","line":125,"name":"Mathlib.Tactic.tacticPasteString","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L125-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.mkRewrite\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">mkRewrite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">occ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">symm</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">loc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span>)</span></div></div>","info":{"doc":"Return syntax for the rewrite tactic `rw [e]`. ","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.mkRewrite","kind":"def","line":116,"name":"Mathlib.Tactic.mkRewrite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L116-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.filteredUnfolds\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">InteractiveUnfold</span>.<span class=\"name\">filteredUnfolds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>","info":{"doc":"Return the consecutive unfoldings of `e` that are user friendly. ","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.filteredUnfolds","kind":"def","line":110,"name":"Mathlib.Tactic.InteractiveUnfold.filteredUnfolds","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L110-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.isUserFriendly\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">InteractiveUnfold</span>.<span class=\"name\">isUserFriendly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Determine whether `e` contains no internal names. ","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.isUserFriendly","kind":"def","line":106,"name":"Mathlib.Tactic.InteractiveUnfold.isUserFriendly","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L106-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.unfolds.go\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">InteractiveUnfold</span>.<span class=\"name\">unfolds</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>","info":{"doc":"Append the unfoldings of `e` to `acc`. Assume `e` is in `whnfCore` form. ","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.unfolds.go","kind":"opaque","line":84,"name":"Mathlib.Tactic.InteractiveUnfold.unfolds.go","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L84-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.unfolds\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">InteractiveUnfold</span>.<span class=\"name\">unfolds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>","info":{"doc":"Return the consecutive unfoldings of `e`. ","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.unfolds","kind":"def","line":78,"name":"Mathlib.Tactic.InteractiveUnfold.unfolds","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L78-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.unfoldProjDefaultInst?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">InteractiveUnfold</span>.<span class=\"name\">unfoldProjDefaultInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>","info":{"doc":"Unfold a class projection if the instance is tagged with `@[default_instance]`.\nThis is used in the `unfold?` tactic in order to not show these unfolds to the user.\nSimilar to `Lean.Meta.unfoldProjInst?`. ","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.unfoldProjDefaultInst?","kind":"def","line":58,"name":"Mathlib.Tactic.InteractiveUnfold.unfoldProjDefaultInst?","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L58-L76"}}],"imports":["Init","Batteries.Lean.Position","Mathlib.Tactic.NthRewrite","Mathlib.Tactic.Widget.SelectPanelUtils","Mathlib.Lean.GoalsLocation","Mathlib.Lean.Meta.KAbstractPositions"],"instances":[],"name":"Mathlib.Tactic.Widget.InteractiveUnfold"}