{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.getAllSimpAttrs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getAllSimpAttrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"Gets all simp-attributes given to declaration `decl`. ","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.getAllSimpAttrs","kind":"def","line":151,"name":"Lean.Meta.getAllSimpAttrs","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/Simp.lean#L151-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.getAllSimpDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getAllSimpDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simpAttr</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"Returns all declarations with the `simp`-attribute `simpAttr`.\nNote: this also returns many auxiliary declarations. ","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.getAllSimpDecls","kind":"def","line":142,"name":"Lean.Meta.getAllSimpDecls","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/Simp.lean#L142-L149"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.isInSimpSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isInSimpSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simpAttr </span><span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Tests whether `decl` has `simp`-attribute `simpAttr`. Returns `false` is `simpAttr` is not a\nvalid simp-attribute. ","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.isInSimpSet","kind":"def","line":136,"name":"Lean.Meta.isInSimpSet","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/Simp.lean#L136-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.SimpTheorems.contains\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SimpTheorems</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">SimpTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether `declName` is in `SimpTheorems` as either a lemma or definition to unfold. ","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.SimpTheorems.contains","kind":"def","line":132,"name":"Lean.Meta.SimpTheorems.contains","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/Simp.lean#L132-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.simpEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">simpEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Simp.Result</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type </span><span class=\"fn\">pf</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>","info":{"doc":"Independently simplify both the left-hand side and the right-hand side\nof an equality. The equality is allowed to be under binders.\nReturns the simplified equality and a proof of it. ","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.simpEq","kind":"def","line":116,"name":"Lean.Meta.simpEq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/Simp.lean#L116-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.simpType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">simpType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Simp.Result</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given a simplifier `S : Expr → MetaM Simp.Result`,\nand an expression `e : Expr`, run `S` on the type of `e`, and then\nconvert `e` into that simplified type,\nusing a combination of type hints as well as casting if the proof is not definitional `Eq.mp`.\n\nThe optional argument `type?`, if present, must be definitionally equal to the type of `e`.\nWhen it is specified we simplify this type rather than the inferred type of `e`.\n","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.simpType","kind":"def","line":99,"name":"Lean.Meta.simpType","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/Simp.lean#L99-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.simpOnlyNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">simpOnlyNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lemmas</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Simp.Config</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.mk\">{</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Simp.Result</a></span></div></div>","info":{"doc":"Simplify an expression using only a list of lemmas specified by name. ","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.simpOnlyNames","kind":"def","line":94,"name":"Lean.Meta.simpOnlyNames","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/Simp.lean#L94-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.Simp.Context.ofArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Context</span>.<span class=\"name\">ofArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.simpArgs</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.mk\">{</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Elab.Tactic.TacticM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Context</a></span></div></div>","info":{"doc":"Construct a `Simp.Context`, following the same algorithm that would be done in a \"simp\" run:\nlook up all the simp-lemmas in the library, and adjust (add/erase) as specified by the provided\n`simpArgs` list. ","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.Simp.Context.ofArgs","kind":"def","line":81,"name":"Lean.Meta.Simp.Context.ofArgs","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/Simp.lean#L81-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.Simp.Context.ofNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Context</span>.<span class=\"name\">ofNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lemmas</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simpOnly</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.mk\">{</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Context</a></span></div></div>","info":{"doc":"Construct a `Simp.Context` from a list of names. ","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.Simp.Context.ofNames","kind":"def","line":73,"name":"Lean.Meta.Simp.Context.ofNames","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/Simp.lean#L73-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.simpTheoremsOfNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">simpTheoremsOfNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lemmas</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simpOnly</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">SimpTheorems</a></span></div></div>","info":{"doc":"Construct a `SimpTheorems` from a list of names. ","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.simpTheoremsOfNames","kind":"def","line":60,"name":"Lean.Meta.simpTheoremsOfNames","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/Simp.lean#L60-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.Simp.getPropHyps\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">getPropHyps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span></div></div>","info":{"doc":"Return all propositions in the local context. ","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.Simp.getPropHyps","kind":"def","line":49,"name":"Lean.Meta.Simp.getPropHyps","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/Simp.lean#L49-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.Simp.Result.ofTrue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Result</span>.<span class=\"name\">ofTrue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Constructs a proof that the original expression is true\ngiven a simp result which simplifies the target to `True`.\n","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.Simp.Result.ofTrue","kind":"def","line":37,"name":"Lean.Meta.Simp.Result.ofTrue","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/Simp.lean#L37-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.Simp.instToFormatSimpTheorems_mathlib\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instToFormatSimpTheorems_mathlib</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">SimpTheorems</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.Meta.Simp.instToFormatSimpTheorems_mathlib","kind":"instance","line":25,"name":"Lean.Meta.Simp.instToFormatSimpTheorems_mathlib","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/Simp.lean#L25-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/Simp.html#Lean.PHashSet.toList\"><span class=\"name\">Lean</span>.<span class=\"name\">PHashSet</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Lean/Meta/Simp.html#Lean.PHashSet.toList","kind":"def","line":17,"name":"Lean.PHashSet.toList","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/Simp.lean#L17-L18"}}],"imports":["Init","Mathlib.Init","Lean.Elab.Tactic.Simp"],"instances":[{"className":"Std.ToFormat","name":"Lean.Meta.Simp.instToFormatSimpTheorems_mathlib","typeNames":["Lean.Meta.SimpTheorems"]}],"name":"Mathlib.Lean.Meta.Simp"}