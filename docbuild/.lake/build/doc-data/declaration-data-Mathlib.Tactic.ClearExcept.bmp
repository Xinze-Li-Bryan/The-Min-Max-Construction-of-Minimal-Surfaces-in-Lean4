{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ClearExcept.html#Lean.Elab.Tactic.clearExceptTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">clearExceptTactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Clears all hypotheses it can, except those provided after a minus sign. Example:\n```\n  clear * - h₁ h₂\n```\n","docLink":"./Mathlib/Tactic/ClearExcept.html#Lean.Elab.Tactic.clearExceptTactic","kind":"def","line":35,"name":"Lean.Elab.Tactic.clearExceptTactic","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/ClearExcept.lean#L35-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ClearExcept.html#Lean.Elab.Tactic.clearExcept\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">clearExcept</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preserve</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>","info":{"doc":"Clears all hypotheses from a goal except those in the preserve list. ","docLink":"./Mathlib/Tactic/ClearExcept.html#Lean.Elab.Tactic.clearExcept","kind":"def","line":30,"name":"Lean.Elab.Tactic.clearExcept","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/ClearExcept.lean#L30-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ClearExcept.html#Lean.Elab.Tactic.getVarsToClear\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">getVarsToClear</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preserve</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span></div></div>","info":{"doc":"Returns the free variable IDs that can be cleared, excluding those in the preserve list\nand class instances. ","docLink":"./Mathlib/Tactic/ClearExcept.html#Lean.Elab.Tactic.getVarsToClear","kind":"def","line":20,"name":"Lean.Elab.Tactic.getVarsToClear","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/ClearExcept.lean#L20-L28"}}],"imports":["Init","Mathlib.Init","Lean.Elab.Tactic.ElabTerm"],"instances":[],"name":"Mathlib.Tactic.ClearExcept"}