{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Delaborators.html#delab_not_in\"><span class=\"name\">delab_not_in</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Lean.PrettyPrinter.Delaborator.Delab</a></div></div>","info":{"doc":"Delaborator for `∉`. ","docLink":"./Mathlib/Util/Delaborators.html#delab_not_in","kind":"def","line":169,"name":"delab_not_in","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/Delaborators.lean#L169-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Delaborators.html#exists_delab\"><span class=\"name\">exists_delab</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Lean.PrettyPrinter.Delaborator.Delab</a></div></div>","info":{"doc":"Delaborator for existential quantifier, including extended binders. ","docLink":"./Mathlib/Util/Delaborators.html#exists_delab","kind":"def","line":103,"name":"exists_delab","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/Delaborators.lean#L103-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Delaborators.html#PiNotation.delabPi'\"><span class=\"name\">PiNotation</span>.<span class=\"name\">delabPi'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Lean.PrettyPrinter.Delaborator.Delab</a></div></div>","info":{"doc":"Override the Lean 4 pi notation delaborator with one that uses `Π` and prints\ncute binders such as `∀ ε > 0`.\nNote that this takes advantage of the fact that `(x : α) → p x` notation is\nnever used for propositions, so we can match on this result and rewrite it. ","docLink":"./Mathlib/Util/Delaborators.html#PiNotation.delabPi'","kind":"def","line":80,"name":"PiNotation.delabPi'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/Delaborators.lean#L80-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Delaborators.html#PiNotation.delabPi\"><span class=\"name\">PiNotation</span>.<span class=\"name\">delabPi</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Lean.PrettyPrinter.Delaborator.Delab</a></div></div>","info":{"doc":"Override the Lean 4 pi notation delaborator with one that prints cute binders\nsuch as `∀ ε > 0`. ","docLink":"./Mathlib/Util/Delaborators.html#PiNotation.delabPi","kind":"def","line":50,"name":"PiNotation.delabPi","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/Delaborators.lean#L50-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Delaborators.html#PiNotation.replacePiNotation\"><span class=\"name\">PiNotation</span>.<span class=\"name\">replacePiNotation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Macro\">Lean.Macro</a></div></div>","info":{"doc":"Since pi notation and forall notation are interchangeable, we can\nparse it by simply using the pre-existing forall parser. ","docLink":"./Mathlib/Util/Delaborators.html#PiNotation.replacePiNotation","kind":"def","line":44,"name":"PiNotation.replacePiNotation","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/Delaborators.lean#L44-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Delaborators.html#PiNotation.«termΠ__,_»\"><span class=\"name\">PiNotation</span>.<span class=\"name\">«termΠ__,_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Dependent function type (a \"pi type\"). The notation `Π x ∈ s, β x` is\nshort for `Π x, x ∈ s → β x`. ","docLink":"./Mathlib/Util/Delaborators.html#PiNotation.«termΠ__,_»","kind":"def","line":35,"name":"PiNotation.«termΠ__,_»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/Delaborators.lean#L35-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Delaborators.html#PiNotation.piNotation\"><span class=\"name\">PiNotation</span>.<span class=\"name\">piNotation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a></div></div>","info":{"doc":"Dependent function type (a \"pi type\"). The notation `Π x : α, β x` can\nalso be written as `(x : α) → β x`. ","docLink":"./Mathlib/Util/Delaborators.html#PiNotation.piNotation","kind":"def","line":26,"name":"PiNotation.piNotation","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/Delaborators.lean#L26-L33"}}],"imports":["Init","Mathlib.Init","Mathlib.Util.PPOptions","Lean.PrettyPrinter.Delaborator.Builtins"],"instances":[],"name":"Mathlib.Util.Delaborators"}