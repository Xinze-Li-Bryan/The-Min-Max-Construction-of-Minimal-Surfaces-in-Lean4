{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DocString.html#Mathlib.Linter.Style.docStringLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">docStringLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>","info":{"doc":"The \"DocString\" linter validates style conventions regarding doc-string formatting.\n","docLink":"./Mathlib/Tactic/Linter/DocString.html#Mathlib.Linter.Style.docStringLinter","kind":"def","line":56,"name":"Mathlib.Linter.Style.docStringLinter","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DocString.lean#L56-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DocString.html#Mathlib.Linter.deindentString\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">deindentString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currIndent</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docString</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Currently, this function simply removes `currIndent` spaces after each `\\n`\nin the input string `docString`.\n\nIf/when the `docString` linter expands, it may take on more string processing.\n","docLink":"./Mathlib/Tactic/Linter/DocString.html#Mathlib.Linter.deindentString","kind":"def","line":44,"name":"Mathlib.Linter.deindentString","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DocString.lean#L44-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DocString.html#Mathlib.Linter.getDeclModifiers\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">getDeclModifiers</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>","info":{"doc":"Extract all `declModifiers` from the input syntax. We later extract the `docstring` from it,\nbut we avoid extracting directly the `docComment` node, to skip `#adaptation_note`s.\n","docLink":"./Mathlib/Tactic/Linter/DocString.html#Mathlib.Linter.getDeclModifiers","kind":"def","line":35,"name":"Mathlib.Linter.getDeclModifiers","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DocString.lean#L35-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DocString.html#Mathlib.Linter.linter.style.docString.empty\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">docString</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The \"empty doc string\" warns on empty doc-strings.\n","docLink":"./Mathlib/Tactic/Linter/DocString.html#Mathlib.Linter.linter.style.docString.empty","kind":"opaque","line":27,"name":"Mathlib.Linter.linter.style.docString.empty","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DocString.lean#L27-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DocString.html#Mathlib.Linter.linter.style.docString\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">docString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The \"DocString\" linter validates style conventions regarding doc-string formatting.\n","docLink":"./Mathlib/Tactic/Linter/DocString.html#Mathlib.Linter.linter.style.docString","kind":"opaque","line":19,"name":"Mathlib.Linter.linter.style.docString","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/DocString.lean#L19-L25"}}],"imports":["Init","Mathlib.Tactic.Linter.Header"],"instances":[],"name":"Mathlib.Tactic.Linter.DocString"}