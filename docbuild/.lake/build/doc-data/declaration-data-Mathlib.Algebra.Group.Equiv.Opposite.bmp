{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.mul_op_ext_iff\"><span class=\"name\">AddMonoidHom</span>.<span class=\"name\">mul_op_ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">α</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">comp</a></span> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulOpposite.opAddEquiv\">MulOpposite.opAddEquiv</a>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.toAddMonoidHom\">toAddMonoidHom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">comp</a></span> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulOpposite.opAddEquiv\">MulOpposite.opAddEquiv</a>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.toAddMonoidHom\">toAddMonoidHom</a></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.mul_op_ext_iff","kind":"theorem","line":212,"name":"AddMonoidHom.mul_op_ext_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L212-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.mul_op_ext\"><span class=\"name\">AddMonoidHom</span>.<span class=\"name\">mul_op_ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">α</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">comp</a></span> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulOpposite.opAddEquiv\">MulOpposite.opAddEquiv</a>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.toAddMonoidHom\">toAddMonoidHom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">comp</a></span> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulOpposite.opAddEquiv\">MulOpposite.opAddEquiv</a>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.toAddMonoidHom\">toAddMonoidHom</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></div></div>","info":{"doc":"This ext lemma changes equalities on `αᵐᵒᵖ →+ β` to equalities on `α →+ β`.\nThis is useful because there are often ext lemmas for specific `α`s that will apply\nto an equality of `α →+ β` such as `Finsupp.addHom_ext'`. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.mul_op_ext","kind":"theorem","line":209,"name":"AddMonoidHom.mul_op_ext","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L209-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.unop\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">unop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">β</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">β</span>)</div></div>","info":{"doc":"The 'unopposite' of an iso `αᵃᵒᵖ ≃+ βᵃᵒᵖ`. Inverse to `AddEquiv.op`. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.unop","kind":"def","line":203,"name":"AddEquiv.unop","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L203-L204"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.unop\"><span class=\"name\">MulEquiv</span>.<span class=\"name\">unop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv\">≃*</a> <span class=\"fn\">β</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv\">≃*</a> <span class=\"fn\">β</span>)</div></div>","info":{"doc":"The 'unopposite' of an iso `αᵐᵒᵖ ≃* βᵐᵒᵖ`. Inverse to `MulEquiv.op`. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.unop","kind":"def","line":202,"name":"MulEquiv.unop","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L202-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.op_symm_apply_symm_apply\"><span class=\"name\">MulEquiv</span>.<span class=\"name\">op_symm_apply_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">α</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv\">≃*</a> <span class=\"fn\">β</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.op\">op</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv.symm\">symm</a></span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.unop\">MulOpposite.unop</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv.symm\">symm</a></span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a>) <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.op_symm_apply_symm_apply","kind":"theorem","line":188,"name":"MulEquiv.op_symm_apply_symm_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L188-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.op_apply_apply\"><span class=\"name\">MulEquiv</span>.<span class=\"name\">op_apply_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv\">≃*</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">α</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.op\">op</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.unop\">MulOpposite.unop</a>) <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.op_apply_apply","kind":"theorem","line":188,"name":"MulEquiv.op_apply_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L188-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.op_symm_apply_symm_apply\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">op_symm_apply_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">α</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">β</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.op\">op</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.symm\">symm</a></span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.unop\">AddOpposite.unop</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.symm\">symm</a></span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a>) <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.op_symm_apply_symm_apply","kind":"theorem","line":188,"name":"AddEquiv.op_symm_apply_symm_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L188-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.op_symm_apply_apply\"><span class=\"name\">MulEquiv</span>.<span class=\"name\">op_symm_apply_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">α</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv\">≃*</a> <span class=\"fn\">β</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.op\">op</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.unop\">MulOpposite.unop</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a>) <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.op_symm_apply_apply","kind":"theorem","line":188,"name":"MulEquiv.op_symm_apply_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L188-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.op_symm_apply_apply\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">op_symm_apply_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">α</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">β</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.op\">op</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.unop\">AddOpposite.unop</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a>) <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.op_symm_apply_apply","kind":"theorem","line":188,"name":"AddEquiv.op_symm_apply_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L188-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.op_apply_symm_apply\"><span class=\"name\">MulEquiv</span>.<span class=\"name\">op_apply_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv\">≃*</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">β</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.op\">op</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv.symm\">symm</a></span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv.symm\">symm</a></span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.unop\">MulOpposite.unop</a>) <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.op_apply_symm_apply","kind":"theorem","line":188,"name":"MulEquiv.op_apply_symm_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L188-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.op_apply_apply\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">op_apply_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">α</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.op\">op</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.unop\">AddOpposite.unop</a>) <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.op_apply_apply","kind":"theorem","line":188,"name":"AddEquiv.op_apply_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L188-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.op_apply_symm_apply\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">op_apply_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">β</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.op\">op</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.symm\">symm</a></span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.symm\">symm</a></span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.unop\">AddOpposite.unop</a>) <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.op_apply_symm_apply","kind":"theorem","line":188,"name":"AddEquiv.op_apply_symm_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L188-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.op\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">op</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">β</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\">α</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">β</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a>)</div></div>","info":{"doc":"An iso `α ≃+ β` can equivalently be viewed as an iso `αᵃᵒᵖ ≃+ βᵃᵒᵖ`. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.op","kind":"def","line":188,"name":"AddEquiv.op","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L188-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.op\"><span class=\"name\">MulEquiv</span>.<span class=\"name\">op</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv\">≃*</a> <span class=\"fn\">β</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\">α</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv\">≃*</a> <span class=\"fn\">β</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>)</div></div>","info":{"doc":"An iso `α ≃* β` can equivalently be viewed as an iso `αᵐᵒᵖ ≃* βᵐᵒᵖ`. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.op","kind":"def","line":187,"name":"MulEquiv.op","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L187-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.mulUnop\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">mulUnop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">β</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">β</span>)</div></div>","info":{"doc":"The 'unopposite' of an iso `αᵐᵒᵖ ≃+ βᵐᵒᵖ`. Inverse to `AddEquiv.mul_op`. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.mulUnop","kind":"def","line":182,"name":"AddEquiv.mulUnop","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L182-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.mulOp_symm_apply\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">mulOp_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">α</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">β</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.mulOp\">mulOp</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulOpposite.opAddEquiv\">MulOpposite.opAddEquiv</a>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.trans\">trans</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.trans\">trans</a></span> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulOpposite.opAddEquiv\">MulOpposite.opAddEquiv</a>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.symm\">symm</a></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.mulOp_symm_apply","kind":"theorem","line":177,"name":"AddEquiv.mulOp_symm_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L177-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.mulOp_apply\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">mulOp_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.mulOp\">mulOp</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulOpposite.opAddEquiv\">MulOpposite.opAddEquiv</a>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.symm\">symm</a></span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.trans\">trans</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.trans\">trans</a></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulOpposite.opAddEquiv\">MulOpposite.opAddEquiv</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.mulOp_apply","kind":"theorem","line":177,"name":"AddEquiv.mulOp_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L177-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.mulOp\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">mulOp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">β</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\">α</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">β</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>)</div></div>","info":{"doc":"An iso `α ≃+ β` can equivalently be viewed as an iso `αᵐᵒᵖ ≃+ βᵐᵒᵖ`. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.mulOp","kind":"def","line":176,"name":"AddEquiv.mulOp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L176-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.mulUnop\"><span class=\"name\">AddMonoidHom</span>.<span class=\"name\">mulUnop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">α</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">β</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>) <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">β</span>)</div></div>","info":{"doc":"The 'unopposite' of an additive monoid hom `αᵐᵒᵖ →+ βᵐᵒᵖ`. Inverse to\n`AddMonoidHom.mul_op`. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.mulUnop","kind":"def","line":170,"name":"AddMonoidHom.mulUnop","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L170-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.mulOp_apply_apply\"><span class=\"name\">AddMonoidHom</span>.<span class=\"name\">mulOp_apply_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.mulOp\">mulOp</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.unop\">MulOpposite.unop</a>) <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.mulOp_apply_apply","kind":"theorem","line":159,"name":"AddMonoidHom.mulOp_apply_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L159-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.mulOp_symm_apply_apply\"><span class=\"name\">AddMonoidHom</span>.<span class=\"name\">mulOp_symm_apply_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">N</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.mulOp\">mulOp</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.unop\">MulOpposite.unop</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a>) <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.mulOp_symm_apply_apply","kind":"theorem","line":159,"name":"AddMonoidHom.mulOp_symm_apply_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L159-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.mulOp\"><span class=\"name\">AddMonoidHom</span>.<span class=\"name\">mulOp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">N</span>) <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">N</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>)</div></div>","info":{"doc":"An additive homomorphism `M →+ N` can equivalently be viewed as an additive homomorphism\n`Mᵐᵒᵖ →+ Nᵐᵒᵖ`. This is the action of the (fully faithful) `ᵐᵒᵖ`-functor on morphisms. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.mulOp","kind":"def","line":157,"name":"AddMonoidHom.mulOp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L157-L168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.opOp_symm_apply\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">opOp_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.opOp\">opOp</a> <span class=\"fn\">M</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.symm\">symm</a></span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.unop\">AddOpposite.unop</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.unop\">AddOpposite.unop</a> <span class=\"fn\">a✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.opOp_symm_apply","kind":"theorem","line":151,"name":"AddEquiv.opOp_symm_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L151-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.opOp_apply\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">opOp_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.opOp\">opOp</a> <span class=\"fn\">M</span>)</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a> <span class=\"fn\">a✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.opOp_apply","kind":"theorem","line":151,"name":"AddEquiv.opOp_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L151-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.opOp_symm_apply\"><span class=\"name\">MulEquiv</span>.<span class=\"name\">opOp_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.opOp\">opOp</a> <span class=\"fn\">M</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv.symm\">symm</a></span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.unop\">MulOpposite.unop</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.unop\">MulOpposite.unop</a> <span class=\"fn\">a✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.opOp_symm_apply","kind":"theorem","line":151,"name":"MulEquiv.opOp_symm_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L151-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.opOp_apply\"><span class=\"name\">MulEquiv</span>.<span class=\"name\">opOp_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.opOp\">opOp</a> <span class=\"fn\">M</span>)</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a> <span class=\"fn\">a✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.opOp_apply","kind":"theorem","line":151,"name":"MulEquiv.opOp_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L151-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.opOp\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">opOp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></div></div>","info":{"doc":"A additive monoid is isomorphic to the opposite of its opposite. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.opOp","kind":"def","line":151,"name":"AddEquiv.opOp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L151-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.opOp\"><span class=\"name\">MulEquiv</span>.<span class=\"name\">opOp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv\">≃*</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></div></div>","info":{"doc":"A monoid is isomorphic to the opposite of its opposite. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.opOp","kind":"def","line":150,"name":"MulEquiv.opOp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L150-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.unop\"><span class=\"name\">AddMonoidHom</span>.<span class=\"name\">unop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">N</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a>) <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">N</span>)</div></div>","info":{"doc":"The 'unopposite' of an additive monoid homomorphism\n`Mᵃᵒᵖ →+ Nᵃᵒᵖ`. Inverse to `AddMonoidHom.op`. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.unop","kind":"def","line":145,"name":"AddMonoidHom.unop","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L145-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MonoidHom.unop\"><span class=\"name\">MonoidHom</span>.<span class=\"name\">unop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">N</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>) <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">N</span>)</div></div>","info":{"doc":"The 'unopposite' of a monoid homomorphism `Mᵐᵒᵖ →* Nᵐᵒᵖ`. Inverse to `MonoidHom.op`. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MonoidHom.unop","kind":"def","line":144,"name":"MonoidHom.unop","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L144-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MonoidHom.op_symm_apply_apply\"><span class=\"name\">MonoidHom</span>.<span class=\"name\">op_symm_apply_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">N</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MonoidHom.op\">op</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.unop\">MulOpposite.unop</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a>) <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MonoidHom.op_symm_apply_apply","kind":"theorem","line":132,"name":"MonoidHom.op_symm_apply_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L132-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.op_symm_apply_apply\"><span class=\"name\">AddMonoidHom</span>.<span class=\"name\">op_symm_apply_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">N</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.op\">op</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.unop\">AddOpposite.unop</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a>) <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.op_symm_apply_apply","kind":"theorem","line":132,"name":"AddMonoidHom.op_symm_apply_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L132-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MonoidHom.op_apply_apply\"><span class=\"name\">MonoidHom</span>.<span class=\"name\">op_apply_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MonoidHom.op\">op</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.unop\">MulOpposite.unop</a>) <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MonoidHom.op_apply_apply","kind":"theorem","line":132,"name":"MonoidHom.op_apply_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L132-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.op_apply_apply\"><span class=\"name\">AddMonoidHom</span>.<span class=\"name\">op_apply_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.op\">op</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.unop\">AddOpposite.unop</a>) <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.op_apply_apply","kind":"theorem","line":132,"name":"AddMonoidHom.op_apply_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L132-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.op\"><span class=\"name\">AddMonoidHom</span>.<span class=\"name\">op</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">N</span>) <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">N</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a>)</div></div>","info":{"doc":"An additive monoid homomorphism `M →+ N` can equivalently be viewed as an additive monoid\nhomomorphism `Mᵃᵒᵖ →+ Nᵃᵒᵖ`. This is the action of the (fully faithful)\n`ᵃᵒᵖ`-functor on morphisms. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.op","kind":"def","line":132,"name":"AddMonoidHom.op","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L132-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MonoidHom.op\"><span class=\"name\">MonoidHom</span>.<span class=\"name\">op</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">N</span>) <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">N</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>)</div></div>","info":{"doc":"A monoid homomorphism `M →* N` can equivalently be viewed as a monoid homomorphism\n`Mᵐᵒᵖ →* Nᵐᵒᵖ`. This is the action of the (fully faithful) `ᵐᵒᵖ`-functor on morphisms. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MonoidHom.op","kind":"def","line":130,"name":"MonoidHom.op","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L130-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.mulUnop\"><span class=\"name\">AddHom</span>.<span class=\"name\">mulUnop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">α</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">β</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>) <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">β</span>)</div></div>","info":{"doc":"The 'unopposite' of an additive semigroup hom `αᵐᵒᵖ →+ βᵐᵒᵖ`. Inverse to\n`AddHom.mul_op`. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.mulUnop","kind":"def","line":124,"name":"AddHom.mulUnop","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L124-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.mulOp_apply_apply\"><span class=\"name\">AddHom</span>.<span class=\"name\">mulOp_apply_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.mulOp\">mulOp</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.unop\">MulOpposite.unop</a>) <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.mulOp_apply_apply","kind":"theorem","line":114,"name":"AddHom.mulOp_apply_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L114-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.mulOp_symm_apply_apply\"><span class=\"name\">AddHom</span>.<span class=\"name\">mulOp_symm_apply_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">N</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.mulOp\">mulOp</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.unop\">MulOpposite.unop</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a>) <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.mulOp_symm_apply_apply","kind":"theorem","line":114,"name":"AddHom.mulOp_symm_apply_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L114-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.mulOp\"><span class=\"name\">AddHom</span>.<span class=\"name\">mulOp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">N</span>) <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">N</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>)</div></div>","info":{"doc":"An additive semigroup homomorphism `AddHom M N` can equivalently be viewed as an additive\nhomomorphism `AddHom Mᵐᵒᵖ Nᵐᵒᵖ`. This is the action of the (fully faithful) `ᵐᵒᵖ`-functor on\nmorphisms. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.mulOp","kind":"def","line":111,"name":"AddHom.mulOp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L111-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.unop\"><span class=\"name\">AddHom</span>.<span class=\"name\">unop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">N</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a>) <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">N</span>)</div></div>","info":{"doc":"The 'unopposite' of an additive semigroup homomorphism\n`Mᵃᵒᵖ →ₙ+ Nᵃᵒᵖ`. Inverse to `AddHom.op`. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.unop","kind":"def","line":106,"name":"AddHom.unop","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L106-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulHom.unop\"><span class=\"name\">MulHom</span>.<span class=\"name\">unop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MulHom\">→ₙ*</a> <span class=\"fn\">N</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>) <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MulHom\">→ₙ*</a> <span class=\"fn\">N</span>)</div></div>","info":{"doc":"The 'unopposite' of a semigroup homomorphism `Mᵐᵒᵖ →ₙ* Nᵐᵒᵖ`. Inverse to `MulHom.op`. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulHom.unop","kind":"def","line":105,"name":"MulHom.unop","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L105-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulHom.op_apply_apply\"><span class=\"name\">MulHom</span>.<span class=\"name\">op_apply_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MulHom\">→ₙ*</a> <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulHom.op\">op</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.unop\">MulOpposite.unop</a>) <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulHom.op_apply_apply","kind":"theorem","line":93,"name":"MulHom.op_apply_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L93-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.op_symm_apply_apply\"><span class=\"name\">AddHom</span>.<span class=\"name\">op_symm_apply_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">N</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.op\">op</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.unop\">AddOpposite.unop</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a>) <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.op_symm_apply_apply","kind":"theorem","line":93,"name":"AddHom.op_symm_apply_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L93-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.op_apply_apply\"><span class=\"name\">AddHom</span>.<span class=\"name\">op_apply_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.op\">op</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.unop\">AddOpposite.unop</a>) <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.op_apply_apply","kind":"theorem","line":93,"name":"AddHom.op_apply_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L93-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulHom.op_symm_apply_apply\"><span class=\"name\">MulHom</span>.<span class=\"name\">op_symm_apply_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MulHom\">→ₙ*</a> <span class=\"fn\">N</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulHom.op\">op</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.unop\">MulOpposite.unop</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a>) <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulHom.op_symm_apply_apply","kind":"theorem","line":93,"name":"MulHom.op_symm_apply_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L93-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.op\"><span class=\"name\">AddHom</span>.<span class=\"name\">op</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">N</span>) <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">N</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a>)</div></div>","info":{"doc":"An additive semigroup homomorphism `AddHom M N` can equivalently be viewed as an additive\nsemigroup homomorphism `AddHom Mᵃᵒᵖ Nᵃᵒᵖ`. This is the action of the (fully faithful)`ᵃᵒᵖ`-functor\non morphisms. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.op","kind":"def","line":93,"name":"AddHom.op","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L93-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulHom.op\"><span class=\"name\">MulHom</span>.<span class=\"name\">op</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MulHom\">→ₙ*</a> <span class=\"fn\">N</span>) <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MulHom\">→ₙ*</a> <span class=\"fn\">N</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a>)</div></div>","info":{"doc":"A semigroup homomorphism `M →ₙ* N` can equivalently be viewed as a semigroup homomorphism\n`Mᵐᵒᵖ →ₙ* Nᵐᵒᵖ`. This is the action of the (fully faithful) `ᵐᵒᵖ`-functor on morphisms. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulHom.op","kind":"def","line":91,"name":"MulHom.op","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L91-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.fromOpposite_apply\"><span class=\"name\">AddMonoidHom</span>.<span class=\"name\">fromOpposite_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">M</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Commute/Defs.html#AddCommute\">AddCommute</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.fromOpposite\">fromOpposite</a></span> <span class=\"fn\">hf</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.unop\">AddOpposite.unop</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.fromOpposite_apply","kind":"theorem","line":82,"name":"AddMonoidHom.fromOpposite_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MonoidHom.fromOpposite_apply\"><span class=\"name\">MonoidHom</span>.<span class=\"name\">fromOpposite_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">M</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Commute/Defs.html#Commute\">Commute</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MonoidHom.fromOpposite\">fromOpposite</a></span> <span class=\"fn\">hf</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.unop\">MulOpposite.unop</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MonoidHom.fromOpposite_apply","kind":"theorem","line":82,"name":"MonoidHom.fromOpposite_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.fromOpposite\"><span class=\"name\">AddMonoidHom</span>.<span class=\"name\">fromOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">M</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Commute/Defs.html#AddCommute\">AddCommute</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">N</span></div></div>","info":{"doc":"An additive monoid homomorphism `f : M →+ N` such that `f x` additively commutes\nwith `f y` for all `x`, `y` defines an additive monoid homomorphism from `Mᵃᵒᵖ`. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.fromOpposite","kind":"def","line":82,"name":"AddMonoidHom.fromOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L82-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MonoidHom.fromOpposite\"><span class=\"name\">MonoidHom</span>.<span class=\"name\">fromOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">M</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Commute/Defs.html#Commute\">Commute</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">N</span></div></div>","info":{"doc":"A monoid homomorphism `f : M →* N` such that `f x` commutes with `f y` for all `x, y` defines\na monoid homomorphism from `Mᵐᵒᵖ`. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MonoidHom.fromOpposite","kind":"def","line":80,"name":"MonoidHom.fromOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L80-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MonoidHom.toOpposite_apply\"><span class=\"name\">MonoidHom</span>.<span class=\"name\">toOpposite_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">M</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Commute/Defs.html#Commute\">Commute</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MonoidHom.toOpposite\">toOpposite</a></span> <span class=\"fn\">hf</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MonoidHom.toOpposite_apply","kind":"theorem","line":71,"name":"MonoidHom.toOpposite_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L71-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.toOpposite_apply\"><span class=\"name\">AddMonoidHom</span>.<span class=\"name\">toOpposite_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">M</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Commute/Defs.html#AddCommute\">AddCommute</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.toOpposite\">toOpposite</a></span> <span class=\"fn\">hf</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.toOpposite_apply","kind":"theorem","line":71,"name":"AddMonoidHom.toOpposite_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L71-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.toOpposite\"><span class=\"name\">AddMonoidHom</span>.<span class=\"name\">toOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">M</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Commute/Defs.html#AddCommute\">AddCommute</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">N</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></div></div>","info":{"doc":"An additive monoid homomorphism `f : M →+ N` such that `f x` additively commutes\nwith `f y` for all `x, y` defines an additive monoid homomorphism to `Sᵃᵒᵖ`. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddMonoidHom.toOpposite","kind":"def","line":71,"name":"AddMonoidHom.toOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L71-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MonoidHom.toOpposite\"><span class=\"name\">MonoidHom</span>.<span class=\"name\">toOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">M</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Commute/Defs.html#Commute\">Commute</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">N</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></div></div>","info":{"doc":"A monoid homomorphism `f : M →* N` such that `f x` commutes with `f y` for all `x, y` defines\na monoid homomorphism to `Nᵐᵒᵖ`. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MonoidHom.toOpposite","kind":"def","line":69,"name":"MonoidHom.toOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L69-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulHom.fromOpposite_apply\"><span class=\"name\">MulHom</span>.<span class=\"name\">fromOpposite_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MulHom\">→ₙ*</a> <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">M</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Commute/Defs.html#Commute\">Commute</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulHom.fromOpposite\">fromOpposite</a></span> <span class=\"fn\">hf</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.unop\">MulOpposite.unop</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulHom.fromOpposite_apply","kind":"theorem","line":61,"name":"MulHom.fromOpposite_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L61-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.fromOpposite_apply\"><span class=\"name\">AddHom</span>.<span class=\"name\">fromOpposite_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">M</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Commute/Defs.html#AddCommute\">AddCommute</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.fromOpposite\">fromOpposite</a></span> <span class=\"fn\">hf</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.unop\">AddOpposite.unop</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.fromOpposite_apply","kind":"theorem","line":61,"name":"AddHom.fromOpposite_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L61-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.fromOpposite\"><span class=\"name\">AddHom</span>.<span class=\"name\">fromOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">M</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Commute/Defs.html#AddCommute\">AddCommute</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">N</span></div></div>","info":{"doc":"An additive semigroup homomorphism `f : AddHom M N` such that `f x` additively\ncommutes with `f y` for all `x`, `y` defines an additive semigroup homomorphism from `Mᵃᵒᵖ`. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.fromOpposite","kind":"def","line":61,"name":"AddHom.fromOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L61-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulHom.fromOpposite\"><span class=\"name\">MulHom</span>.<span class=\"name\">fromOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MulHom\">→ₙ*</a> <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">M</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Commute/Defs.html#Commute\">Commute</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MulHom\">→ₙ*</a> <span class=\"fn\">N</span></div></div>","info":{"doc":"A semigroup homomorphism `f : M →ₙ* N` such that `f x` commutes with `f y` for all `x, y`\ndefines a semigroup homomorphism from `Mᵐᵒᵖ`. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulHom.fromOpposite","kind":"def","line":59,"name":"MulHom.fromOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L59-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulHom.toOpposite_apply\"><span class=\"name\">MulHom</span>.<span class=\"name\">toOpposite_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MulHom\">→ₙ*</a> <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">M</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Commute/Defs.html#Commute\">Commute</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulHom.toOpposite\">toOpposite</a></span> <span class=\"fn\">hf</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulHom.toOpposite_apply","kind":"theorem","line":51,"name":"MulHom.toOpposite_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.toOpposite_apply\"><span class=\"name\">AddHom</span>.<span class=\"name\">toOpposite_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">M</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Commute/Defs.html#AddCommute\">AddCommute</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.toOpposite\">toOpposite</a></span> <span class=\"fn\">hf</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.toOpposite_apply","kind":"theorem","line":51,"name":"AddHom.toOpposite_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.toOpposite\"><span class=\"name\">AddHom</span>.<span class=\"name\">toOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">M</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Commute/Defs.html#AddCommute\">AddCommute</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">N</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></div></div>","info":{"doc":"An additive semigroup homomorphism `f : AddHom M N` such that `f x` additively\ncommutes with `f y` for all `x, y` defines an additive semigroup homomorphism to `Sᵃᵒᵖ`. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddHom.toOpposite","kind":"def","line":51,"name":"AddHom.toOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L51-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulHom.toOpposite\"><span class=\"name\">MulHom</span>.<span class=\"name\">toOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MulHom\">→ₙ*</a> <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">M</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Commute/Defs.html#Commute\">Commute</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MulHom\">→ₙ*</a> <span class=\"fn\">N</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></div></div>","info":{"doc":"A semigroup homomorphism `f : M →ₙ* N` such that `f x` commutes with `f y` for all `x, y`\ndefines a semigroup homomorphism to `Nᵐᵒᵖ`. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulHom.toOpposite","kind":"def","line":49,"name":"MulHom.toOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L49-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.neg'_apply\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">neg'_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SubtractionMonoid\">SubtractionMonoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.neg'\">neg'</a> <span class=\"fn\">G</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Init/Prelude.html#Neg.neg\">Neg.neg</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.neg'_apply","kind":"theorem","line":43,"name":"AddEquiv.neg'_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.neg'_symm_apply\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">neg'_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SubtractionMonoid\">SubtractionMonoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.neg'\">neg'</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.symm\">symm</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">Neg.neg</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.unop\">AddOpposite.unop</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.neg'_symm_apply","kind":"theorem","line":43,"name":"AddEquiv.neg'_symm_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.inv'_apply\"><span class=\"name\">MulEquiv</span>.<span class=\"name\">inv'_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#DivisionMonoid\">DivisionMonoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.inv'\">inv'</a> <span class=\"fn\">G</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Init/Prelude.html#Inv.inv\">Inv.inv</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.inv'_apply","kind":"theorem","line":43,"name":"MulEquiv.inv'_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.inv'_symm_apply\"><span class=\"name\">MulEquiv</span>.<span class=\"name\">inv'_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#DivisionMonoid\">DivisionMonoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.inv'\">inv'</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv.symm\">symm</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inv.inv\">Inv.inv</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.unop\">MulOpposite.unop</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.inv'_symm_apply","kind":"theorem","line":43,"name":"MulEquiv.inv'_symm_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.neg'\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">neg'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SubtractionMonoid\">SubtractionMonoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">G</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></div></div>","info":{"doc":"Negation on an additive group is an `AddEquiv` to the opposite group. When `G`\nis commutative, there is `AddEquiv.inv`. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddEquiv.neg'","kind":"def","line":43,"name":"AddEquiv.neg'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L43-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.inv'\"><span class=\"name\">MulEquiv</span>.<span class=\"name\">inv'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#DivisionMonoid\">DivisionMonoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv\">≃*</a> <span class=\"fn\">G</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></div></div>","info":{"doc":"Inversion on a group is a `MulEquiv` to the opposite group. When `G` is commutative, there is\n`MulEquiv.inv`. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulEquiv.inv'","kind":"def","line":41,"name":"MulEquiv.inv'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L41-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddOpposite.opMulEquiv_toEquiv\"><span class=\"name\">AddOpposite</span>.<span class=\"name\">opMulEquiv_toEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddOpposite.opMulEquiv\">opMulEquiv</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.opEquiv\">opEquiv</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddOpposite.opMulEquiv_toEquiv","kind":"theorem","line":35,"name":"AddOpposite.opMulEquiv_toEquiv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddOpposite.opMulEquiv_symm_apply\"><span class=\"name\">AddOpposite</span>.<span class=\"name\">opMulEquiv_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddOpposite.opMulEquiv\">opMulEquiv</a>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv.symm\">symm</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.unop\">unop</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddOpposite.opMulEquiv_symm_apply","kind":"theorem","line":30,"name":"AddOpposite.opMulEquiv_symm_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddOpposite.opMulEquiv_apply\"><span class=\"name\">AddOpposite</span>.<span class=\"name\">opMulEquiv_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddOpposite.opMulEquiv\">opMulEquiv</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">op</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddOpposite.opMulEquiv_apply","kind":"theorem","line":30,"name":"AddOpposite.opMulEquiv_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddOpposite.opMulEquiv\"><span class=\"name\">AddOpposite</span>.<span class=\"name\">opMulEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv\">≃*</a> <span class=\"fn\">α</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></div></div>","info":{"doc":"The function `AddOpposite.op` is a multiplicative equivalence. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#AddOpposite.opMulEquiv","kind":"def","line":29,"name":"AddOpposite.opMulEquiv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L29-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulOpposite.opAddEquiv_toEquiv\"><span class=\"name\">MulOpposite</span>.<span class=\"name\">opAddEquiv_toEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulOpposite.opAddEquiv\">opAddEquiv</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.opEquiv\">opEquiv</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulOpposite.opAddEquiv_toEquiv","kind":"theorem","line":23,"name":"MulOpposite.opAddEquiv_toEquiv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulOpposite.opAddEquiv_apply\"><span class=\"name\">MulOpposite</span>.<span class=\"name\">opAddEquiv_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulOpposite.opAddEquiv\">opAddEquiv</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">op</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulOpposite.opAddEquiv_apply","kind":"theorem","line":18,"name":"MulOpposite.opAddEquiv_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulOpposite.opAddEquiv_symm_apply\"><span class=\"name\">MulOpposite</span>.<span class=\"name\">opAddEquiv_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulOpposite.opAddEquiv\">opAddEquiv</a>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.symm\">symm</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.unop\">unop</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulOpposite.opAddEquiv_symm_apply","kind":"theorem","line":18,"name":"MulOpposite.opAddEquiv_symm_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulOpposite.opAddEquiv\"><span class=\"name\">MulOpposite</span>.<span class=\"name\">opAddEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">α</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></div></div>","info":{"doc":"The function `MulOpposite.op` is an additive equivalence. ","docLink":"./Mathlib/Algebra/Group/Equiv/Opposite.html#MulOpposite.opAddEquiv","kind":"def","line":17,"name":"MulOpposite.opAddEquiv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/Equiv/Opposite.lean#L17-L21"}}],"imports":["Init","Mathlib.Algebra.Group.Equiv.Basic","Mathlib.Algebra.Group.Opposite"],"instances":[],"name":"Mathlib.Algebra.Group.Equiv.Opposite"}