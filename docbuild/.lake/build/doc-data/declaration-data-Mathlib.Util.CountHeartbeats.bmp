{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.Linter.CountHeartbeats.«command#count_heartbeatsApproximately»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">«command#count_heartbeatsApproximately»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"The \"countHeartbeats\" linter counts the heartbeats of every declaration.\n\nThe effect of the linter is similar to `#count_heartbeats in xxx`, except that it applies\nto all declarations.\n\nNote that the linter only counts heartbeats in \"top-level\" declarations:\nit looks inside `set_option ... in`, but not, for instance, inside `mutual` blocks.\n\nThere is a convenience notation `#count_heartbeats` that simply sets the linter option to true.\n","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.Linter.CountHeartbeats.«command#count_heartbeatsApproximately»","kind":"def","line":265,"name":"Mathlib.Linter.CountHeartbeats.«command#count_heartbeatsApproximately»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/CountHeartbeats.lean#L265-L272"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.Linter.CountHeartbeats.countHeartbeatsLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">countHeartbeatsLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>","info":{"doc":"The \"countHeartbeats\" linter counts the heartbeats of every declaration.\n\nThe effect of the linter is similar to `#count_heartbeats in xxx`, except that it applies\nto all declarations.\n\nNote that the linter only counts heartbeats in \"top-level\" declarations:\nit looks inside `set_option ... in`, but not, for instance, inside `mutual` blocks.\n\nThere is a convenience notation `#count_heartbeats` that simply sets the linter option to true.\n","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.Linter.CountHeartbeats.countHeartbeatsLinter","kind":"def","line":241,"name":"Mathlib.Linter.CountHeartbeats.countHeartbeatsLinter","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/CountHeartbeats.lean#L241-L260"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.Linter.linter.countHeartbeatsApprox\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">countHeartbeatsApprox</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"An option used by the `countHeartbeats` linter: if set to `true`, then the countHeartbeats linter\nrounds down to the nearest 1000 the heartbeat count.\n","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.Linter.linter.countHeartbeatsApprox","kind":"opaque","line":229,"name":"Mathlib.Linter.linter.countHeartbeatsApprox","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/CountHeartbeats.lean#L229-L237"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.Linter.linter.countHeartbeats\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">countHeartbeats</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The \"countHeartbeats\" linter counts the heartbeats of every declaration.\n\nThe effect of the linter is similar to `#count_heartbeats in xxx`, except that it applies\nto all declarations.\n\nNote that the linter only counts heartbeats in \"top-level\" declarations:\nit looks inside `set_option ... in`, but not, for instance, inside `mutual` blocks.\n\nThere is a convenience notation `#count_heartbeats` that simply sets the linter option to true.\n","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.Linter.linter.countHeartbeats","kind":"opaque","line":213,"name":"Mathlib.Linter.linter.countHeartbeats","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/CountHeartbeats.lean#L213-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.«command#count_heartbeats!_In__»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">«command#count_heartbeats!_In__»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`#count_heartbeats! in cmd` runs a command `10` times, reporting the range in heartbeats, and the\nstandard deviation. The command `#count_heartbeats! n in cmd` runs it `n` times instead.\n\nExample usage:\n```\n#count_heartbeats! in\ndef f := 37\n```\ndisplays the info message `Min: 7 Max: 8 StdDev: 14%`.\n","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.«command#count_heartbeats!_In__»","kind":"def","line":180,"name":"Mathlib.CountHeartbeats.«command#count_heartbeats!_In__»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/CountHeartbeats.lean#L180-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.elabForHeartbeats\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">elabForHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmd</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`command</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">revert</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Run a command, optionally restoring the original state, and report just the number of heartbeats.\n","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.elabForHeartbeats","kind":"def","line":170,"name":"Mathlib.CountHeartbeats.elabForHeartbeats","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/CountHeartbeats.lean#L170-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.commandGuard_min_heartbeatsApproximately_In__\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">commandGuard_min_heartbeatsApproximately_In__</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Guard the minimal number of heartbeats used in the enclosed command.\n\nThis is most useful in the context of debugging and minimizing an example of a slow declaration.\nBy guarding the number of heartbeats used in the slow declaration,\nan error message will be generated if a minimization step makes the slow behaviour go away.\n\nThe default number of minimal heartbeats is the value of `maxHeartbeats` (typically 200000).\nAlternatively, you can specify a number of heartbeats to guard against,\nusing the syntax `guard_min_heartbeats n in cmd`.\n\nThe optional `approximately` keyword rounds down the heartbeats to the nearest thousand.\nThis helps make the tests more stable to small changes in heartbeats.\nTo use this functionality, use `guard_min_heartbeats approximately (n)? in cmd`.\n","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.commandGuard_min_heartbeatsApproximately_In__","kind":"def","line":138,"name":"Mathlib.CountHeartbeats.commandGuard_min_heartbeatsApproximately_In__","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/CountHeartbeats.lean#L138-L167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.«command#count_heartbeatsApproximatelyIn__»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">«command#count_heartbeatsApproximatelyIn__»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`#count_heartbeats in cmd` counts the heartbeats used in the enclosed command `cmd`.\nUse `#count_heartbeats` to count the heartbeats in *all* the following declarations.\n\nThis is most useful for setting sufficient but reasonable limits via `set_option maxHeartbeats`\nfor long-running declarations.\n\nIf you do so, please resist the temptation to set the limit as low as possible.\nAs the `simp` set and other features of the library evolve,\nother contributors will find that their (likely unrelated) changes\nhave pushed the declaration over the limit.\n`count_heartbeats in` will automatically suggest a `set_option maxHeartbeats` via \"Try this:\"\nusing the least number of the form `2^k * 200000` that suffices.\n\nNote that the internal heartbeat counter accessible via `IO.getNumHeartbeats`\nhas granularity 1000 times finer than the limits set by `set_option maxHeartbeats`.\nAs this is intended as a user command, we divide by 1000.\n\nThe optional `approximately` keyword rounds down the heartbeats to the nearest thousand.\nThis helps make the tests more stable to small changes in heartbeats.\nTo use this functionality, use `#count_heartbeats approximately in cmd`.\n","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.«command#count_heartbeatsApproximatelyIn__»","kind":"def","line":92,"name":"Mathlib.CountHeartbeats.«command#count_heartbeatsApproximatelyIn__»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/CountHeartbeats.lean#L92-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.roundDownIf\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">roundDownIf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">approx</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Round down the number `n` to the nearest thousand, if `approx` is `true`.\n","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.roundDownIf","kind":"def","line":85,"name":"Mathlib.CountHeartbeats.roundDownIf","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/CountHeartbeats.lean#L85-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.«tactic#count_heartbeats!_In__»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">«tactic#count_heartbeats!_In__»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`#count_heartbeats! in tac` runs a tactic 10 times, counting the heartbeats used, and logs the range\nand standard deviation. The tactic `#count_heartbeats! n in tac` runs it `n` times instead.\n","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.«tactic#count_heartbeats!_In__»","kind":"def","line":71,"name":"Mathlib.CountHeartbeats.«tactic#count_heartbeats!_In__»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/CountHeartbeats.lean#L71-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.«tactic#count_heartbeats_»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">«tactic#count_heartbeats_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Count the heartbeats used by a tactic, e.g.: `#count_heartbeats simp`. ","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.«tactic#count_heartbeats_»","kind":"def","line":67,"name":"Mathlib.CountHeartbeats.«tactic#count_heartbeats_»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/CountHeartbeats.lean#L67-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.logVariation\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">logVariation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Log.html#Lean.MonadLog\">Lean.MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">Lean.AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">Lean.MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">counts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Given a `List Nat`, log an info message with the minimum, maximum, and standard deviation.\n","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.logVariation","kind":"def","line":58,"name":"Mathlib.CountHeartbeats.logVariation","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/CountHeartbeats.lean#L58-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.variation\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">variation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">counts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Given a `List Nat`, return the minimum, maximum, and standard deviation.\n","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.variation","kind":"def","line":44,"name":"Mathlib.CountHeartbeats.variation","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/CountHeartbeats.lean#L44-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.runTacForHeartbeats\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">runTacForHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tac</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.tacticSeq</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">revert</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Run a tactic, optionally restoring the original state, and report just the number of heartbeats.\n","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.runTacForHeartbeats","kind":"def","line":32,"name":"Mathlib.CountHeartbeats.runTacForHeartbeats","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Util/CountHeartbeats.lean#L32-L42"}}],"imports":["Init","Mathlib.Init","Lean.Util.Heartbeats","Lean.Meta.Tactic.TryThis"],"instances":[],"name":"Mathlib.Util.CountHeartbeats"}