{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/UnivLE.html#univLE_of_max\"><span class=\"name\">univLE_of_max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<a href=\"./Mathlib/Logic/UnivLE.html#UnivLE\">UnivLE.{max u v, v}</a>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Logic/UnivLE.html#UnivLE\">UnivLE.{u, v}</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/UnivLE.html#univLE_of_max","kind":"instance","line":66,"name":"univLE_of_max","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Logic/UnivLE.lean#L66-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/UnivLE.html#UnivLE.succ\"><span class=\"name\">UnivLE</span>.<span class=\"name\">succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<a href=\"./Mathlib/Logic/UnivLE.html#UnivLE\">UnivLE.{u, v}</a>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Logic/UnivLE.html#UnivLE\">UnivLE.{u, v + 1}</a></div></div>","info":{"doc":"This is redundant as an instance given the below. ","docLink":"./Mathlib/Logic/UnivLE.html#UnivLE.succ","kind":"theorem","line":62,"name":"UnivLE.succ","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Logic/UnivLE.lean#L62-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/UnivLE.html#UnivLE.zero\"><span class=\"name\">UnivLE</span>.<span class=\"name\">zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Logic/UnivLE.html#UnivLE\">UnivLE.{0, u}</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/UnivLE.html#UnivLE.zero","kind":"instance","line":60,"name":"UnivLE.zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Logic/UnivLE.lean#L60-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/UnivLE.html#UnivLE.self\"><span class=\"name\">UnivLE</span>.<span class=\"name\">self</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Logic/UnivLE.html#UnivLE\">UnivLE.{u, u}</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/UnivLE.html#UnivLE.self","kind":"instance","line":59,"name":"UnivLE.self","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Logic/UnivLE.lean#L59-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/UnivLE.html#UnivLE.trans\"><span class=\"name\">UnivLE</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<a href=\"./Mathlib/Logic/UnivLE.html#UnivLE\">UnivLE.{u, v}</a>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<a href=\"./Mathlib/Logic/UnivLE.html#UnivLE\">UnivLE.{v, w}</a>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Logic/UnivLE.html#UnivLE\">UnivLE.{u, w}</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/UnivLE.html#UnivLE.trans","kind":"theorem","line":56,"name":"UnivLE.trans","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Logic/UnivLE.lean#L56-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/UnivLE.html#Small.trans_univLE\"><span class=\"name\">Small</span>.<span class=\"name\">trans_univLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hα</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, w}</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <a href=\"./Mathlib/Logic/UnivLE.html#UnivLE\">UnivLE.{u, v}</a>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{v, w}</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/UnivLE.html#Small.trans_univLE","kind":"theorem","line":50,"name":"Small.trans_univLE","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Logic/UnivLE.lean#L50-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/UnivLE.html#univLE_max\"><span class=\"name\">univLE_max</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Logic/UnivLE.html#UnivLE\">UnivLE.{u, max u v}</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/UnivLE.html#univLE_max","kind":"theorem","line":48,"name":"univLE_max","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Logic/UnivLE.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/UnivLE.html#UnivLE.small\"><span class=\"name\">UnivLE</span>.<span class=\"name\">small</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <a href=\"./Mathlib/Logic/UnivLE.html#UnivLE\">UnivLE.{u, v}</a>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{v, u}</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/UnivLE.html#UnivLE.small","kind":"theorem","line":42,"name":"UnivLE.small","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Logic/UnivLE.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/UnivLE.html#UnivLE.mk\"><span class=\"name\">UnivLE</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">small</span> : <span class=\"fn\">∀ (<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u), <span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{v, u}</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Logic/UnivLE.html#UnivLE\">UnivLE.{u, v}</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/UnivLE.html#UnivLE.mk","kind":"ctor","line":41,"name":"UnivLE.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Logic/UnivLE.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/UnivLE.html#univLE_iff\"><span class=\"name\">univLE_iff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Logic/UnivLE.html#UnivLE\">UnivLE.{u, v}</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u), <span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{v, u}</a> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Logic/UnivLE.html#univLE_iff","kind":"theorem","line":40,"name":"univLE_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Logic/UnivLE.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/UnivLE.html#UnivLE\"><span class=\"name\">UnivLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"A class expressing a universe inequality. `UnivLE.{u, v}` expresses that `u ≤ v`.\n\nThere used to be a stronger definition `∀ α : Type max u v, Small.{v} α` that immediately implies\n`Small.{v} ((α : Type u) → (β : Type v))` which is essential for proving that `Type v` has\n`Type u`-indexed limits when `u ≤ v`. However the current weaker condition\n`∀ α : Type u, Small.{v} α` also implies the same, so we switched to use it for\nits simplicity and transitivity.\n\nThe strong definition easily implies the weaker definition (see below),\nbut we cannot prove the reverse implication.\nThis is because in Lean's type theory, while `max u v` is at least at big as `u` and `v`,\nit could be bigger than both!\nSee also `Mathlib/CategoryTheory/UnivLE.lean` for the statement that the stronger definition is\nequivalent to `EssSurj (uliftFunctor : Type v ⥤ Type max u v)`.\n","docLink":"./Mathlib/Logic/UnivLE.html#UnivLE","kind":"class","line":24,"name":"UnivLE","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Logic/UnivLE.lean#L24-L42"}}],"imports":["Init","Mathlib.Logic.Small.Defs"],"instances":[{"className":"UnivLE","name":"UnivLE.self","typeNames":[]},{"className":"UnivLE","name":"UnivLE.zero","typeNames":[]},{"className":"UnivLE","name":"univLE_of_max","typeNames":[]}],"name":"Mathlib.Logic.UnivLE"}