{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Ring/Int.html#Nat.exists_add_mul_eq_of_gcd_dvd_of_mul_pred_le\"><span class=\"name\">Nat</span>.<span class=\"name\">exists_add_mul_eq_of_gcd_dvd_of_mul_pred_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dvd</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">q</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#Nat.pred\">pred</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">q</span>.<a href=\"./Init/Prelude.html#Nat.pred\">pred</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"If the gcd of two natural numbers `p` and `q` divides a third natural number `n`,\nand if `n` is at least `(p - 1) * (q - 1)`, then `n` can be represented as an `ℕ`-linear\ncombination of `p` and `q`.\n\nTODO: show that if `p.gcd q = 1` and `0 ≤ n ≤ (p - 1) * (q - 1) - 1 = N`, then `n` is\nrepresentable iff `N - n` is not. In particular `N` is not representable, solving the\ncoin problem for two coins: https://en.wikipedia.org/wiki/Coin_problem#n_=_2. ","docLink":"./Mathlib/Algebra/Order/Ring/Int.html#Nat.exists_add_mul_eq_of_gcd_dvd_of_mul_pred_le","kind":"theorem","line":58,"name":"Nat.exists_add_mul_eq_of_gcd_dvd_of_mul_pred_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Order/Ring/Int.lean#L58-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Ring/Int.html#Int.add_two_le_iff_lt_of_even_sub\"><span class=\"name\">Int</span>.<span class=\"name\">add_two_le_iff_lt_of_even_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">even</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Even.html#Even\">Even</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">m</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Order/Ring/Int.html#Int.add_two_le_iff_lt_of_even_sub","kind":"theorem","line":53,"name":"Int.add_two_le_iff_lt_of_even_sub","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Order/Ring/Int.lean#L53-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Ring/Int.html#Int.two_le_iff_pos_of_even\"><span class=\"name\">Int</span>.<span class=\"name\">two_le_iff_pos_of_even</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">even</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Even.html#Even\">Even</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Order/Ring/Int.html#Int.two_le_iff_pos_of_even","kind":"theorem","line":50,"name":"Int.two_le_iff_pos_of_even","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Order/Ring/Int.lean#L50-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Ring/Int.html#Nat.cast_natAbs\"><span class=\"name\">Nat</span>.<span class=\"name\">cast_natAbs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Int/Cast/Defs.html#AddGroupWithOne\">AddGroupWithOne</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<a href=\"./Mathlib/Algebra/Order/Group/Unbundled/Abs.html#abs\">|</a><span class=\"fn\">n</span><a href=\"./Mathlib/Algebra/Order/Group/Unbundled/Abs.html#abs\">|</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Order/Ring/Int.html#Nat.cast_natAbs","kind":"theorem","line":46,"name":"Nat.cast_natAbs","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Order/Ring/Int.lean#L46-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Ring/Int.html#Int.isCompl_even_odd\"><span class=\"name\">Int</span>.<span class=\"name\">isCompl_even_odd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#IsCompl\">IsCompl</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">n</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Even.html#Even\">Even</a> <span class=\"fn\">n</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">n</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Parity.html#Odd\">Odd</a> <span class=\"fn\">n</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Order/Ring/Int.html#Int.isCompl_even_odd","kind":"theorem","line":43,"name":"Int.isCompl_even_odd","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Order/Ring/Int.lean#L43-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Ring/Int.html#Int.instIsStrictOrderedRing\"><span class=\"name\">Int</span>.<span class=\"name\">instIsStrictOrderedRing</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Order/Ring/Int.html#Int.instIsStrictOrderedRing","kind":"instance","line":39,"name":"Int.instIsStrictOrderedRing","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Order/Ring/Int.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Ring/Int.html#Int.instZeroLEOneClass\"><span class=\"name\">Int</span>.<span class=\"name\">instZeroLEOneClass</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/ZeroLEOne.html#ZeroLEOneClass\">ZeroLEOneClass</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Order/Ring/Int.html#Int.instZeroLEOneClass","kind":"instance","line":38,"name":"Int.instZeroLEOneClass","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Order/Ring/Int.lean#L38-L38"}}],"imports":["Init","Mathlib.Algebra.Order.Group.Int","Mathlib.Algebra.Order.Group.Unbundled.Int","Mathlib.Algebra.Order.Ring.Defs","Mathlib.Algebra.Ring.Int.Parity","Mathlib.Data.Int.GCD","Mathlib.Data.Nat.Cast.Order.Basic","Mathlib.Order.BooleanAlgebra.Set"],"instances":[{"className":"ZeroLEOneClass","name":"Int.instZeroLEOneClass","typeNames":["Int"]},{"className":"IsStrictOrderedRing","name":"Int.instIsStrictOrderedRing","typeNames":["Int"]}],"name":"Mathlib.Algebra.Order.Ring.Int"}