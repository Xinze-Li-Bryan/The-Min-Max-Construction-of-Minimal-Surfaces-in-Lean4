{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/GuessName.html#ToAdditive.guessName\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">guessName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Autogenerate additive name.\nThis runs in several steps:\n1) Split according to capitalisation rule and at `_`.\n2) Apply word-by-word translation rules.\n3) Fix up abbreviations that are not word-by-word translations, like \"addComm\" or \"Nonneg\".\n","docLink":"./Mathlib/Tactic/ToAdditive/GuessName.html#ToAdditive.guessName","kind":"def","line":240,"name":"ToAdditive.guessName","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/ToAdditive/GuessName.lean#L240-L253"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/GuessName.html#ToAdditive.fixAbbreviation\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">fixAbbreviation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></span></div></div>","info":{"doc":"There are a few abbreviations we use. For example \"Nonneg\" instead of \"ZeroLE\"\nor \"addComm\" instead of \"commAdd\".\nNote: The input to this function is case sensitive!\nTodo: A lot of abbreviations here are manual fixes and there might be room to\nimprove the naming logic to reduce the size of `fixAbbreviation`.\n","docLink":"./Mathlib/Tactic/ToAdditive/GuessName.html#ToAdditive.fixAbbreviation","kind":"def","line":145,"name":"ToAdditive.fixAbbreviation","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/ToAdditive/GuessName.lean#L145-L238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/GuessName.html#ToAdditive.applyNameDict\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">applyNameDict</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></span></div></div>","info":{"doc":"Turn each element to lower-case, apply the `nameDict` and\ncapitalize the output like the input.\n","docLink":"./Mathlib/Tactic/ToAdditive/GuessName.html#ToAdditive.applyNameDict","kind":"def","line":137,"name":"ToAdditive.applyNameDict","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/ToAdditive/GuessName.lean#L137-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/GuessName.html#ToAdditive.nameDict\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">nameDict</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></span></div></div>","info":{"doc":"Dictionary used by `guessName` to autogenerate names.\n\nNote: `guessName` capitalizes first element of the output according to\ncapitalization of the input. Input and first element should therefore be lower-case,\n2nd element should be capitalized properly.\n","docLink":"./Mathlib/Tactic/ToAdditive/GuessName.html#ToAdditive.nameDict","kind":"def","line":86,"name":"ToAdditive.nameDict","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/ToAdditive/GuessName.lean#L86-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/GuessName.html#ToAdditive.capitalizeFirstLike\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">capitalizeFirstLike</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></span></div></div>","info":{"doc":"Capitalize First element of a list like `s`.\nNote that we need to capitalize multiple characters in some cases,\nin examples like `HMul` or `hAdd`. ","docLink":"./Mathlib/Tactic/ToAdditive/GuessName.html#ToAdditive.capitalizeFirstLike","kind":"def","line":79,"name":"ToAdditive.capitalizeFirstLike","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/ToAdditive/GuessName.lean#L79-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/GuessName.html#ToAdditive.capitalizeLike\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">capitalizeLike</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r </span><span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Capitalizes `s` char-by-char like `r`. If `s` is longer, it leaves the tail untouched. ","docLink":"./Mathlib/Tactic/ToAdditive/GuessName.html#ToAdditive.capitalizeLike","kind":"def","line":75,"name":"ToAdditive.capitalizeLike","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/ToAdditive/GuessName.lean#L75-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/GuessName.html#ToAdditive.capitalizeLikeAux\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">capitalizeLikeAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Helper for `capitalizeLike`. ","docLink":"./Mathlib/Tactic/ToAdditive/GuessName.html#ToAdditive.capitalizeLikeAux","kind":"opaque","line":62,"name":"ToAdditive.capitalizeLikeAux","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/ToAdditive/GuessName.lean#L62-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/GuessName.html#String.splitCase\"><span class=\"name\">String</span>.<span class=\"name\">splitCase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i₀</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"This function takes a String and splits it into separate parts based on the following\n[naming conventions](https://github.com/leanprover-community/mathlib4/wiki#naming-convention).\n\nE.g. `#eval \"InvHMulLEConjugate₂SMul_ne_top\".splitCase` yields\n`[\"Inv\", \"HMul\", \"LE\", \"Conjugate₂\", \"SMul\", \"_\", \"ne\", \"_\", \"top\"]`. ","docLink":"./Mathlib/Tactic/ToAdditive/GuessName.html#String.splitCase","kind":"opaque","line":33,"name":"String.splitCase","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/ToAdditive/GuessName.lean#L33-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ToAdditive/GuessName.html#ToAdditive.endCapitalNames\"><span class=\"name\">ToAdditive</span>.<span class=\"name\">endCapitalNames</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/TreeMap/Basic.html#Std.TreeMap\">Std.TreeMap</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span> <a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a></span></div></div>","info":{"doc":"A set of strings of names that end in a capital letter.\n* If the string contains a lowercase letter, the string should be split between the first occurrence\n  of a lower-case letter followed by an upper-case letter.\n* If multiple strings have the same prefix, they should be grouped by prefix\n* In this case, the second list should be prefix-free\n  (no element can be a prefix of a later element)\n\nTodo: automate the translation from `String` to an element in this `TreeMap`\n  (but this would require having something similar to the `rb_lmap` from Lean 3). ","docLink":"./Mathlib/Tactic/ToAdditive/GuessName.html#ToAdditive.endCapitalNames","kind":"def","line":18,"name":"ToAdditive.endCapitalNames","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/ToAdditive/GuessName.lean#L18-L30"}}],"imports":["Init","Std.Data.TreeMap.Basic","Mathlib.Data.String.Defs"],"instances":[],"name":"Mathlib.Tactic.ToAdditive.GuessName"}