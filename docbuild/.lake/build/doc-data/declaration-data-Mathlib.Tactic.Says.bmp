{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Says.html#Mathlib.Tactic.Says.says\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Says</span>.<span class=\"name\">says</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>","info":{"doc":"If you write `X says`, where `X` is a tactic that produces a \"Try this: Y\" message,\nthen you will get a message \"Try this: X says Y\".\nOnce you've clicked to replace `X says` with `X says Y`,\nafterwards `X says Y` will only run `Y`.\n\nThe typical usage case is:\n```\nsimp? [X] says simp only [X, Y, Z]\n```\n\nIf you use `set_option says.verify true` (set automatically during CI) then `X says Y`\nruns `X` and verifies that it still prints \"Try this: Y\".\n","docLink":"./Mathlib/Tactic/Says.html#Mathlib.Tactic.Says.says","kind":"def","line":100,"name":"Mathlib.Tactic.Says.says","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Says.lean#L100-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Says.html#Mathlib.Tactic.Says.evalTacticCapturingTryThis\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Says</span>.<span class=\"name\">evalTacticCapturingTryThis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tac</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.tacticSeq</span>)</span></div></div>","info":{"doc":"Run `evalTactic`, capturing a \"Try this:\" message and converting it back to syntax.\n","docLink":"./Mathlib/Tactic/Says.html#Mathlib.Tactic.Says.evalTacticCapturingTryThis","kind":"def","line":85,"name":"Mathlib.Tactic.Says.evalTacticCapturingTryThis","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Says.lean#L85-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Says.html#Mathlib.Tactic.Says.evalTacticCapturingInfo\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Says</span>.<span class=\"name\">evalTacticCapturingInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tac</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Message.html#Lean.Message\">Lean.Message</a>)</span></span></div></div>","info":{"doc":"Run `evalTactic`, capturing any new info messages.\n","docLink":"./Mathlib/Tactic/Says.html#Mathlib.Tactic.Says.evalTacticCapturingInfo","kind":"def","line":79,"name":"Mathlib.Tactic.Says.evalTacticCapturingInfo","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Says.lean#L79-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Says.html#Mathlib.Tactic.Says.evalTacticCapturingMessages\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Says</span>.<span class=\"name\">evalTacticCapturingMessages</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tac</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">only</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.Message\">Lean.Message</a> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Message.html#Lean.Message\">Lean.Message</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Message.html#Lean.Message\">Lean.Message</a>)</span></span></div></div>","info":{"doc":"Run `evalTactic`, capturing any new messages.\nThe optional `only` argument allows selecting which messages should be captured,\nor left in the message log.\n","docLink":"./Mathlib/Tactic/Says.html#Mathlib.Tactic.Says.evalTacticCapturingMessages","kind":"def","line":60,"name":"Mathlib.Tactic.Says.evalTacticCapturingMessages","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Says.lean#L60-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Says.html#Mathlib.Tactic.Says.parseAsTacticSeq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Says</span>.<span class=\"name\">parseAsTacticSeq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fileName</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;&lt;input&gt;&quot;</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.tacticSeq</span>)</span></div></div>","info":{"doc":"This is a slight modification of `Parser.runParserCategory`. ","docLink":"./Mathlib/Tactic/Says.html#Mathlib.Tactic.Says.parseAsTacticSeq","kind":"def","line":47,"name":"Mathlib.Tactic.Says.parseAsTacticSeq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Says.lean#L47-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Says.html#Mathlib.Tactic.Says.says.no_verify_in_CI\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Says</span>.<span class=\"name\">says</span>.<span class=\"name\">no_verify_in_CI</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"This option is only used in CI to negate `says.verify`. ","docLink":"./Mathlib/Tactic/Says.html#Mathlib.Tactic.Says.says.no_verify_in_CI","kind":"opaque","line":39,"name":"Mathlib.Tactic.Says.says.no_verify_in_CI","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Says.lean#L39-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Says.html#Mathlib.Tactic.Says.says.verify\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Says</span>.<span class=\"name\">says</span>.<span class=\"name\">verify</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"If this option is `true`, verify for `X says Y` that `X says` outputs `Y`. ","docLink":"./Mathlib/Tactic/Says.html#Mathlib.Tactic.Says.says.verify","kind":"opaque","line":33,"name":"Mathlib.Tactic.Says.says.verify","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Says.lean#L33-L37"}}],"imports":["Init","Mathlib.Init","Lean.Meta.Tactic.TryThis","Batteries.Linter.UnreachableTactic","Qq.Match"],"instances":[],"name":"Mathlib.Tactic.Says"}