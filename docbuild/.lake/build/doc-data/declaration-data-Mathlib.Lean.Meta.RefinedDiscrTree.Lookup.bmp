{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.getMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">getMatch</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree\">RefinedDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unify </span><span class=\"fn\">matchRootStar</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a> <span class=\"fn\">(<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">α</span>)</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree\">RefinedDiscrTree</a> <span class=\"fn\">α</span></span>)</span></div></div>","info":{"doc":"Find values that match `e` in `d`.\n* If `unify == true` then metavariables in `e` can be assigned.\n* If `matchRootStar == true` then we allow metavariables at the root to unify.\n  Set this to `false` to avoid getting excessively many results.\n\nNote: to preserve the reference to `d`, `getMatch` will never throw an error,\nand instead it returns an `Except Exception (MatchResult α)`.\n","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.getMatch","kind":"def","line":263,"name":"Lean.Meta.RefinedDiscrTree.getMatch","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.lean#L263-L290"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.instInhabitedPartialMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instInhabitedPartialMatch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#_private.Mathlib.Lean.Meta.RefinedDiscrTree.Lookup.0.Lean.Meta.RefinedDiscrTree.PartialMatch\">Lean.Meta.RefinedDiscrTree.PartialMatch✝</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.instInhabitedPartialMatch","kind":"instance","line":139,"name":"Lean.Meta.RefinedDiscrTree.instInhabitedPartialMatch","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.lean#L139-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.instInhabitedPartialMatch.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instInhabitedPartialMatch</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#_private.Mathlib.Lean.Meta.RefinedDiscrTree.Lookup.0.Lean.Meta.RefinedDiscrTree.PartialMatch\">Lean.Meta.RefinedDiscrTree.PartialMatch✝</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.instInhabitedPartialMatch.default","kind":"def","line":139,"name":"Lean.Meta.RefinedDiscrTree.instInhabitedPartialMatch.default","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.lean#L139-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.MatchResult.flatten\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MatchResult</span>.<span class=\"name\">flatten</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mr</span> : <span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Convert a `MatchResult` into an `Array` of `Array`s. Each `Array` corresponds to one pattern.\nThe better matching patterns are at the start of the outer array.\nFor each inner array, the entries are ordered in the order they were inserted.\n","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.MatchResult.flatten","kind":"def","line":115,"name":"Lean.Meta.RefinedDiscrTree.MatchResult.flatten","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.lean#L115-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.MatchResult.toArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MatchResult</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mr</span> : <span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Convert a `MatchResult` into a `Array`, with better matches at the start of the array.\n","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.MatchResult.toArray","kind":"def","line":109,"name":"Lean.Meta.RefinedDiscrTree.MatchResult.toArray","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.lean#L109-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.instInhabitedMatchResult.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instInhabitedMatchResult</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.instInhabitedMatchResult.default","kind":"def","line":104,"name":"Lean.Meta.RefinedDiscrTree.instInhabitedMatchResult.default","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.lean#L104-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.instInhabitedMatchResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">instInhabitedMatchResult</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">a✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.instInhabitedMatchResult","kind":"instance","line":104,"name":"Lean.Meta.RefinedDiscrTree.instInhabitedMatchResult","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.lean#L104-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.MatchResult.elts\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MatchResult</span>.<span class=\"name\">elts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/TreeMap/Basic.html#Std.TreeMap\">Std.TreeMap</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span>)</span> <a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a></span></div></div>","info":{"doc":"The elements in the match result.\n\nThe `Nat` in the tree map represents the `score` of the results.\nThe elements are arrays of arrays, where each sub-array corresponds to one discr tree pattern.\n","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.MatchResult.elts","kind":"def","line":103,"name":"Lean.Meta.RefinedDiscrTree.MatchResult.elts","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.lean#L103-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.MatchResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MatchResult</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elts</span> : <span class=\"fn\"><a href=\"./Std/Data/TreeMap/Basic.html#Std.TreeMap\">Std.TreeMap</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span>)</span> <a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.MatchResult.mk","kind":"ctor","line":96,"name":"Lean.Meta.RefinedDiscrTree.MatchResult.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.lean#L96-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.MatchResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">MatchResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A match result contains the results from matching a term against\npatterns in the discrimination tree.\n","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.MatchResult","kind":"structure","line":92,"name":"Lean.Meta.RefinedDiscrTree.MatchResult","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.lean#L92-L104"}}],"imports":["Init","Mathlib.Lean.Meta.RefinedDiscrTree.Encode"],"instances":[{"className":"Inhabited","name":"Lean.Meta.RefinedDiscrTree.instInhabitedMatchResult","typeNames":["Lean.Meta.RefinedDiscrTree.MatchResult"]},{"className":"Inhabited","name":"Lean.Meta.RefinedDiscrTree.instInhabitedPartialMatch","typeNames":["_private.Mathlib.Lean.Meta.RefinedDiscrTree.Lookup.0.Lean.Meta.RefinedDiscrTree.PartialMatch"]}],"name":"Mathlib.Lean.Meta.RefinedDiscrTree.Lookup"}