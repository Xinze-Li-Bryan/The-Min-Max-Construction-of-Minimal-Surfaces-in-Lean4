{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.ext_iff\"><span class=\"name\">EStateM</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.ext_iff","kind":"theorem","line":213,"name":"EStateM.ext_iff","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L213-L213"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.ext\"><span class=\"name\">EStateM</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.ext","kind":"theorem","line":213,"name":"EStateM.ext","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L213-L215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_fromStateM\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_fromStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Control/EState.html#EStateM.fromStateM\">fromStateM</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateT.run'\">StateT.run'</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_fromStateM","kind":"theorem","line":210,"name":"EStateM.run'_fromStateM","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L210-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_fromStateM\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_fromStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Control/EState.html#EStateM.fromStateM\">fromStateM</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Control/State.html#StateT.run\">StateT.run</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Control/State.html#StateT.run\">StateT.run</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_fromStateM","kind":"theorem","line":206,"name":"EStateM.run_fromStateM","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L206-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_tryFinally'\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_tryFinally'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Control/Except.html#MonadFinally.tryFinally'\">tryFinally'</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>) =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">h</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span>)</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span>)</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span> =&gt; <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_tryFinally'","kind":"theorem","line":196,"name":"EStateM.run'_tryFinally'","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L196-L204"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_tryFinally'\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_tryFinally'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Control/Except.html#MonadFinally.tryFinally'\">tryFinally'</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> =&gt;\n    <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">h</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span>)</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n    | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <span class=\"fn\">s</span></span>\n    | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e₁</span> <span class=\"fn\">s</span></span> =&gt;\n    <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">h</span> <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n    | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e₁</span> <span class=\"fn\">s</span></span>\n    | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e₂</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e₂</span> <span class=\"fn\">s</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_tryFinally'","kind":"theorem","line":187,"name":"EStateM.run_tryFinally'","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L187-L194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_adaptExcept\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_adaptExcept</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\">ε</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.adaptExcept\">adaptExcept</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_adaptExcept","kind":"theorem","line":182,"name":"EStateM.run'_adaptExcept","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L182-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_adaptExcept\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_adaptExcept</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\">ε</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.adaptExcept\">adaptExcept</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">e</span>)</span> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_adaptExcept","kind":"theorem","line":173,"name":"EStateM.run_adaptExcept","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L173-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_tryCatch\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_tryCatch</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε </span><span class=\"fn\">α </span><span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Backtrackable\">Backtrackable</a> <span class=\"fn\">δ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">handler</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadExcept.tryCatch\">tryCatch</a> <span class=\"fn\">body</span> <span class=\"fn\">handler</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">body</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">x</span> <span class=\"fn\">a</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">handler</span> <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.restore\">Backtrackable.restore</a> <span class=\"fn\">s'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.save\">Backtrackable.save</a> <span class=\"fn\">s</span>)</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_tryCatch","kind":"theorem","line":165,"name":"EStateM.run'_tryCatch","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L165-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_tryCatch\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_tryCatch</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε </span><span class=\"fn\">α </span><span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Backtrackable\">Backtrackable</a> <span class=\"fn\">δ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">handler</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadExcept.tryCatch\">tryCatch</a> <span class=\"fn\">body</span> <span class=\"fn\">handler</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">body</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">handler</span> <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.restore\">Backtrackable.restore</a> <span class=\"fn\">s'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.save\">Backtrackable.save</a> <span class=\"fn\">s</span>)</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_tryCatch","kind":"theorem","line":155,"name":"EStateM.run_tryCatch","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L155-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_orElse\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_orElse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε </span><span class=\"fn\">α </span><span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Backtrackable\">Backtrackable</a> <span class=\"fn\">δ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x₁ </span><span class=\"fn\">x₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x₁</span> &lt;|&gt; <span class=\"fn\">x₂</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₁</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">x</span> <span class=\"fn\">a</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">a</span> <span class=\"fn\">s'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₂</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.restore\">Backtrackable.restore</a> <span class=\"fn\">s'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.save\">Backtrackable.save</a> <span class=\"fn\">s</span>)</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_orElse","kind":"theorem","line":148,"name":"EStateM.run'_orElse","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L148-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_orElse\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_orElse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε </span><span class=\"fn\">α </span><span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Backtrackable\">Backtrackable</a> <span class=\"fn\">δ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x₁ </span><span class=\"fn\">x₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x₁</span> &lt;|&gt; <span class=\"fn\">x₂</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₁</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">a</span> <span class=\"fn\">s'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₂</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.restore\">Backtrackable.restore</a> <span class=\"fn\">s'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.save\">Backtrackable.save</a> <span class=\"fn\">s</span>)</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_orElse","kind":"theorem","line":139,"name":"EStateM.run_orElse","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L139-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_throw\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_throw</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadExcept.throw\">throw</a> <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_throw","kind":"theorem","line":136,"name":"EStateM.run'_throw","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L136-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_throw\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_throw</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadExcept.throw\">throw</a> <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_throw","kind":"theorem","line":133,"name":"EStateM.run_throw","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L133-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_getModify\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_getModify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#getModify\">getModify</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_getModify","kind":"theorem","line":130,"name":"EStateM.run'_getModify","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L130-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_getModify\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_getModify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#getModify\">getModify</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_getModify","kind":"theorem","line":127,"name":"EStateM.run_getModify","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L127-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_modifyGet\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_modifyGet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadState.modifyGet\">modifyGet</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_modifyGet","kind":"theorem","line":124,"name":"EStateM.run'_modifyGet","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L124-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_modifyGet\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_modifyGet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadState.modifyGet\">modifyGet</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_modifyGet","kind":"theorem","line":121,"name":"EStateM.run_modifyGet","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L121-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_modify\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#modify\">modify</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_modify","kind":"theorem","line":118,"name":"EStateM.run'_modify","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L118-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_modify\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#modify\">modify</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_modify","kind":"theorem","line":115,"name":"EStateM.run_modify","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L115-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_set\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadStateOf.set\">set</a> <span class=\"fn\">v</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_set","kind":"theorem","line":112,"name":"EStateM.run'_set","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L112-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_set\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadStateOf.set\">set</a> <span class=\"fn\">v</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_set","kind":"theorem","line":109,"name":"EStateM.run_set","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L109-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_get\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadState.get\">get</a>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_get","kind":"theorem","line":106,"name":"EStateM.run'_get","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L106-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_get\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadState.get\">get</a>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">s</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_get","kind":"theorem","line":103,"name":"EStateM.run_get","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L103-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_seqRight\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_seqRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> *&gt; <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span> =&gt; <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_seqRight","kind":"theorem","line":96,"name":"EStateM.run'_seqRight","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L96-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_seqRight\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_seqRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> *&gt; <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_seqRight","kind":"theorem","line":91,"name":"EStateM.run_seqRight","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L91-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_seqLeft\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_seqLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> &lt;* <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">v</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\">v</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span>)</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span> =&gt; <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_seqLeft","kind":"theorem","line":85,"name":"EStateM.run'_seqLeft","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L85-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_seqLeft\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_seqLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> &lt;* <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">v</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map\">Result.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\">v</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span>)</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_seqLeft","kind":"theorem","line":79,"name":"EStateM.run_seqLeft","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L79-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_seq\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_seq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> &lt;*&gt; <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">g</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span>)</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span> =&gt; <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_seq","kind":"theorem","line":72,"name":"EStateM.run'_seq","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L72-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_seq\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_seq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> &lt;*&gt; <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">g</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map\">Result.map</a> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span>)</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_seq","kind":"theorem","line":65,"name":"EStateM.run_seq","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L65-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_map\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">ε </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>).<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_map","kind":"theorem","line":60,"name":"EStateM.run'_map","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L60-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_map\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">ε </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>).<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map\">Result.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_map","kind":"theorem","line":57,"name":"EStateM.run_map","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L57-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_bind\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>).<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span> =&gt; <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_bind","kind":"theorem","line":50,"name":"EStateM.run'_bind","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L50-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_bind\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>).<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_bind","kind":"theorem","line":45,"name":"EStateM.run_bind","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L45-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_pure\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_pure","kind":"theorem","line":42,"name":"EStateM.run'_pure","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L42-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_pure\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_pure","kind":"theorem","line":39,"name":"EStateM.run_pure","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L39-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.dummyRestore_apply\"><span class=\"name\">EStateM</span>.<span class=\"name\">dummyRestore_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.dummyRestore\">dummyRestore</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Function.const\">Function.const</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.dummyRestore_apply","kind":"theorem","line":37,"name":"EStateM.dummyRestore_apply","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.dummySave_apply\"><span class=\"name\">EStateM</span>.<span class=\"name\">dummySave_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.dummySave\">dummySave</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.dummySave_apply","kind":"theorem","line":35,"name":"EStateM.dummySave_apply","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map_eq_error\"><span class=\"name\">EStateM</span>.<span class=\"name\">Result</span>.<span class=\"name\">map_eq_error</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result\">Result</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.Result.map_eq_error","kind":"theorem","line":29,"name":"EStateM.Result.map_eq_error","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L29-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map_eq_ok\"><span class=\"name\">EStateM</span>.<span class=\"name\">Result</span>.<span class=\"name\">map_eq_ok</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result\">Result</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">ok</a> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">ok</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.Result.map_eq_ok","kind":"theorem","line":25,"name":"EStateM.Result.map_eq_ok","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L25-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map_error\"><span class=\"name\">EStateM</span>.<span class=\"name\">Result</span>.<span class=\"name\">map_error</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Result.error\">error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.Result.map_error","kind":"theorem","line":22,"name":"EStateM.Result.map_error","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L22-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map_ok\"><span class=\"name\">EStateM</span>.<span class=\"name\">Result</span>.<span class=\"name\">map_ok</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Result.ok\">ok</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">ok</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.Result.map_ok","kind":"theorem","line":19,"name":"EStateM.Result.map_ok","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L19-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map\"><span class=\"name\">EStateM</span>.<span class=\"name\">Result</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result\">Result</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result\">Result</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Map a function over an `EStateM.Result`, preserving states and errors. ","docLink":"./Batteries/Lean/EStateM.html#EStateM.Result.map","kind":"def","line":13,"name":"EStateM.Result.map","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Lean/EStateM.lean#L13-L17"}}],"imports":["Init"],"instances":[],"name":"Batteries.Lean.EStateM"}