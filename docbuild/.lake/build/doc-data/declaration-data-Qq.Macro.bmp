{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.floatExprAntiquot\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">floatExprAntiquot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">Lean.MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Lean.Term</a> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Lean.Ident</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Lean.Term</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Lean.Term</a>))</span> <span class=\"fn\">m</span> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Lean.Term</a></span></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.floatExprAntiquot","kind":"def","line":644,"name":"Qq.Impl.floatExprAntiquot","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L644-L648"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.floatExprAntiquot'\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">floatExprAntiquot'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">Lean.MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>))</span> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.floatExprAntiquot'","kind":"opaque","line":621,"name":"Qq.Impl.floatExprAntiquot'","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L621-L641"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.floatLevelAntiquot'\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">floatLevelAntiquot'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">Lean.MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>))</span> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.floatLevelAntiquot'","kind":"opaque","line":609,"name":"Qq.Impl.floatLevelAntiquot'","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L609-L618"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.«term_=Q_»\"><span class=\"name\">Qq</span>.<span class=\"name\">«term_=Q_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>","info":{"doc":"`a =Q b` says that `a` and `b` are definitionally equal. ","docLink":"./Qq/Macro.html#Qq.«term_=Q_»","kind":"def","line":597,"name":"Qq.«term_=Q_»","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L597-L598"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.«termQ(__)_1»\"><span class=\"name\">Qq</span>.<span class=\"name\">«termQ(__)_1»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`Q(α)` is the type of Lean expressions having type `α`.  ","docLink":"./Qq/Macro.html#Qq.«termQ(__)_1»","kind":"def","line":585,"name":"Qq.«termQ(__)_1»","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L585-L586"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.«termQ(__)»\"><span class=\"name\">Qq</span>.<span class=\"name\">«termQ(__)»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`q(t)` quotes the Lean expression `t` into a `Q(α)` (if `t : α`) ","docLink":"./Qq/Macro.html#Qq.«termQ(__)»","kind":"def","line":566,"name":"Qq.«termQ(__)»","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L566-L567"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.macro\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">macro</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.macro","kind":"def","line":527,"name":"Qq.Impl.macro","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L527-L564"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.«term_=QL_»\"><span class=\"name\">Qq</span>.<span class=\"name\">«term_=QL_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`a =QL b` says that the levels `a` and `b` are definitionally equal. ","docLink":"./Qq/Macro.html#Qq.«term_=QL_»","kind":"def","line":523,"name":"Qq.«term_=QL_»","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L523-L524"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.«termQl(_)»\"><span class=\"name\">Qq</span>.<span class=\"name\">«termQl(_)»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`ql(u)` quotes the universe level `u`. ","docLink":"./Qq/Macro.html#Qq.«termQl(_)»","kind":"def","line":514,"name":"Qq.«termQl(_)»","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L514-L521"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.withLevelNames\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">withLevelNames</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">UnquoteState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.withLevelNames","kind":"def","line":496,"name":"Qq.Impl.UnquoteState.withLevelNames","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L496-L512"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.withProcessPostponed\"><span class=\"name\">Qq</span>.<span class=\"name\">withProcessPostponed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.withProcessPostponed","kind":"def","line":488,"name":"Qq.withProcessPostponed","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L488-L494"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.lctxHasMVar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">lctxHasMVar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.lctxHasMVar","kind":"def","line":481,"name":"Qq.Impl.lctxHasMVar","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L481-L482"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.MVarSynth.synth\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">MVarSynth</span>.<span class=\"name\">synth</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\">MVarSynth</a> → <span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.QuoteM\">QuoteM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.MVarSynth.synth","kind":"def","line":476,"name":"Qq.Impl.MVarSynth.synth","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L476-L479"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.MVarSynth.isAssigned\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">MVarSynth</span>.<span class=\"name\">isAssigned</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\">MVarSynth</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.MVarSynth.isAssigned","kind":"def","line":471,"name":"Qq.Impl.MVarSynth.isAssigned","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L471-L474"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteMVar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.unquoteMVar","kind":"def","line":467,"name":"Qq.Impl.unquoteMVar","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L467-L469"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteMVarCore\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteMVarCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.unquoteMVarCore","kind":"def","line":451,"name":"Qq.Impl.unquoteMVarCore","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L451-L465"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.quoteLCtx\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">quoteLCtx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> (<a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></div></div>","info":{"doc":"Translates an arbitrary local context to a context of\nQ-annotated expressions. Used by `by_elabq` and `run_tacq`.\n","docLink":"./Qq/Macro.html#Qq.Impl.quoteLCtx","kind":"def","line":417,"name":"Qq.Impl.quoteLCtx","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L417-L449"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.quoteExpr\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">quoteExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.QuoteM\">QuoteM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.quoteExpr","kind":"opaque","line":384,"name":"Qq.Impl.quoteExpr","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L384-L415"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.quoteLevelList\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">quoteLevelList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span> → <span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.QuoteM\">QuoteM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.quoteLevelList","kind":"def","line":378,"name":"Qq.Impl.quoteLevelList","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L378-L382"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.quoteLevel\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">quoteLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a> → <span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.QuoteM\">QuoteM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.quoteLevel","kind":"def","line":360,"name":"Qq.Impl.quoteLevel","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L360-L376"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.isLevelFVar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">isLevelFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.isLevelFVar","kind":"def","line":351,"name":"Qq.Impl.isLevelFVar","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L351-L358"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteLCtx\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteLCtx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.unquoteLCtx","kind":"def","line":310,"name":"Qq.Impl.unquoteLCtx","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L310-L349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteLevelLCtx\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteLevelLCtx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addDefEqs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.unquoteLevelLCtx","kind":"def","line":293,"name":"Qq.Impl.unquoteLevelLCtx","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L293-L308"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.substLevel\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">substLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.substLevel","kind":"def","line":287,"name":"Qq.Impl.substLevel","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L287-L291"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteExpr\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.unquoteExpr","kind":"opaque","line":235,"name":"Qq.Impl.unquoteExpr","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L235-L283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteExprMVar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteExprMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.unquoteExprMVar","kind":"opaque","line":222,"name":"Qq.Impl.unquoteExprMVar","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L222-L233"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteExprList\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteExprList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.unquoteExprList","kind":"opaque","line":213,"name":"Qq.Impl.unquoteExprList","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L213-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.makeDefEq\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">makeDefEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.makeDefEq","kind":"def","line":206,"name":"Qq.Impl.makeDefEq","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L206-L209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.makeZetaReduce\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">makeZetaReduce</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.makeZetaReduce","kind":"def","line":193,"name":"Qq.Impl.makeZetaReduce","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L193-L204"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.betaRev'\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">betaRev'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">revArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.betaRev'","kind":"opaque","line":190,"name":"Qq.Impl.betaRev'","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L190-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.mkAbstractedName\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkAbstractedName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.mkAbstractedName","kind":"def","line":177,"name":"Qq.Impl.mkAbstractedName","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L177-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteLevelList\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteLevelList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.unquoteLevelList","kind":"opaque","line":168,"name":"Qq.Impl.unquoteLevelList","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L168-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteLevelMVar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteLevelMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.unquoteLevelMVar","kind":"def","line":157,"name":"Qq.Impl.unquoteLevelMVar","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L157-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteLevel\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.unquoteLevel","kind":"opaque","line":134,"name":"Qq.Impl.unquoteLevel","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L134-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.whnfR\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">whnfR</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.whnfR","kind":"def","line":129,"name":"Qq.Impl.whnfR","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L129-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.whnf\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">whnf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e0</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> := <span class=\"fn\">e</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.whnf","kind":"opaque","line":122,"name":"Qq.Impl.whnf","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L122-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.isBad\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">isBad</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.isBad","kind":"def","line":116,"name":"Qq.Impl.isBad","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L116-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.isAssignablePattern\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">isAssignablePattern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.isAssignablePattern","kind":"def","line":109,"name":"Qq.Impl.isAssignablePattern","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L109-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.mkAbstractedLevelName\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkAbstractedLevelName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.mkAbstractedLevelName","kind":"def","line":106,"name":"Qq.Impl.mkAbstractedLevelName","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L106-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.addSyntaxDollar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">addSyntaxDollar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.addSyntaxDollar","kind":"def","line":101,"name":"Qq.Impl.addSyntaxDollar","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L101-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.stripDollars\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">stripDollars</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.stripDollars","kind":"def","line":92,"name":"Qq.Impl.stripDollars","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L92-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.removeDollar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">removeDollar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.removeDollar","kind":"def","line":83,"name":"Qq.Impl.removeDollar","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L83-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.addDollar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">addDollar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.addDollar","kind":"def","line":76,"name":"Qq.Impl.addDollar","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L76-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.withUnquotedLCtx\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">withUnquotedLCtx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Qq/Macro.html#Qq.Impl.QuoteM\">QuoteM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.withUnquotedLCtx","kind":"def","line":71,"name":"Qq.Impl.withUnquotedLCtx","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L71-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.determineLocalInstances\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">determineLocalInstances</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.determineLocalInstances","kind":"def","line":63,"name":"Qq.Impl.determineLocalInstances","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L63-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.instMonadLiftQuoteMUnquoteM\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">instMonadLiftQuoteMUnquoteM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <a href=\"./Qq/Macro.html#Qq.Impl.QuoteM\">QuoteM</a> <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.instMonadLiftQuoteMUnquoteM","kind":"instance","line":60,"name":"Qq.Impl.instMonadLiftQuoteMUnquoteM","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L60-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.QuoteM\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">QuoteM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.QuoteM","kind":"def","line":58,"name":"Qq.Impl.QuoteM","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L58-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteM","kind":"def","line":56,"name":"Qq.Impl.UnquoteM","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L56-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.mayPostpone\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">mayPostpone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.mayPostpone","kind":"def","line":54,"name":"Qq.Impl.UnquoteState.mayPostpone","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L54-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.levelNames\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">levelNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.levelNames","kind":"def","line":52,"name":"Qq.Impl.UnquoteState.levelNames","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L52-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.abstractedFVars\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">abstractedFVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>","info":{"doc":"New free variables in the new context that were newly introduced for irreducible expressions. ","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.abstractedFVars","kind":"def","line":50,"name":"Qq.Impl.UnquoteState.abstractedFVars","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.levelBackSubst\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">levelBackSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"Maps free variables in the new context to levels in the old context (of type Level) ","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.levelBackSubst","kind":"def","line":47,"name":"Qq.Impl.UnquoteState.levelBackSubst","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L47-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.exprBackSubst\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">exprBackSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult\">ExprBackSubstResult</a></span></div></div>","info":{"doc":"Maps free variables in the new context to expressions in the old context (of type Expr) ","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.exprBackSubst","kind":"def","line":44,"name":"Qq.Impl.UnquoteState.exprBackSubst","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.unquoted\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">unquoted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a></div></div>","info":{"doc":"New unquoted local context ","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.unquoted","kind":"def","line":41,"name":"Qq.Impl.UnquoteState.unquoted","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.exprSubst\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">exprSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"Maps quoted expressions (of type Expr) in the old context to expressions in the new context ","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.exprSubst","kind":"def","line":38,"name":"Qq.Impl.UnquoteState.exprSubst","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.levelSubst\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">levelSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span></div></div>","info":{"doc":"Maps quoted expressions (of type Level) in the old context to level parameter names in the new context ","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.levelSubst","kind":"def","line":35,"name":"Qq.Impl.UnquoteState.levelSubst","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.mvars\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">mvars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\">MVarSynth</a>)</span></div></div>","info":{"doc":"Quoted mvars in the outside lctx (of type `Level`, `Quoted _`, or `Type`).\nThe outside mvars can also be of the form `?m x y z`.\n","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.mvars","kind":"def","line":32,"name":"Qq.Impl.UnquoteState.mvars","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.mk\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\">MVarSynth</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelSubst</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exprSubst</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unquoted</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exprBackSubst</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult\">ExprBackSubstResult</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelBackSubst</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">abstractedFVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mayPostpone</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">UnquoteState</a></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.mk","kind":"ctor","line":27,"name":"Qq.Impl.UnquoteState.mk","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L27-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState","kind":"structure","line":27,"name":"Qq.Impl.UnquoteState","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L27-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.MVarSynth.level\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">MVarSynth</span>.<span class=\"name\">level</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unquotedMVar</span> : <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\">MVarSynth</a></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.MVarSynth.level","kind":"ctor","line":25,"name":"Qq.Impl.MVarSynth.level","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.MVarSynth.type\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">MVarSynth</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unquotedMVar</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\">MVarSynth</a></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.MVarSynth.type","kind":"ctor","line":24,"name":"Qq.Impl.MVarSynth.type","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.MVarSynth.term\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">MVarSynth</span>.<span class=\"name\">term</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">quotedType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unquotedMVar</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\">MVarSynth</a></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.MVarSynth.term","kind":"ctor","line":23,"name":"Qq.Impl.MVarSynth.term","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">MVarSynth</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.MVarSynth","kind":"inductive","line":22,"name":"Qq.Impl.MVarSynth","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L22-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult.unquoted\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ExprBackSubstResult</span>.<span class=\"name\">unquoted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult\">ExprBackSubstResult</a></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult.unquoted","kind":"ctor","line":20,"name":"Qq.Impl.ExprBackSubstResult.unquoted","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L20-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult.quoted\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ExprBackSubstResult</span>.<span class=\"name\">quoted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult\">ExprBackSubstResult</a></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult.quoted","kind":"ctor","line":19,"name":"Qq.Impl.ExprBackSubstResult.quoted","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L19-L19"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ExprBackSubstResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult","kind":"inductive","line":18,"name":"Qq.Impl.ExprBackSubstResult","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Macro.lean#L18-L20"}}],"imports":["Init","Lean","Qq.ForLean.ReduceEval","Qq.ForLean.ToExpr","Qq.Typ"],"instances":[{"className":"MonadLift","name":"Qq.Impl.instMonadLiftQuoteMUnquoteM","typeNames":["Qq.Impl.QuoteM","Qq.Impl.UnquoteM"]}],"name":"Qq.Macro"}