{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Constructor.html#tacticEconstructor\"><span class=\"name\">tacticEconstructor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`econstructor` is like `constructor`\n(it calls `apply` using the first matching constructor of an inductive datatype)\nexcept only non-dependent premises are added as new goals.\n","docLink":"./Mathlib/Tactic/Constructor.html#tacticEconstructor","kind":"def","line":31,"name":"tacticEconstructor","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Constructor.lean#L31-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Constructor.html#tacticFconstructor\"><span class=\"name\">tacticFconstructor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`fconstructor` is like `constructor`\n(it calls `apply` using the first matching constructor of an inductive datatype)\nexcept that it does not reorder goals.\n","docLink":"./Mathlib/Tactic/Constructor.html#tacticFconstructor","kind":"def","line":21,"name":"tacticFconstructor","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Constructor.lean#L21-L29"}}],"imports":["Init","Mathlib.Init","Lean.Elab.SyntheticMVars","Lean.Meta.Tactic.Constructor"],"instances":[],"name":"Mathlib.Tactic.Constructor"}