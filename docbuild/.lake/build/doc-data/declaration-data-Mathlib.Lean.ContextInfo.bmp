{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/ContextInfo.html#Lean.Elab.ContextInfo.runTacticCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ContextInfo</span>.<span class=\"name\">runTacticCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo\">TacticInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Command.CommandElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"Run tactic code, given by a piece of syntax, in the context of an infotree node. ","docLink":"./Mathlib/Lean/ContextInfo.html#Lean.Elab.ContextInfo.runTacticCode","kind":"def","line":81,"name":"Lean.Elab.ContextInfo.runTacticCode","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/ContextInfo.lean#L81-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/ContextInfo.html#Lean.Elab.ContextInfo.runTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ContextInfo</span>.<span class=\"name\">runTactic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo\">TacticInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Command.CommandElabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Run a tactic computation in the context of an infotree node. ","docLink":"./Mathlib/Lean/ContextInfo.html#Lean.Elab.ContextInfo.runTactic","kind":"def","line":68,"name":"Lean.Elab.ContextInfo.runTactic","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/ContextInfo.lean#L68-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/ContextInfo.html#Lean.Elab.ContextInfo.runMetaMWithMessages\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ContextInfo</span>.<span class=\"name\">runMetaMWithMessages</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Command.CommandElabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Embeds a `MetaM` action in `CommandElabM` by supplying the information stored in `info`.\n\nCopy of `ContextInfo.runMetaM` that makes use of the `CommandElabM` context for:\n* message logging (messages produced by the `CoreM` action are migrated back),\n* metavariable generation,\n* auxiliary declaration generation,\n* local instances.\n","docLink":"./Mathlib/Lean/ContextInfo.html#Lean.Elab.ContextInfo.runMetaMWithMessages","kind":"def","line":53,"name":"Lean.Elab.ContextInfo.runMetaMWithMessages","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/ContextInfo.lean#L53-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/ContextInfo.html#Lean.Elab.ContextInfo.runCoreMWithMessages\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ContextInfo</span>.<span class=\"name\">runCoreMWithMessages</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Command.CommandElabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Embeds a `CoreM` action in `CommandElabM` by supplying the information stored in `info`.\n\nCopy of `ContextInfo.runCoreM` that makes use of the `CommandElabM` context for:\n* logging messages produced by the `CoreM` action,\n* metavariable generation,\n* auxiliary declaration generation.\n","docLink":"./Mathlib/Lean/ContextInfo.html#Lean.Elab.ContextInfo.runCoreMWithMessages","kind":"def","line":24,"name":"Lean.Elab.ContextInfo.runCoreMWithMessages","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/ContextInfo.lean#L24-L51"}}],"imports":["Init","Mathlib.Lean.Elab.Tactic.Meta","Mathlib.Tactic.Linter.Header"],"instances":[],"name":"Mathlib.Lean.ContextInfo"}