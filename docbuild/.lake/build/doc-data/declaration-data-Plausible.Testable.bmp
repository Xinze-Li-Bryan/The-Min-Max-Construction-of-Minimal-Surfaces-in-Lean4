{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.«command#test_»\"><span class=\"name\">Plausible</span>.<span class=\"name\">«command#test_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.«command#test_»","kind":"def","line":618,"name":"Plausible.«command#test_»","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L618-L618"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.check\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">check</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a> := <a href=\"./Plausible/Testable.html#Plausible.Configuration.mk\">{</a> <a href=\"./Plausible/Testable.html#Plausible.Configuration.mk\">}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Decorations.DecorationsOf\">Decorations.DecorationsOf</a> <span class=\"fn\">p</span></span> := by mk_decorations)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">p'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"Run a test suite for `p` and throw an exception if `p` does not hold. ","docLink":"./Plausible/Testable.html#Plausible.Testable.check","kind":"def","line":595,"name":"Plausible.Testable.check","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L595-L609"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Decorations.tacticMk_decorations\"><span class=\"name\">Plausible</span>.<span class=\"name\">Decorations</span>.<span class=\"name\">tacticMk_decorations</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"In a goal of the shape `⊢ DecorationsOf p`, `mk_decoration` examines\nthe syntax of `p` and adds `NamedBinder` around universal quantifications\nto improve error messages. This tool can be used in the declaration of a\nfunction as follows:\n```lean\ndef foo (p : Prop) (p' : Decorations.DecorationsOf p := by mk_decorations) [Testable p'] : ...\n```\n`p` is the parameter given by the user, `p'` is a definitionally equivalent\nproposition where the quantifiers are annotated with `NamedBinder`.\n","docLink":"./Plausible/Testable.html#Plausible.Decorations.tacticMk_decorations","kind":"def","line":576,"name":"Plausible.Decorations.tacticMk_decorations","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L576-L590"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Decorations.DecorationsOf\"><span class=\"name\">Plausible</span>.<span class=\"name\">Decorations</span>.<span class=\"name\">DecorationsOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`DecorationsOf p` is used as a hint to `mk_decorations` to specify\nthat the goal should be satisfied with a proposition equivalent to `p`\nwith added annotations. ","docLink":"./Plausible/Testable.html#Plausible.Decorations.DecorationsOf","kind":"def","line":568,"name":"Plausible.Decorations.DecorationsOf","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L568-L571"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Decorations.addDecorations\"><span class=\"name\">Plausible</span>.<span class=\"name\">Decorations</span>.<span class=\"name\">addDecorations</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"Traverse the syntax of a proposition to find universal quantifiers\nquantifiers and add `NamedBinder` annotations next to them. ","docLink":"./Plausible/Testable.html#Plausible.Decorations.addDecorations","kind":"opaque","line":553,"name":"Plausible.Decorations.addDecorations","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L553-L566"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.checkIO\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">checkIO</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a> := <a href=\"./Plausible/Testable.html#Plausible.Configuration.mk\">{</a> <a href=\"./Plausible/Testable.html#Plausible.Configuration.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span>)</span></span></div></div>","info":{"doc":"Run a test suite for `p` in `IO` using the global RNG in `stdGenRef`. ","docLink":"./Plausible/Testable.html#Plausible.Testable.checkIO","kind":"def","line":541,"name":"Plausible.Testable.checkIO","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L541-L545"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.runSuite\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">runSuite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a> := <a href=\"./Plausible/Testable.html#Plausible.Configuration.mk\">{</a> <a href=\"./Plausible/Testable.html#Plausible.Configuration.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span>)</span></span></div></div>","info":{"doc":"Try to find a counter-example of `p`. ","docLink":"./Plausible/Testable.html#Plausible.Testable.runSuite","kind":"def","line":537,"name":"Plausible.Testable.runSuite","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L537-L539"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.runSuiteAux\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">runSuiteAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span>)</span></span></span></span></div></div>","info":{"doc":"Try `n` times to find a counter-example for `p`. ","docLink":"./Plausible/Testable.html#Plausible.Testable.runSuiteAux","kind":"def","line":522,"name":"Plausible.Testable.runSuiteAux","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L522-L535"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.giveUp\"><span class=\"name\">Plausible</span>.<span class=\"name\">giveUp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span></span></div></div>","info":{"doc":"Count the number of times the test procedure gave up. ","docLink":"./Plausible/Testable.html#Plausible.giveUp","kind":"def","line":515,"name":"Plausible.giveUp","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L515-L520"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.retry\"><span class=\"name\">Plausible</span>.<span class=\"name\">retry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmd</span> : <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span>)</span></span></span></div></div>","info":{"doc":"Execute `cmd` and repeat every time the result is `gaveUp` (at most `n` times). ","docLink":"./Plausible/Testable.html#Plausible.retry","kind":"def","line":505,"name":"Plausible.retry","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L505-L513"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Bool.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">Bool</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.Bool.printableProp","kind":"instance","line":497,"name":"Plausible.Bool.printableProp","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L497-L498"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.False.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">False</span>.<span class=\"name\">printableProp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <a href=\"./Init/Prelude.html#False\">False</a></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.False.printableProp","kind":"instance","line":494,"name":"Plausible.False.printableProp","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L494-L495"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.True.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">True</span>.<span class=\"name\">printableProp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <a href=\"./Init/Prelude.html#True\">True</a></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.True.printableProp","kind":"instance","line":491,"name":"Plausible.True.printableProp","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L491-L492"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Not.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">Not</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">x</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.Not.printableProp","kind":"instance","line":488,"name":"Plausible.Not.printableProp","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L488-L489"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Imp.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">Imp</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">x</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">(<span class=\"fn\">x</span> → <span class=\"fn\">y</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.Imp.printableProp","kind":"instance","line":485,"name":"Plausible.Imp.printableProp","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L485-L486"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Iff.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">Iff</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">x</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> (<span class=\"fn\">x</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span>)</span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.Iff.printableProp","kind":"instance","line":482,"name":"Plausible.Iff.printableProp","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L482-L483"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Or.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">Or</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">x</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span>)</span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.Or.printableProp","kind":"instance","line":479,"name":"Plausible.Or.printableProp","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L479-L480"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.And.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">And</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">x</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">y</span>)</span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.And.printableProp","kind":"instance","line":476,"name":"Plausible.And.printableProp","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L476-L477"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.LT.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">LT</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span>)</span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.LT.printableProp","kind":"instance","line":471,"name":"Plausible.LT.printableProp","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L471-L472"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.LE.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">LE</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span>)</span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.LE.printableProp","kind":"instance","line":468,"name":"Plausible.LE.printableProp","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L468-L469"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Ne.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">Ne</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> (<span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">y</span>)</span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.Ne.printableProp","kind":"instance","line":465,"name":"Plausible.Ne.printableProp","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L465-L466"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Eq.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">Eq</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span>)</span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.Eq.printableProp","kind":"instance","line":462,"name":"Plausible.Eq.printableProp","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L462-L463"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.decidableTestable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">decidableTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.Testable.decidableTestable","kind":"instance","line":447,"name":"Plausible.Testable.decidableTestable","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L447-L454"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.subtypeVarTestable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">subtypeVarTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">var</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">(<span class=\"fn\">p</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">var'</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">var</span> <span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">var'</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>)</span></span>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.Testable.subtypeVarTestable","kind":"instance","line":432,"name":"Plausible.Testable.subtypeVarTestable","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L432-L445"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.unusedVarTestable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">unusedVarTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">var</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">var</span> <span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\">β</span>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.Testable.unusedVarTestable","kind":"instance","line":421,"name":"Plausible.Testable.unusedVarTestable","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L421-L429"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.propVarTestable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">propVarTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">var</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Prop</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<span class=\"fn\">β</span> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>))</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">var</span> <span class=\"fn\">(∀ (<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>), <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">p</span></span>)</span>)</span></span></div></div>","info":{"doc":"Test a universal property about propositions ","docLink":"./Plausible/Testable.html#Plausible.Testable.propVarTestable","kind":"instance","line":414,"name":"Plausible.Testable.propVarTestable","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L414-L419"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.varTestable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">varTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">var</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">var</span> <span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>)</span>)</span></span></div></div>","info":{"doc":"Test a universal property by creating a sample of the right type and instantiating the\nbound variable with it. ","docLink":"./Plausible/Testable.html#Plausible.Testable.varTestable","kind":"instance","line":392,"name":"Plausible.Testable.varTestable","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L392-L412"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.minimize\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">minimize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt.proxy\">SampleableExt.proxy</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt.interp\">SampleableExt.interp</a> <span class=\"fn\">x</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">((<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt.proxy\">SampleableExt.proxy</a> <span class=\"fn\">α</span></span>) × <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt.interp\">SampleableExt.interp</a> <span class=\"fn\">x</span>)</span>)</span></span>)</span></span></div></div>","info":{"doc":"Once a property fails to hold on an example, look for smaller counter-examples\nto show the user. ","docLink":"./Plausible/Testable.html#Plausible.Testable.minimize","kind":"def","line":381,"name":"Plausible.Testable.minimize","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L381-L390"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.minimizeAux\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">minimizeAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt.proxy\">SampleableExt.proxy</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">((<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt.proxy\">SampleableExt.proxy</a> <span class=\"fn\">α</span></span>) × <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt.interp\">SampleableExt.interp</a> <span class=\"fn\">x</span>)</span>)</span></span>)</span></span></div></div>","info":{"doc":"Shrink a counter-example `x` by using `Shrinkable.shrink x`, picking the first\ncandidate that falsifies a property and recursively shrinking that one.\nThe process is guaranteed to terminate because `shrink x` produces\na proof that all the values it produces are smaller (according to `SizeOf`)\nthan `x`. ","docLink":"./Plausible/Testable.html#Plausible.Testable.minimizeAux","kind":"opaque","line":356,"name":"Plausible.Testable.minimizeAux","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L356-L379"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.instInhabitedOptionTOfPure\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">instInhabitedOptionTOfPure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.Testable.instInhabitedOptionTOfPure","kind":"instance","line":351,"name":"Plausible.Testable.instInhabitedOptionTOfPure","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L351-L352"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.addShrinks\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">addShrinks</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span></span></div></div>","info":{"doc":"Increase the number of shrinking steps in a test result.\n","docLink":"./Plausible/Testable.html#Plausible.Testable.addShrinks","kind":"def","line":343,"name":"Plausible.Testable.addShrinks","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L343-L348"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.formatFailure\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">formatFailure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Format the counter-examples found in a test failure.\n","docLink":"./Plausible/Testable.html#Plausible.Testable.formatFailure","kind":"def","line":329,"name":"Plausible.Testable.formatFailure","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L329-L341"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.forallTypesULiftTestable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">forallTypesULiftTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">var</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">var</span> <span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <a href=\"./foundational_types.html\">Type</a> u), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.Testable.forallTypesULiftTestable","kind":"instance","line":322,"name":"Plausible.Testable.forallTypesULiftTestable","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L322-L327"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.forallTypesTestable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">forallTypesTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">var</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<span class=\"fn\">f</span> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">var</span> <span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <a href=\"./foundational_types.html\">Type</a>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.Testable.forallTypesTestable","kind":"instance","line":315,"name":"Plausible.Testable.forallTypesTestable","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L315-L319"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.decGuardTestable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">decGuardTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">var</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">p</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span>) → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">h</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">var</span> <span class=\"fn\">(∀ (<span class=\"fn\">h</span> : <span class=\"fn\">p</span>), <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">h</span></span>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.Testable.decGuardTestable","kind":"instance","line":301,"name":"Plausible.Testable.decGuardTestable","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L301-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.iffTestable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">iffTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">q</span>)</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> (<span class=\"fn\">p</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">q</span>)</span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.Testable.iffTestable","kind":"instance","line":288,"name":"Plausible.Testable.iffTestable","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L288-L297"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.orTestable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">orTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">q</span>)</span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.Testable.orTestable","kind":"instance","line":276,"name":"Plausible.Testable.orTestable","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L276-L286"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.andTestable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">andTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">q</span>)</span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.Testable.andTestable","kind":"instance","line":270,"name":"Plausible.Testable.andTestable","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L270-L274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.slimTrace\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">slimTrace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"A `dbgTrace` with special formatting ","docLink":"./Plausible/Testable.html#Plausible.Testable.slimTrace","kind":"def","line":266,"name":"Plausible.Testable.slimTrace","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L266-L268"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.runPropE\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">runPropE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">min</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.Testable.runPropE","kind":"def","line":260,"name":"Plausible.Testable.runPropE","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L260-L264"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.runProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">runProp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span>)</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.Testable.runProp","kind":"def","line":258,"name":"Plausible.Testable.runProp","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L258-L258"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration.verbose\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">verbose</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a></div></div>","info":{"doc":"A configuration with all the trace options enabled, useful for debugging. ","docLink":"./Plausible/Testable.html#Plausible.Configuration.verbose","kind":"def","line":245,"name":"Plausible.Configuration.verbose","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L245-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.isFailure\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">isFailure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.TestResult.isFailure","kind":"def","line":237,"name":"Plausible.TestResult.isFailure","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L237-L239"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.addVarInfo\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">addVarInfo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">γ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">q</span> → <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> (<a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\">(<span class=\"fn\">p</span> → <span class=\"fn\">q</span>)</span>) <span class=\"fn\">(<a href=\"./Init/Core.html#PSum.inl\">PSum.inl</a> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a>)</span></span> → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">q</span></span></span></div></div>","info":{"doc":"Add some formatting to the information recorded by `addInfo`. ","docLink":"./Plausible/Testable.html#Plausible.TestResult.addVarInfo","kind":"def","line":232,"name":"Plausible.TestResult.addVarInfo","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L232-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.addInfo\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">addInfo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">q</span> → <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> (<a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\">(<span class=\"fn\">p</span> → <span class=\"fn\">q</span>)</span>) <span class=\"fn\">(<a href=\"./Init/Core.html#PSum.inl\">PSum.inl</a> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a>)</span></span> → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">q</span></span></span></div></div>","info":{"doc":"When we assign a value to a universally quantified variable,\nwe record that value using this function so that our counter-examples\ncan be informative. ","docLink":"./Plausible/Testable.html#Plausible.TestResult.addInfo","kind":"def","line":222,"name":"Plausible.TestResult.addInfo","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L222-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.iff\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">q</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">q</span></span></div></div>","info":{"doc":"Test `q` by testing `p` and proving the equivalence between the two. ","docLink":"./Plausible/Testable.html#Plausible.TestResult.iff","kind":"def","line":218,"name":"Plausible.TestResult.iff","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L218-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.imp\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">q</span> → <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> (<a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\">(<span class=\"fn\">p</span> → <span class=\"fn\">q</span>)</span>) <span class=\"fn\">(<a href=\"./Init/Core.html#PSum.inl\">PSum.inl</a> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a>)</span></span> → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">q</span></span></span></div></div>","info":{"doc":"If `q → p`, then `¬ p → ¬ q` which means that testing `p` can allow us\nto find counter-examples to `q`. ","docLink":"./Plausible/Testable.html#Plausible.TestResult.imp","kind":"def","line":209,"name":"Plausible.TestResult.imp","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L209-L216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.or\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">q</span></span> → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">q</span>)</span></span></span></div></div>","info":{"doc":"Combine the test result for properties `p` and `q` to create a test for their disjunction. ","docLink":"./Plausible/Testable.html#Plausible.TestResult.or","kind":"def","line":195,"name":"Plausible.TestResult.or","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L195-L207"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.and\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">q</span></span> → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">q</span>)</span></span></span></div></div>","info":{"doc":"Combine the test result for properties `p` and `q` to create a test for their conjunction. ","docLink":"./Plausible/Testable.html#Plausible.TestResult.and","kind":"def","line":186,"name":"Plausible.TestResult.and","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L186-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.combine\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">combine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\">(<span class=\"fn\">p</span> → <span class=\"fn\">q</span>)</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\">p</span> → <a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\">q</span></span></span></div></div>","info":{"doc":"Applicative combinator proof carrying test results. ","docLink":"./Plausible/Testable.html#Plausible.TestResult.combine","kind":"def","line":181,"name":"Plausible.TestResult.combine","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L181-L184"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.instToString\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">instToString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.TestResult.instToString","kind":"instance","line":179,"name":"Plausible.TestResult.instToString","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L179-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.toString\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">toString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.TestResult.toString","kind":"def","line":173,"name":"Plausible.TestResult.toString","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L173-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.NamedBinder\"><span class=\"name\">Plausible</span>.<span class=\"name\">NamedBinder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_n</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.NamedBinder","kind":"def","line":169,"name":"Plausible.NamedBinder","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L169-L169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.run\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">minimize</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.Testable.run","kind":"def","line":167,"name":"Plausible.Testable.run","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L167-L167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.mk\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">run</span> : <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.Testable.mk","kind":"ctor","line":166,"name":"Plausible.Testable.mk","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L166-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`Testable p` uses random examples to try to disprove `p`. ","docLink":"./Plausible/Testable.html#Plausible.Testable","kind":"class","line":165,"name":"Plausible.Testable","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L165-L167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.instPrintableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">instPrintableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.instPrintableProp","kind":"instance","line":162,"name":"Plausible.instPrintableProp","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L162-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.PrintableProp.printProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">PrintableProp</span>.<span class=\"name\">printProp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.PrintableProp.printProp","kind":"def","line":156,"name":"Plausible.PrintableProp.printProp","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L156-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.PrintableProp.mk\"><span class=\"name\">Plausible</span>.<span class=\"name\">PrintableProp</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">printProp</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.PrintableProp.mk","kind":"ctor","line":155,"name":"Plausible.PrintableProp.mk","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L155-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.PrintableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">PrintableProp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`PrintableProp p` allows one to print a proposition so that\n`Plausible` can indicate how values relate to each other.\nIt's basically a poor man's delaborator.\n","docLink":"./Plausible/Testable.html#Plausible.PrintableProp","kind":"class","line":150,"name":"Plausible.PrintableProp","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L150-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.elabConfig\"><span class=\"name\">Plausible</span>.<span class=\"name\">elabConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a></span></span></div></div>","info":{"doc":"Allow elaboration of `Configuration` arguments to tactics.\n","docLink":"./Plausible/Testable.html#Plausible.elabConfig","kind":"def","line":145,"name":"Plausible.elabConfig","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L145-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.instToExprConfiguration\"><span class=\"name\">Plausible</span>.<span class=\"name\">instToExprConfiguration</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ToExpr.html#Lean.ToExpr\">Lean.ToExpr</a> <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.instToExprConfiguration","kind":"instance","line":138,"name":"Plausible.instToExprConfiguration","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L138-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.instInhabitedConfiguration\"><span class=\"name\">Plausible</span>.<span class=\"name\">instInhabitedConfiguration</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.instInhabitedConfiguration","kind":"instance","line":135,"name":"Plausible.instInhabitedConfiguration","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L135-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.instInhabitedConfiguration.default\"><span class=\"name\">Plausible</span>.<span class=\"name\">instInhabitedConfiguration</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.instInhabitedConfiguration.default","kind":"def","line":135,"name":"Plausible.instInhabitedConfiguration.default","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L135-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration.quiet\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">quiet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Disable output.\n","docLink":"./Plausible/Testable.html#Plausible.Configuration.quiet","kind":"def","line":134,"name":"Plausible.Configuration.quiet","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L134-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration.randomSeed\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">randomSeed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Hard code the seed to use for the RNG\n","docLink":"./Plausible/Testable.html#Plausible.Configuration.randomSeed","kind":"def","line":130,"name":"Plausible.Configuration.randomSeed","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L130-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration.traceShrinkCandidates\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">traceShrinkCandidates</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Enable tracing of all attempted values during shrinking.\n","docLink":"./Plausible/Testable.html#Plausible.Configuration.traceShrinkCandidates","kind":"def","line":126,"name":"Plausible.Configuration.traceShrinkCandidates","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L126-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration.traceShrink\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">traceShrink</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Enable basic tracing of shrinking.\n","docLink":"./Plausible/Testable.html#Plausible.Configuration.traceShrink","kind":"def","line":122,"name":"Plausible.Configuration.traceShrink","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L122-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration.traceSuccesses\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">traceSuccesses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Enable tracing of values that fulfilled the property and were thus discarded.\n","docLink":"./Plausible/Testable.html#Plausible.Configuration.traceSuccesses","kind":"def","line":118,"name":"Plausible.Configuration.traceSuccesses","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L118-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration.traceDiscarded\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">traceDiscarded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Enable tracing of values that didn't fulfill preconditions and were thus discarded.\n","docLink":"./Plausible/Testable.html#Plausible.Configuration.traceDiscarded","kind":"def","line":114,"name":"Plausible.Configuration.traceDiscarded","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L114-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration.numRetries\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">numRetries</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.Configuration.numRetries","kind":"def","line":110,"name":"Plausible.Configuration.numRetries","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration.maxSize\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">maxSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The maximum size of the values to generate.\n","docLink":"./Plausible/Testable.html#Plausible.Configuration.maxSize","kind":"def","line":109,"name":"Plausible.Configuration.maxSize","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L109-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration.numInst\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">numInst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"How many test instances to generate.\n","docLink":"./Plausible/Testable.html#Plausible.Configuration.numInst","kind":"def","line":105,"name":"Plausible.Configuration.numInst","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L105-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration.mk\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numInst </span><span class=\"fn\">maxSize </span><span class=\"fn\">numRetries</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">traceDiscarded </span><span class=\"fn\">traceSuccesses </span><span class=\"fn\">traceShrink </span><span class=\"fn\">traceShrinkCandidates</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">randomSeed</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">quiet</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.Configuration.mk","kind":"ctor","line":101,"name":"Plausible.Configuration.mk","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L101-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Configuration for testing a property. ","docLink":"./Plausible/Testable.html#Plausible.Configuration","kind":"structure","line":100,"name":"Plausible.Configuration","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L100-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.instInhabitedTestResult.default\"><span class=\"name\">Plausible</span>.<span class=\"name\">instInhabitedTestResult</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.instInhabitedTestResult.default","kind":"def","line":98,"name":"Plausible.instInhabitedTestResult.default","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L98-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.instInhabitedTestResult\"><span class=\"name\">Plausible</span>.<span class=\"name\">instInhabitedTestResult</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">a✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Testable.html#Plausible.instInhabitedTestResult","kind":"instance","line":98,"name":"Plausible.instInhabitedTestResult","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L98-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.failure\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">failure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span></span></span></span></div></div>","info":{"doc":"A counter-example to `p`; the strings specify values for the relevant variables.\n`failure h vs n` also carries a proof that `p` does not hold. This way, we can\nguarantee that there will be no false positive. The last component, `n`,\nis the number of times that the counter-example was shrunk.\n","docLink":"./Plausible/Testable.html#Plausible.TestResult.failure","kind":"ctor","line":91,"name":"Plausible.TestResult.failure","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L91-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.gaveUp\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">gaveUp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span></span></div></div>","info":{"doc":"Give up when a well-formed example cannot be generated.\n`gaveUp n` tells us that `n` invalid examples were tried.\n","docLink":"./Plausible/Testable.html#Plausible.TestResult.gaveUp","kind":"ctor","line":86,"name":"Plausible.TestResult.gaveUp","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L86-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.success\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">success</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\">p</span> → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span></span></div></div>","info":{"doc":"Succeed when we find another example satisfying `p`.\nIn `success h`, `h` is an optional proof of the proposition.\nWithout the proof, all we know is that we found one example\nwhere `p` holds. With a proof, the one test was sufficient to\nprove that `p` holds and we do not need to keep finding examples.\n","docLink":"./Plausible/Testable.html#Plausible.TestResult.success","kind":"ctor","line":78,"name":"Plausible.TestResult.success","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L78-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Result of trying to disprove `p` ","docLink":"./Plausible/Testable.html#Plausible.TestResult","kind":"inductive","line":76,"name":"Plausible.TestResult","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Testable.lean#L76-L98"}}],"imports":["Init","Lean.Elab.Tactic.Config","Plausible.Sampleable"],"instances":[{"className":"Inhabited","name":"Plausible.instInhabitedTestResult","typeNames":["Plausible.TestResult"]},{"className":"Inhabited","name":"Plausible.instInhabitedConfiguration","typeNames":["Plausible.Configuration"]},{"className":"Lean.ToExpr","name":"Plausible.instToExprConfiguration","typeNames":["Plausible.Configuration"]},{"className":"Plausible.PrintableProp","name":"Plausible.instPrintableProp","typeNames":[]},{"className":"ToString","name":"Plausible.TestResult.instToString","typeNames":["Plausible.TestResult"]},{"className":"Plausible.Testable","name":"Plausible.Testable.andTestable","typeNames":["And"]},{"className":"Plausible.Testable","name":"Plausible.Testable.orTestable","typeNames":["Or"]},{"className":"Plausible.Testable","name":"Plausible.Testable.iffTestable","typeNames":["Iff"]},{"className":"Plausible.Testable","name":"Plausible.Testable.decGuardTestable","typeNames":["Plausible.NamedBinder"]},{"className":"Plausible.Testable","name":"Plausible.Testable.forallTypesTestable","typeNames":["Plausible.NamedBinder"]},{"className":"Plausible.Testable","name":"Plausible.Testable.forallTypesULiftTestable","typeNames":["Plausible.NamedBinder"]},{"className":"Inhabited","name":"Plausible.Testable.instInhabitedOptionTOfPure","typeNames":["OptionT"]},{"className":"Plausible.Testable","name":"Plausible.Testable.varTestable","typeNames":["Plausible.NamedBinder"]},{"className":"Plausible.Testable","name":"Plausible.Testable.propVarTestable","typeNames":["Plausible.NamedBinder"]},{"className":"Plausible.Testable","name":"Plausible.Testable.unusedVarTestable","typeNames":["Plausible.NamedBinder"]},{"className":"Plausible.Testable","name":"Plausible.Testable.subtypeVarTestable","typeNames":["Plausible.NamedBinder"]},{"className":"Plausible.Testable","name":"Plausible.Testable.decidableTestable","typeNames":[]},{"className":"Plausible.PrintableProp","name":"Plausible.Eq.printableProp","typeNames":["Eq"]},{"className":"Plausible.PrintableProp","name":"Plausible.Ne.printableProp","typeNames":["Ne"]},{"className":"Plausible.PrintableProp","name":"Plausible.LE.printableProp","typeNames":["LE.le"]},{"className":"Plausible.PrintableProp","name":"Plausible.LT.printableProp","typeNames":["LT.lt"]},{"className":"Plausible.PrintableProp","name":"Plausible.And.printableProp","typeNames":["And"]},{"className":"Plausible.PrintableProp","name":"Plausible.Or.printableProp","typeNames":["Or"]},{"className":"Plausible.PrintableProp","name":"Plausible.Iff.printableProp","typeNames":["Iff"]},{"className":"Plausible.PrintableProp","name":"Plausible.Imp.printableProp","typeNames":[]},{"className":"Plausible.PrintableProp","name":"Plausible.Not.printableProp","typeNames":["Not"]},{"className":"Plausible.PrintableProp","name":"Plausible.True.printableProp","typeNames":["True"]},{"className":"Plausible.PrintableProp","name":"Plausible.False.printableProp","typeNames":["False"]},{"className":"Plausible.PrintableProp","name":"Plausible.Bool.printableProp","typeNames":["Eq"]}],"name":"Plausible.Testable"}