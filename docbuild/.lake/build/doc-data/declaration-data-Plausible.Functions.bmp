{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.PiUncurry.sampleableExt\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">PiUncurry</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span> → <span class=\"fn\">γ</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.PiUncurry.sampleableExt","kind":"instance","line":153,"name":"Plausible.TotalFunction.PiUncurry.sampleableExt","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Functions.lean#L153-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.PiPred.sampleableExt\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">PiPred</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.PiPred.sampleableExt","kind":"instance","line":146,"name":"Plausible.TotalFunction.PiPred.sampleableExt","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Functions.lean#L146-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.Pi.sampleableExt\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">Pi</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.Pi.sampleableExt","kind":"instance","line":129,"name":"Plausible.TotalFunction.Pi.sampleableExt","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Functions.lean#L129-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.shrink.dedup.insertKey\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">shrink</span>.<span class=\"name\">dedup</span>.<span class=\"name\">insertKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((_ : <span class=\"fn\">α</span>) × <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pair</span> : <span class=\"fn\">(_ : <span class=\"fn\">α</span>) × <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((_ : <span class=\"fn\">α</span>) × <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.shrink.dedup.insertKey","kind":"def","line":117,"name":"Plausible.TotalFunction.shrink.dedup.insertKey","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Functions.lean#L117-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.shrink.dedup\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">shrink</span>.<span class=\"name\">dedup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((_ : <span class=\"fn\">α</span>) × <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((_ : <span class=\"fn\">α</span>) × <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.shrink.dedup","kind":"def","line":116,"name":"Plausible.TotalFunction.shrink.dedup","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Functions.lean#L116-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.shrink\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">shrink</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.Shrinkable\">Shrinkable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.Shrinkable\">Shrinkable</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Functions.html#Plausible.TotalFunction\">TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Plausible/Functions.html#Plausible.TotalFunction\">TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></span></div></div>","info":{"doc":"Shrink a total function by shrinking the lists that represent it. ","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.shrink","kind":"def","line":111,"name":"Plausible.TotalFunction.shrink","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Functions.lean#L111-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.List.toFinmap'\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">List</span>.<span class=\"name\">toFinmap'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((_ : <span class=\"fn\">α</span>) × <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"Create a `Finmap` from a list of pairs. ","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.List.toFinmap'","kind":"def","line":100,"name":"Plausible.TotalFunction.List.toFinmap'","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Functions.lean#L100-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.instRepr\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">instRepr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Plausible/Functions.html#Plausible.TotalFunction\">TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.instRepr","kind":"instance","line":97,"name":"Plausible.TotalFunction.instRepr","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Functions.lean#L97-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.repr\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Functions.html#Plausible.TotalFunction\">TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Produce a string for a given `TotalFunction`.\nThe output is of the form `[x₀ => f x₀, .. xₙ => f xₙ, _ => y]`.\n","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.repr","kind":"def","line":91,"name":"Plausible.TotalFunction.repr","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Functions.lean#L91-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.reprAux\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">reprAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((_ : <span class=\"fn\">α</span>) × <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Implementation of `Repr (TotalFunction α β)`.\n\nCreates a string for a given `Finmap` and output, `x₀ => y₀, .. xₙ => yₙ`\nfor each of the entries. The brackets are provided by the calling function.\n","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.reprAux","kind":"def","line":80,"name":"Plausible.TotalFunction.reprAux","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Functions.lean#L80-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.apply\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Functions.html#Plausible.TotalFunction\">TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span></div></div>","info":{"doc":"Apply a total function to an argument. ","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.apply","kind":"def","line":76,"name":"Plausible.TotalFunction.apply","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Functions.lean#L76-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.comp\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Functions.html#Plausible.TotalFunction\">TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Plausible/Functions.html#Plausible.TotalFunction\">TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span></span></span></div></div>","info":{"doc":"Compose a total function with a regular function on the left ","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.comp","kind":"def","line":71,"name":"Plausible.TotalFunction.comp","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Functions.lean#L71-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.inhabited\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">inhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Plausible/Functions.html#Plausible.TotalFunction\">TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.inhabited","kind":"instance","line":65,"name":"Plausible.TotalFunction.inhabited","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Functions.lean#L65-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.withDefault\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">withDefault</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((_ : <span class=\"fn\">α</span>) × <span class=\"fn\">β</span>)</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Plausible/Functions.html#Plausible.TotalFunction\">TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.withDefault","kind":"ctor","line":63,"name":"Plausible.TotalFunction.withDefault","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Functions.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>","info":{"doc":"Data structure specifying a total function using a list of pairs\nand a default value returned when the input is not in the domain of\nthe partial function.\n\n`withDefault f y` encodes `x => f x` when `x ∈ f` and `x => y`\notherwise.\n\nWe use `Σ` to encode mappings instead of `×` because we\nrely on the association list API defined in `Mathlib/Data/List/Sigma.lean`.\n ","docLink":"./Plausible/Functions.html#Plausible.TotalFunction","kind":"inductive","line":52,"name":"Plausible.TotalFunction","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Functions.lean#L52-L63"}}],"imports":["Init","Plausible.Sampleable","Plausible.Testable"],"instances":[{"className":"Inhabited","name":"Plausible.TotalFunction.inhabited","typeNames":["Plausible.TotalFunction"]},{"className":"Repr","name":"Plausible.TotalFunction.instRepr","typeNames":["Plausible.TotalFunction"]},{"className":"Plausible.SampleableExt","name":"Plausible.TotalFunction.Pi.sampleableExt","typeNames":[]},{"className":"Plausible.SampleableExt","name":"Plausible.TotalFunction.PiPred.sampleableExt","typeNames":[]},{"className":"Plausible.SampleableExt","name":"Plausible.TotalFunction.PiUncurry.sampleableExt","typeNames":[]}],"name":"Plausible.Functions"}