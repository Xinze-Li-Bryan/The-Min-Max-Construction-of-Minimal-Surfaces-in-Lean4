{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Misc.html#Batteries.Tactic.Lint.explicitVarsOfIff\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">explicitVarsOfIff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Batteries.Tactic.Lint.Linter\">Linter</a></div></div>","info":{"doc":"A linter for checking if variables appearing on both sides of an iff are explicit. Ideally, such\nvariables should be implicit instead.\n","docLink":"./Batteries/Tactic/Lint/Misc.html#Batteries.Tactic.Lint.explicitVarsOfIff","kind":"def","line":276,"name":"Batteries.Tactic.Lint.explicitVarsOfIff","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Tactic/Lint/Misc.lean#L276-L292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Misc.html#Batteries.Tactic.Lint.unusedHavesSuffices\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">unusedHavesSuffices</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Batteries.Tactic.Lint.Linter\">Linter</a></div></div>","info":{"doc":"A linter for checking that declarations don't have unused term mode have statements. ","docLink":"./Batteries/Tactic/Lint/Misc.html#Batteries.Tactic.Lint.unusedHavesSuffices","kind":"def","line":253,"name":"Batteries.Tactic.Lint.unusedHavesSuffices","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Tactic/Lint/Misc.lean#L253-L274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Misc.html#Batteries.Tactic.Lint.findUnusedHaves\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">findUnusedHaves</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span></span></div></div>","info":{"doc":"Return a list of unused `let_fun` terms in an expression that introduce proofs.\n","docLink":"./Batteries/Tactic/Lint/Misc.html#Batteries.Tactic.Lint.findUnusedHaves","kind":"def","line":230,"name":"Batteries.Tactic.Lint.findUnusedHaves","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Tactic/Lint/Misc.lean#L230-L238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Misc.html#Batteries.Tactic.Lint.synTaut\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">synTaut</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Batteries.Tactic.Lint.Linter\">Linter</a></div></div>","info":{"doc":"A linter for checking that declarations aren't syntactic tautologies.\nChecks whether a lemma is a declaration of the form `∀ a b ... z, e₁ = e₂`\nwhere `e₁` and `e₂` are identical exprs.\nWe call declarations of this form syntactic tautologies.\nSuch lemmas are (mostly) useless and sometimes introduced unintentionally when proving basic facts\nwith rfl when elaboration results in a different term than the user intended. ","docLink":"./Batteries/Tactic/Lint/Misc.html#Batteries.Tactic.Lint.synTaut","kind":"def","line":205,"name":"Batteries.Tactic.Lint.synTaut","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Tactic/Lint/Misc.lean#L205-L228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Misc.html#Batteries.Tactic.Lint.checkUnivs\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">checkUnivs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Batteries.Tactic.Lint.Linter\">Linter</a></div></div>","info":{"doc":"A linter for checking that there are no bad `max u v` universe levels.\nChecks whether all universe levels `u` in the type of `d` are \"good\".\nThis means that `u` either occurs in a `level` of `d` by itself, or (recursively)\nwith only other good levels.\nWhen this fails, usually this means that there is a level `max u v`, where neither `u` nor `v`\noccur by themselves in a level. It is ok if *one* of `u` or `v` never occurs alone. For example,\n`(α : Type u) (β : Type (max u v))` is a occasionally useful method of saying that `β` lives in\na higher universe level than `α`.\n","docLink":"./Batteries/Tactic/Lint/Misc.html#Batteries.Tactic.Lint.checkUnivs","kind":"def","line":177,"name":"Batteries.Tactic.Lint.checkUnivs","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Tactic/Lint/Misc.lean#L177-L203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Misc.html#Batteries.Tactic.Lint.checkType\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">checkType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Batteries.Tactic.Lint.Linter\">Linter</a></div></div>","info":{"doc":"A linter for checking whether statements of declarations are well-typed. ","docLink":"./Batteries/Tactic/Lint/Misc.html#Batteries.Tactic.Lint.checkType","kind":"def","line":131,"name":"Batteries.Tactic.Lint.checkType","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Tactic/Lint/Misc.lean#L131-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Misc.html#Batteries.Tactic.Lint.defLemma\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">defLemma</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Batteries.Tactic.Lint.Linter\">Linter</a></div></div>","info":{"doc":"A linter for checking whether the correct declaration constructor (definition or theorem)\nhas been used. ","docLink":"./Batteries/Tactic/Lint/Misc.html#Batteries.Tactic.Lint.defLemma","kind":"def","line":110,"name":"Batteries.Tactic.Lint.defLemma","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Tactic/Lint/Misc.lean#L110-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Misc.html#Batteries.Tactic.Lint.docBlameThm\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">docBlameThm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Batteries.Tactic.Lint.Linter\">Linter</a></div></div>","info":{"doc":"A linter for checking theorem doc strings. ","docLink":"./Batteries/Tactic/Lint/Misc.html#Batteries.Tactic.Lint.docBlameThm","kind":"def","line":90,"name":"Batteries.Tactic.Lint.docBlameThm","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Tactic/Lint/Misc.lean#L90-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Misc.html#Batteries.Tactic.Lint.docBlame\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">docBlame</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Batteries.Tactic.Lint.Linter\">Linter</a></div></div>","info":{"doc":"A linter for checking definition doc strings. ","docLink":"./Batteries/Tactic/Lint/Misc.html#Batteries.Tactic.Lint.docBlame","kind":"def","line":62,"name":"Batteries.Tactic.Lint.docBlame","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Tactic/Lint/Misc.lean#L62-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Misc.html#Batteries.Tactic.Lint.unusedArguments\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">unusedArguments</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Batteries.Tactic.Lint.Linter\">Linter</a></div></div>","info":{"doc":"A linter for checking for unused arguments.\nWe skip all declarations that contain `sorry` in their value. ","docLink":"./Batteries/Tactic/Lint/Misc.html#Batteries.Tactic.Lint.unusedArguments","kind":"def","line":36,"name":"Batteries.Tactic.Lint.unusedArguments","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Tactic/Lint/Misc.lean#L36-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Misc.html#Batteries.Tactic.Lint.dupNamespace\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">dupNamespace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Batteries.Tactic.Lint.Linter\">Linter</a></div></div>","info":{"doc":"A linter for checking whether a declaration has a namespace twice consecutively in its name. ","docLink":"./Batteries/Tactic/Lint/Misc.html#Batteries.Tactic.Lint.dupNamespace","kind":"def","line":24,"name":"Batteries.Tactic.Lint.dupNamespace","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Tactic/Lint/Misc.lean#L24-L34"}}],"imports":["Init","Lean.Util.CollectLevelParams","Lean.Util.ForEachExpr","Lean.Meta.GlobalInstances","Lean.Meta.Check","Lean.Util.Recognizers","Lean.DocString","Batteries.Tactic.Lint.Basic"],"instances":[],"name":"Batteries.Tactic.Lint.Misc"}