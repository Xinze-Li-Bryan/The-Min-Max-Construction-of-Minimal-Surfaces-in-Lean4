{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.deprecatedSyntaxLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">deprecatedSyntaxLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>","info":{"doc":"The deprecated syntax linter flags usages of deprecated syntax and suggests\nreplacement syntax. For each individual case, linting can be turned on or off separately.\n\n* `refine'`, superseded by `refine` and `apply` (controlled by `linter.style.refine`)\n* `cases'`, superseded by `obtain`, `rcases` and `cases` (controlled by `linter.style.cases`)\n* `induction'`, superseded by `induction` (controlled by `linter.style.induction`)\n* `admit`, superseded by `sorry` (controlled by `linter.style.admit`)\n* `set_option maxHeartbeats`, should contain an explanatory comment\n  (controlled by `linter.style.maxHeartbeats`)\n","docLink":"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.deprecatedSyntaxLinter","kind":"def","line":194,"name":"Mathlib.Linter.Style.deprecatedSyntaxLinter","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.lean#L194-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.getDeprecatedSyntax\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">getDeprecatedSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span></div></div>","info":{"doc":"`getDeprecatedSyntax t` returns all usages of deprecated syntax in the input syntax `t`. ","docLink":"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.getDeprecatedSyntax","kind":"opaque","line":144,"name":"Mathlib.Linter.Style.getDeprecatedSyntax","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.lean#L144-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.isDecideNative\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">isDecideNative</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Whether a given piece of syntax represents a `decide` tactic call with the `native` option\nenabled. This may have false negatives for `decide (config := {<options>})` syntax). ","docLink":"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.isDecideNative","kind":"def","line":123,"name":"Mathlib.Linter.Style.isDecideNative","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.lean#L123-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.getSetOptionMaxHeartbeatsComment\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">getSetOptionMaxHeartbeatsComment</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span></div></div>","info":{"doc":"If the input syntax is of the form `set_option <option> num in <string> cmd`,\nwhere `<option>` contains `maxHeartbeats`, then it returns\n* the `<option>`, as a name (typically, `maxHeartbeats` or `synthInstance.maxHeartbeats`);\n* the number `num` and\n* whatever is in `<string>`. Note that `<string>` can only consist of whitespace and comments.\n\nOtherwise, it returns `none`.\n","docLink":"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.getSetOptionMaxHeartbeatsComment","kind":"def","line":102,"name":"Mathlib.Linter.Style.getSetOptionMaxHeartbeatsComment","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.lean#L102-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.linter.style.maxHeartbeats\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">maxHeartbeats</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The option `linter.style.maxHeartbeats` of the deprecated syntax linter flags usages of\n`set_option <name-containing-maxHeartbeats> n in cmd` that do not add a comment explaining\nthe reason for the modification of the `maxHeartbeats`.\n\nThis includes `set_option maxHeartbeats n in` and `set_option synthInstance.maxHeartbeats n in`.\n","docLink":"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.linter.style.maxHeartbeats","kind":"opaque","line":91,"name":"Mathlib.Linter.Style.linter.style.maxHeartbeats","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.lean#L91-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.linter.style.nativeDecide\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">nativeDecide</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The option `linter.style.nativeDecide` of the deprecated syntax linter flags usages of\nthe `native_decide` tactic, which is disallowed in mathlib. ","docLink":"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.linter.style.nativeDecide","kind":"opaque","line":81,"name":"Mathlib.Linter.Style.linter.style.nativeDecide","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.lean#L81-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.linter.style.admit\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">admit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The option `linter.style.admit` of the deprecated syntax linter flags usages of\nthe `admit` tactic, which is a synonym for the much more common `sorry`. ","docLink":"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.linter.style.admit","kind":"opaque","line":74,"name":"Mathlib.Linter.Style.linter.style.admit","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.lean#L74-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.linter.style.induction\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">induction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The option `linter.style.induction` of the deprecated syntax linter flags usages of\nthe `induction'` tactic, which is a backward-compatible version of Lean 3's `induction` tactic.\nUnlike Lean 4's `induction`, variables introduced by `induction'` are not\nrequired to be separated by case, which hinders readability.\n","docLink":"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.linter.style.induction","kind":"opaque","line":64,"name":"Mathlib.Linter.Style.linter.style.induction","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.lean#L64-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.linter.style.cases\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">cases</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The option `linter.style.cases` of the deprecated syntax linter flags usages of\nthe `cases'` tactic, which is a backward-compatible version of Lean 3's `cases` tactic.\nUnlike `obtain`, `rcases` and Lean 4's `cases`, variables introduced by `cases'` are not\nrequired to be separated by case, which hinders readability.\n","docLink":"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.linter.style.cases","kind":"opaque","line":54,"name":"Mathlib.Linter.Style.linter.style.cases","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.lean#L54-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.linter.style.refine\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">refine</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The option `linter.style.refine` of the deprecated syntax linter flags usages of\nthe `refine'` tactic.\n\nThe tactics `refine`, `apply` and `refine'` are similar, but they handle metavariables slightly\ndifferently. This means that they are not completely interchangeable, nor can one completely\nreplace another. However, `refine` and `apply` are more readable and (heuristically) tend to be\nmore efficient on average.\n","docLink":"./Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.html#Mathlib.Linter.Style.linter.style.refine","kind":"opaque","line":41,"name":"Mathlib.Linter.Style.linter.style.refine","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/DeprecatedSyntaxLinter.lean#L41-L52"}}],"imports":["Init","Lean.Elab.Command","Mathlib.Tactic.Linter.Header"],"instances":[],"name":"Mathlib.Tactic.Linter.DeprecatedSyntaxLinter"}