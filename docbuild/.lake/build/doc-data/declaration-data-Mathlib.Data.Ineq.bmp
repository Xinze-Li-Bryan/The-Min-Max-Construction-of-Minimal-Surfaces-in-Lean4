{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Lean.Expr.ineqOrNotIneq?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">ineqOrNotIneq?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Mathlib.Ineq</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>","info":{"doc":"Given an expression `e`, parse it as a `=`, `≤` or `<`, or the negation of such, and return this\nrelation (as a `Linarith.Ineq`) together with the type in which the (in)equality occurs, the two\nsides of the (in)equality, and a Boolean flag indicating the presence or absence of the `¬`.\n\nThis function is more naturally in the `Option` monad, but it is convenient to put in `MetaM`\nfor compositionality.\n","docLink":"./Mathlib/Data/Ineq.html#Lean.Expr.ineqOrNotIneq?","kind":"def","line":86,"name":"Lean.Expr.ineqOrNotIneq?","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Ineq.lean#L86-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Lean.Expr.ineq?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">ineq?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Mathlib.Ineq</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>","info":{"doc":"Given an expression `e`, parse it as a `=`, `≤` or `<`, and return this relation (as a\n`Linarith.Ineq`) together with the type in which the (in)equality occurs and the two sides of the\n(in)equality.\n\nThis function is more naturally in the `Option` monad, but it is convenient to put in `MetaM`\nfor compositionality.\n","docLink":"./Mathlib/Data/Ineq.html#Lean.Expr.ineq?","kind":"def","line":67,"name":"Lean.Expr.ineq?","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Ineq.lean#L67-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq.instToFormat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Ineq</span>.<span class=\"name\">instToFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Std.ToFormat</a> <a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Ineq.html#Mathlib.Ineq.instToFormat","kind":"instance","line":58,"name":"Mathlib.Ineq.instToFormat","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Ineq.lean#L58-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq.instToString\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Ineq</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Ineq.html#Mathlib.Ineq.instToString","kind":"instance","line":56,"name":"Mathlib.Ineq.instToString","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Ineq.lean#L56-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq.toString\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Ineq</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Prints an `Ineq` as the corresponding infix symbol. ","docLink":"./Mathlib/Data/Ineq.html#Mathlib.Ineq.toString","kind":"def","line":50,"name":"Mathlib.Ineq.toString","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Ineq.lean#L50-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq.cmp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Ineq</span>.<span class=\"name\">cmp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a> → <a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span></div></div>","info":{"doc":"`Ineq` is ordered `eq < le < lt`. ","docLink":"./Mathlib/Data/Ineq.html#Mathlib.Ineq.cmp","kind":"def","line":41,"name":"Mathlib.Ineq.cmp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Ineq.lean#L41-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq.max\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Ineq</span>.<span class=\"name\">max</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a> → <a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a> → <a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a></span></div></div>","info":{"doc":"`max R1 R2` computes the strength of the sum of two inequalities. If `t1 R1 0` and `t2 R2 0`,\nthen `t1 + t2 (max R1 R2) 0`.\n","docLink":"./Mathlib/Data/Ineq.html#Mathlib.Ineq.max","kind":"def","line":30,"name":"Mathlib.Ineq.max","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Ineq.lean#L30-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.instReprIneq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">instReprIneq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Ineq.html#Mathlib.instReprIneq","kind":"instance","line":26,"name":"Mathlib.instReprIneq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Ineq.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.instReprIneq.repr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">instReprIneq</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Ineq.html#Mathlib.instReprIneq.repr","kind":"def","line":26,"name":"Mathlib.instReprIneq.repr","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Ineq.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.instInhabitedIneq.default\"><span class=\"name\">Mathlib</span>.<span class=\"name\">instInhabitedIneq</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Ineq.html#Mathlib.instInhabitedIneq.default","kind":"def","line":26,"name":"Mathlib.instInhabitedIneq.default","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Ineq.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.instInhabitedIneq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">instInhabitedIneq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Ineq.html#Mathlib.instInhabitedIneq","kind":"instance","line":26,"name":"Mathlib.instInhabitedIneq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Ineq.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.instDecidableEqIneq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">instDecidableEqIneq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Ineq.html#Mathlib.instDecidableEqIneq","kind":"instance","line":26,"name":"Mathlib.instDecidableEqIneq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Ineq.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq.lt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Ineq</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Ineq.html#Mathlib.Ineq.lt","kind":"ctor","line":25,"name":"Mathlib.Ineq.lt","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Ineq.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq.le\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Ineq</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Ineq.html#Mathlib.Ineq.le","kind":"ctor","line":25,"name":"Mathlib.Ineq.le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Ineq.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq.eq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Ineq</span>.<span class=\"name\">eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/Ineq.html#Mathlib.Ineq.eq","kind":"ctor","line":25,"name":"Mathlib.Ineq.eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Ineq.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Ineq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The three-element type `Ineq` is used to represent the strength of a comparison between\nterms. ","docLink":"./Mathlib/Data/Ineq.html#Mathlib.Ineq","kind":"inductive","line":22,"name":"Mathlib.Ineq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/Ineq.lean#L22-L26"}}],"imports":["Init","Mathlib.Lean.Expr.Basic"],"instances":[{"className":"Decidable","name":"Mathlib.instDecidableEqIneq","typeNames":["Eq"]},{"className":"Inhabited","name":"Mathlib.instInhabitedIneq","typeNames":["Mathlib.Ineq"]},{"className":"Repr","name":"Mathlib.instReprIneq","typeNames":["Mathlib.Ineq"]},{"className":"ToString","name":"Mathlib.Ineq.instToString","typeNames":["Mathlib.Ineq"]},{"className":"Std.ToFormat","name":"Mathlib.Ineq.instToFormat","typeNames":["Mathlib.Ineq"]}],"name":"Mathlib.Data.Ineq"}