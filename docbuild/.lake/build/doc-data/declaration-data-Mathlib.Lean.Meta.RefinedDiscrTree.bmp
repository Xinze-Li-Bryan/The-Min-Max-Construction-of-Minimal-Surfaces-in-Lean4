{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree.html#Lean.Meta.RefinedDiscrTree.findMatches\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">findMatches</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">EnvExtension</a> <span class=\"fn\">(<a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree\">RefinedDiscrTree</a> <span class=\"fn\">α</span>)</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addEntry</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.LazyEntry\">LazyEntry</a>)</span>))</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constantsPerTask</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">capacityPerTask</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">128</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">α</span></span>)</span></div></div>","info":{"doc":"`findMatches` combines `findImportMatches` and `findModuleMatches`.\n\n* `ext` should be an environment extension with an `IO.Ref` for caching the `RefinedDiscrTree`.\n* `addEntry` is the function for creating `RefinedDiscrTree` entries from constants.\n* `ty` is the expression type.\n* `constantsPerTask` is the number of constants in imported modules to be used for each\n  new task.\n* `capacityPerTask` is the initial capacity of the `HashMap` at the root of the\n  `RefinedDiscrTree` for each new task.\n","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree.html#Lean.Meta.RefinedDiscrTree.findMatches","kind":"def","line":136,"name":"Lean.Meta.RefinedDiscrTree.findMatches","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/RefinedDiscrTree.lean#L136-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree.html#Lean.Meta.RefinedDiscrTree.findModuleMatches\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">findModuleMatches</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">moduleRef</span> : <span class=\"fn\"><a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Initialize.html#Lean.Meta.RefinedDiscrTree.ModuleDiscrTreeRef\">ModuleDiscrTreeRef</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Returns candidates from this module that match the expression. ","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree.html#Lean.Meta.RefinedDiscrTree.findModuleMatches","kind":"def","line":128,"name":"Lean.Meta.RefinedDiscrTree.findModuleMatches","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/RefinedDiscrTree.lean#L128-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree.html#Lean.Meta.RefinedDiscrTree.findImportMatches\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">findImportMatches</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">EnvExtension</a> <span class=\"fn\">(<a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree\">RefinedDiscrTree</a> <span class=\"fn\">α</span>)</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addEntry</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.LazyEntry\">LazyEntry</a>)</span>))</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constantsPerTask</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">capacityPerTask</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">128</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Lookup.html#Lean.Meta.RefinedDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Returns candidates from all imported modules that match the expression. ","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree.html#Lean.Meta.RefinedDiscrTree.findImportMatches","kind":"def","line":108,"name":"Lean.Meta.RefinedDiscrTree.findImportMatches","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/RefinedDiscrTree.lean#L108-L126"}}],"imports":["Init","Mathlib.Lean.Meta.RefinedDiscrTree.Lookup","Mathlib.Lean.Meta.RefinedDiscrTree.Initialize"],"instances":[],"name":"Mathlib.Lean.Meta.RefinedDiscrTree"}