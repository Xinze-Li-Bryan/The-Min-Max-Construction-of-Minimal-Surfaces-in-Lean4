{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.isOrderedAddMonoid\"><span class=\"name\">DFinsupp</span>.<span class=\"name\">Lex</span>.<span class=\"name\">isOrderedAddMonoid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#IsOrderedAddMonoid\">IsOrderedAddMonoid</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#IsOrderedAddMonoid\">IsOrderedAddMonoid</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Synonym.html#Lex\">Lex</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.isOrderedAddMonoid","kind":"instance","line":180,"name":"DFinsupp.Lex.isOrderedAddMonoid","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/DFinsupp/Lex.lean#L180-L183"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.isOrderedCancelAddMonoid\"><span class=\"name\">DFinsupp</span>.<span class=\"name\">Lex</span>.<span class=\"name\">isOrderedCancelAddMonoid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#IsOrderedCancelAddMonoid\">IsOrderedCancelAddMonoid</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Defs.html#IsOrderedCancelAddMonoid\">IsOrderedCancelAddMonoid</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Synonym.html#Lex\">Lex</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.isOrderedCancelAddMonoid","kind":"instance","line":174,"name":"DFinsupp.Lex.isOrderedCancelAddMonoid","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/DFinsupp/Lex.lean#L174-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.orderBot\"><span class=\"name\">DFinsupp</span>.<span class=\"name\">Lex</span>.<span class=\"name\">orderBot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Canonical/Defs.html#CanonicallyOrderedAdd\">CanonicallyOrderedAdd</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#OrderBot\">OrderBot</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Synonym.html#Lex\">Lex</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.orderBot","kind":"instance","line":168,"name":"DFinsupp.Lex.orderBot","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/DFinsupp/Lex.lean#L168-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.addRightMono\"><span class=\"name\">DFinsupp</span>.<span class=\"name\">Lex</span>.<span class=\"name\">addRightMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightStrictMono\">AddRightStrictMono</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightMono\">AddRightMono</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Synonym.html#Lex\">Lex</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.addRightMono","kind":"instance","line":157,"name":"DFinsupp.Lex.addRightMono","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/DFinsupp/Lex.lean#L157-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.addRightStrictMono\"><span class=\"name\">DFinsupp</span>.<span class=\"name\">Lex</span>.<span class=\"name\">addRightStrictMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightStrictMono\">AddRightStrictMono</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightStrictMono\">AddRightStrictMono</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Synonym.html#Lex\">Lex</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.addRightStrictMono","kind":"instance","line":153,"name":"DFinsupp.Lex.addRightStrictMono","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/DFinsupp/Lex.lean#L153-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.addLeftMono\"><span class=\"name\">DFinsupp</span>.<span class=\"name\">Lex</span>.<span class=\"name\">addLeftMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftStrictMono\">AddLeftStrictMono</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftMono\">AddLeftMono</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Synonym.html#Lex\">Lex</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.addLeftMono","kind":"instance","line":144,"name":"DFinsupp.Lex.addLeftMono","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/DFinsupp/Lex.lean#L144-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.addLeftStrictMono\"><span class=\"name\">DFinsupp</span>.<span class=\"name\">Lex</span>.<span class=\"name\">addLeftStrictMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftStrictMono\">AddLeftStrictMono</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftStrictMono\">AddLeftStrictMono</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Synonym.html#Lex\">Lex</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.addLeftStrictMono","kind":"instance","line":141,"name":"DFinsupp.Lex.addLeftStrictMono","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/DFinsupp/Lex.lean#L141-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.lt_of_forall_lt_of_lt\"><span class=\"name\">DFinsupp</span>.<span class=\"name\">lt_of_forall_lt_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Synonym.html#Lex\">Lex</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ <span class=\"fn\">j</span> &lt; <span class=\"fn\">i</span>, <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/Synonym.html#ofLex\">ofLex</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/Synonym.html#ofLex\">ofLex</a> <span class=\"fn\">b</span>)</span> <span class=\"fn\">j</span></span>)</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/Synonym.html#ofLex\">ofLex</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/Synonym.html#ofLex\">ofLex</a> <span class=\"fn\">b</span>)</span> <span class=\"fn\">i</span></span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.lt_of_forall_lt_of_lt","kind":"theorem","line":121,"name":"DFinsupp.lt_of_forall_lt_of_lt","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/DFinsupp/Lex.lean#L121-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.toLex_monotone\"><span class=\"name\">DFinsupp</span>.<span class=\"name\">toLex_monotone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Defs.html#Monotone\">Monotone</a> <span class=\"fn\">⇑<a href=\"./Mathlib/Order/Synonym.html#toLex\">toLex</a></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.toLex_monotone","kind":"theorem","line":113,"name":"DFinsupp.toLex_monotone","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/DFinsupp/Lex.lean#L113-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.linearOrder\"><span class=\"name\">DFinsupp</span>.<span class=\"name\">Lex</span>.<span class=\"name\">linearOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Synonym.html#Lex\">Lex</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span>)</span></span></div></div>","info":{"doc":"The linear order on `DFinsupp`s obtained by the lexicographic ordering. ","docLink":"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.linearOrder","kind":"instance","line":101,"name":"DFinsupp.Lex.linearOrder","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/DFinsupp/Lex.lean#L101-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.decidableLT\"><span class=\"name\">DFinsupp</span>.<span class=\"name\">Lex</span>.<span class=\"name\">decidableLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Synonym.html#Lex\">Lex</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span>)</span></span></div></div>","info":{"doc":"The less-than relation for the lexicographic ordering is decidable. ","docLink":"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.decidableLT","kind":"def","line":97,"name":"DFinsupp.Lex.decidableLT","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/DFinsupp/Lex.lean#L97-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.decidableLT_def\"><span class=\"name\">DFinsupp</span>.<span class=\"name\">Lex</span>.<span class=\"name\">decidableLT_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.decidableLT\">decidableLT</a> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/DFinsupp/Lex.html#_private.Mathlib.Data.DFinsupp.Lex.0.DFinsupp.lt_trichotomy_rec\">DFinsupp.lt_trichotomy_rec✝</a> <span class=\"fn\">(fun {<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>} (<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Synonym.html#toLex\">toLex</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Synonym.html#toLex\">toLex</a> <span class=\"fn\">g</span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.isTrue\">isTrue</a> <span class=\"fn\">h</span></span>)</span>\n    <span class=\"fn\">(fun {<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>} (<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Synonym.html#toLex\">toLex</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Synonym.html#toLex\">toLex</a> <span class=\"fn\">g</span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.isFalse\">isFalse</a> <span class=\"fn\">⋯</span></span>)</span>\n    <span class=\"fn\">fun {<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>} (<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Synonym.html#toLex\">toLex</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Synonym.html#toLex\">toLex</a> <span class=\"fn\">f</span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.isFalse\">isFalse</a> <span class=\"fn\">⋯</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.decidableLT_def","kind":"theorem","line":97,"name":"DFinsupp.Lex.decidableLT_def","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/DFinsupp/Lex.lean#L97-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.decidableLE\"><span class=\"name\">DFinsupp</span>.<span class=\"name\">Lex</span>.<span class=\"name\">decidableLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLE\">DecidableLE</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Synonym.html#Lex\">Lex</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span>)</span></span></div></div>","info":{"doc":"The less-or-equal relation for the lexicographic ordering is decidable. ","docLink":"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.decidableLE","kind":"def","line":91,"name":"DFinsupp.Lex.decidableLE","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/DFinsupp/Lex.lean#L91-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.decidableLE_def\"><span class=\"name\">DFinsupp</span>.<span class=\"name\">Lex</span>.<span class=\"name\">decidableLE_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.decidableLE\">decidableLE</a> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/DFinsupp/Lex.html#_private.Mathlib.Data.DFinsupp.Lex.0.DFinsupp.lt_trichotomy_rec\">DFinsupp.lt_trichotomy_rec✝</a> <span class=\"fn\">(fun {<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>} (<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Synonym.html#toLex\">toLex</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Synonym.html#toLex\">toLex</a> <span class=\"fn\">g</span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.isTrue\">isTrue</a> <span class=\"fn\">⋯</span></span>)</span>\n    <span class=\"fn\">(fun {<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>} (<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Synonym.html#toLex\">toLex</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Synonym.html#toLex\">toLex</a> <span class=\"fn\">g</span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.isTrue\">isTrue</a> <span class=\"fn\">⋯</span></span>)</span>\n    <span class=\"fn\">fun {<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>} (<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Synonym.html#toLex\">toLex</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Synonym.html#toLex\">toLex</a> <span class=\"fn\">f</span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.isFalse\">isFalse</a> <span class=\"fn\">⋯</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.decidableLE_def","kind":"theorem","line":91,"name":"DFinsupp.Lex.decidableLE_def","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/DFinsupp/Lex.lean#L91-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.partialOrder\"><span class=\"name\">DFinsupp</span>.<span class=\"name\">Lex</span>.<span class=\"name\">partialOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Synonym.html#Lex\">Lex</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span>)</span></span></div></div>","info":{"doc":"The partial order on `DFinsupp`s obtained by the lexicographic ordering.\nSee `DFinsupp.Lex.linearOrder` for a proof that this partial order is in fact linear. ","docLink":"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.partialOrder","kind":"instance","line":65,"name":"DFinsupp.Lex.partialOrder","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/DFinsupp/Lex.lean#L65-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.isStrictOrder\"><span class=\"name\">DFinsupp</span>.<span class=\"name\">Lex</span>.<span class=\"name\">isStrictOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsStrictOrder\">IsStrictOrder</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Synonym.html#Lex\">Lex</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Synonym.html#Lex\">Lex</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex.isStrictOrder","kind":"instance","line":60,"name":"DFinsupp.Lex.isStrictOrder","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/DFinsupp/Lex.lean#L60-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.lex_lt_of_lt\"><span class=\"name\">DFinsupp</span>.<span class=\"name\">lex_lt_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsStrictOrder\">IsStrictOrder</a> <span class=\"fn\">ι</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlt</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/PiLex.html#Pi.Lex\">Pi.Lex</a> <span class=\"fn\">r</span> <span class=\"fn\">(fun {<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>} (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">⇑<span class=\"fn\">x</span></span> <span class=\"fn\">⇑<span class=\"fn\">y</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.lex_lt_of_lt","kind":"theorem","line":53,"name":"DFinsupp.lex_lt_of_lt","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/DFinsupp/Lex.lean#L53-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.lex_lt_of_lt_of_preorder\"><span class=\"name\">DFinsupp</span>.<span class=\"name\">lex_lt_of_lt_of_preorder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsStrictOrder\">IsStrictOrder</a> <span class=\"fn\">ι</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlt</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\">(∀ (<span class=\"fn\">j</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">j</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">y</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">y</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">j</span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">y</span> <span class=\"fn\">i</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.lex_lt_of_lt_of_preorder","kind":"theorem","line":44,"name":"DFinsupp.lex_lt_of_lt_of_preorder","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/DFinsupp/Lex.lean#L44-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.instLTLex\"><span class=\"name\">DFinsupp</span>.<span class=\"name\">instLTLex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Synonym.html#Lex\">Lex</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.instLTLex","kind":"instance","line":41,"name":"DFinsupp.instLTLex","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/DFinsupp/Lex.lean#L41-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.lex_def\"><span class=\"name\">DFinsupp</span>.<span class=\"name\">lex_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex\">DFinsupp.Lex</a> <span class=\"fn\">r</span> <span class=\"fn\">s</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">j</span> : <span class=\"fn\">ι</span>), <span class=\"fn\">(∀ (<span class=\"fn\">d</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">d</span> <span class=\"fn\">j</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <span class=\"fn\">d</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span> <span class=\"fn\">d</span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">j</span> <span class=\"fn\">(<span class=\"fn\">a</span> <span class=\"fn\">j</span>)</span> <span class=\"fn\">(<span class=\"fn\">b</span> <span class=\"fn\">j</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.lex_def","kind":"theorem","line":37,"name":"DFinsupp.lex_def","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/DFinsupp/Lex.lean#L37-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/DFinsupp/Lex.html#Pi.lex_eq_dfinsupp_lex\"><span class=\"name\">Pi</span>.<span class=\"name\">lex_eq_dfinsupp_lex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/PiLex.html#Pi.Lex\">Pi.Lex</a> <span class=\"fn\">r</span> <span class=\"fn\">(fun {<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>} =&gt; <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">⇑<span class=\"fn\">a</span></span> <span class=\"fn\">⇑<span class=\"fn\">b</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex\">DFinsupp.Lex</a> <span class=\"fn\">r</span> <span class=\"fn\">s</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/DFinsupp/Lex.html#Pi.lex_eq_dfinsupp_lex","kind":"theorem","line":33,"name":"Pi.lex_eq_dfinsupp_lex","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/DFinsupp/Lex.lean#L33-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex\"><span class=\"name\">DFinsupp</span>.<span class=\"name\">Lex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\">α</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"`DFinsupp.Lex r s` is the lexicographic relation on `Π₀ i, α i`, where `ι` is ordered by `r`,\nand `α i` is ordered by `s i`.\nThe type synonym `Lex (Π₀ i, α i)` has an order given by `DFinsupp.Lex (· < ·) (· < ·)`.\n","docLink":"./Mathlib/Data/DFinsupp/Lex.html#DFinsupp.Lex","kind":"def","line":26,"name":"DFinsupp.Lex","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/DFinsupp/Lex.lean#L26-L31"}}],"imports":["Init","Mathlib.Algebra.Order.Group.PiLex","Mathlib.Data.DFinsupp.Order","Mathlib.Data.DFinsupp.NeLocus","Mathlib.Order.WellFoundedSet"],"instances":[{"className":"LT","name":"DFinsupp.instLTLex","typeNames":["Lex"]},{"className":"IsStrictOrder","name":"DFinsupp.Lex.isStrictOrder","typeNames":["Lex"]},{"className":"PartialOrder","name":"DFinsupp.Lex.partialOrder","typeNames":["Lex"]},{"className":"LinearOrder","name":"DFinsupp.Lex.linearOrder","typeNames":["Lex"]},{"className":"CovariantClass","name":"DFinsupp.Lex.addLeftStrictMono","typeNames":["Lex"]},{"className":"CovariantClass","name":"DFinsupp.Lex.addLeftMono","typeNames":["Lex"]},{"className":"CovariantClass","name":"DFinsupp.Lex.addRightStrictMono","typeNames":["Lex"]},{"className":"CovariantClass","name":"DFinsupp.Lex.addRightMono","typeNames":["Lex"]},{"className":"OrderBot","name":"DFinsupp.Lex.orderBot","typeNames":["Lex"]},{"className":"IsOrderedCancelAddMonoid","name":"DFinsupp.Lex.isOrderedCancelAddMonoid","typeNames":["Lex"]},{"className":"IsOrderedAddMonoid","name":"DFinsupp.Lex.isOrderedAddMonoid","typeNames":["Lex"]}],"name":"Mathlib.Data.DFinsupp.Lex"}