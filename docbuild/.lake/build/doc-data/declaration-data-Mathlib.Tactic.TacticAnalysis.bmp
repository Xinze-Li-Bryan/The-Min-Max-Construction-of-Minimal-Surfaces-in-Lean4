{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config.ofComplex\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">Config</span>.<span class=\"name\">ofComplex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig\">ComplexConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config\">Config</a></div></div>","info":{"doc":"Constructor for a `Config` which breaks the pass up into multiple pieces. ","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config.ofComplex","kind":"def","line":333,"name":"Mathlib.TacticAnalysis.Config.ofComplex","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L333-L335"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.runPass\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">runPass</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig\">ComplexConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">seq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo\">Lean.Elab.TacticInfo</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Run the `config` against a sequence of tactics, using the `trigger` to determine which\nsubsequences should be `test`ed. ","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.runPass","kind":"def","line":301,"name":"Mathlib.TacticAnalysis.runPass","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L301-L331"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.testTacticSeq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">testTacticSeq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig\">ComplexConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacticSeq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxI</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo\">Lean.Elab.TacticInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><span class=\"fn\">config</span>.<a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig.ctx\">ctx</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Test the `config` against a sequence of tactics, using the context info and tactic info\nfrom the start of the sequence. ","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.testTacticSeq","kind":"def","line":280,"name":"Mathlib.TacticAnalysis.testTacticSeq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L280-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig.tell\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">ComplexConfig</span>.<span class=\"name\">tell</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig\">ComplexConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">originalSubgoals</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">originalHeartbeats</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">new</span> : <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig.out\">out</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newHeartbeats</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span></div></div>","info":{"doc":"Decides what to report to the user. ","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig.tell","kind":"def","line":277,"name":"Mathlib.TacticAnalysis.ComplexConfig.tell","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L277-L277"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig.test\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">ComplexConfig</span>.<span class=\"name\">test</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig\">ComplexConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">context</span> : <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig.ctx\">ctx</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig.out\">out</a></span></span></div></div>","info":{"doc":"Code to run in the context of the tactic, for example an alternative tactic. ","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig.test","kind":"def","line":275,"name":"Mathlib.TacticAnalysis.ComplexConfig.test","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L275-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig.trigger\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">ComplexConfig</span>.<span class=\"name\">trigger</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig\">ComplexConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">context</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig.ctx\">ctx</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currentTactic</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.TriggerCondition\">TriggerCondition</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig.ctx\">ctx</a></span></span></div></div>","info":{"doc":"Determines which (sequences of) tactics to analyze.\n\n`context` is `some ctx` whenever the previous trigger returned `continue ctx`,\n`none` at the start of a tactic sequence or after a `skip`/`accept`.\n\nIf the last returned value is `continue` at the end of the sequence, the framework inserts an\nextra `done` to run the `trigger` on.\n","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig.trigger","kind":"def","line":273,"name":"Mathlib.TacticAnalysis.ComplexConfig.trigger","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L273-L273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig.ctx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">ComplexConfig</span>.<span class=\"name\">ctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig\">ComplexConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Type returned by the `.trigger` function. ","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig.ctx","kind":"def","line":263,"name":"Mathlib.TacticAnalysis.ComplexConfig.ctx","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L263-L263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig.out\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">ComplexConfig</span>.<span class=\"name\">out</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig\">ComplexConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Type returned by the `.test` function. ","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig.out","kind":"def","line":261,"name":"Mathlib.TacticAnalysis.ComplexConfig.out","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L261-L261"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">ComplexConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">out </span><span class=\"fn\">ctx</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trigger</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">ctx</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.TriggerCondition\">TriggerCondition</a> <span class=\"fn\">ctx</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">test</span> : <span class=\"fn\"><span class=\"fn\">ctx</span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">out</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tell</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">out</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig\">ComplexConfig</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig.mk","kind":"ctor","line":259,"name":"Mathlib.TacticAnalysis.ComplexConfig.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L259-L259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">ComplexConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> 1</div></div>","info":{"doc":"Specifies which analysis steps to take.\n\nThe overall design will have three user-supplied components:\n\n* **trigger** on a piece of syntax (which could contain multiple tactic calls);\n* **test** if a suggested change is indeed an improvement;\n* **tell** the user where changes can be made.\n","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.ComplexConfig","kind":"structure","line":251,"name":"Mathlib.TacticAnalysis.ComplexConfig","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L251-L278"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.instBEqTriggerCondition.beq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">instBEqTriggerCondition</span>.<span class=\"name\">beq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ctx✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">ctx✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.TriggerCondition\">TriggerCondition</a> <span class=\"fn\">ctx✝</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.TriggerCondition\">TriggerCondition</a> <span class=\"fn\">ctx✝</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.instBEqTriggerCondition.beq","kind":"def","line":249,"name":"Mathlib.TacticAnalysis.instBEqTriggerCondition.beq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L249-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.instBEqTriggerCondition\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">instBEqTriggerCondition</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ctx✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">ctx✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.TriggerCondition\">TriggerCondition</a> <span class=\"fn\">ctx✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.instBEqTriggerCondition","kind":"instance","line":249,"name":"Mathlib.TacticAnalysis.instBEqTriggerCondition","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L249-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.TriggerCondition.accept\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">TriggerCondition</span>.<span class=\"name\">accept</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ctx</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">context</span> : <span class=\"fn\">ctx</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.TriggerCondition\">TriggerCondition</a> <span class=\"fn\">ctx</span></span></div></div>","info":{"doc":"`accept` means to run the test on the sequence of `.continue`s up to this `.accept`. ","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.TriggerCondition.accept","kind":"ctor","line":247,"name":"Mathlib.TacticAnalysis.TriggerCondition.accept","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L247-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.TriggerCondition.continue\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">TriggerCondition</span>.<span class=\"name\">continue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ctx</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">context</span> : <span class=\"fn\">ctx</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.TriggerCondition\">TriggerCondition</a> <span class=\"fn\">ctx</span></span></div></div>","info":{"doc":"`continue` means to accumulate the current tactic, but not yet run the test on it. ","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.TriggerCondition.continue","kind":"ctor","line":245,"name":"Mathlib.TacticAnalysis.TriggerCondition.continue","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L245-L246"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.TriggerCondition.skip\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">TriggerCondition</span>.<span class=\"name\">skip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ctx</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.TriggerCondition\">TriggerCondition</a> <span class=\"fn\">ctx</span></span></div></div>","info":{"doc":"`skip` means that the current tactic and the ones before it will be discarded. ","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.TriggerCondition.skip","kind":"ctor","line":243,"name":"Mathlib.TacticAnalysis.TriggerCondition.skip","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L243-L244"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.TriggerCondition\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">TriggerCondition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>","info":{"doc":"The condition is returned from the `.trigger` function to indicate which sublists of a\ntactic sequence to test.\n\nThe `context` field can be used to accumulate data between different invocations of `.trigger`.\n","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.TriggerCondition","kind":"inductive","line":236,"name":"Mathlib.TacticAnalysis.TriggerCondition","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L236-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.tacticAnalysis\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">tacticAnalysis</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>","info":{"doc":"A tactic analysis framework.\nIt is aimed at allowing developers to specify refactoring patterns,\nwhich will be tested against a whole project,\nto report proposed changes.\n\nIt hooks into the linting system to move through the infotree,\ncollecting tactic syntax and state to call the passes on.\n","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.tacticAnalysis","kind":"def","line":206,"name":"Mathlib.TacticAnalysis.tacticAnalysis","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L206-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.runPasses\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">runPasses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">configs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Pass\">Pass</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trees</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">Lean.PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Run the tactic analysis passes from `configs` on the tactic sequences in `stx`,\nusing `trees` to get the infotrees. ","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.runPasses","kind":"def","line":191,"name":"Mathlib.TacticAnalysis.runPasses","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L191-L204"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.findTacticSeqs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">findTacticSeqs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tree</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo\">Lean.Elab.TacticInfo</a>))</span>)</span></span></div></div>","info":{"doc":"Parse an infotree to find all the sequences of tactics contained within `stx`.\n\nWe consider a sequence here to be a maximal interval of tactics joined by `;` or newlines.\nThis function returns an array of sequences. For example, a proof of the form:\n```\nby\n  tac1\n  · tac2; tac3\n  · tac4; tac5\n```\nwould result in three sequences:\n* `#[tac1, (· tac2; tac3), (· tac4; tac5)]`\n* `#[tac2, tac3]`\n* `#[tac4, tac5]`\n\nSimilarly, a declaration with multiple `by` blocks results in each of the blocks getting its\nown sequence.\n","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.findTacticSeqs","kind":"def","line":130,"name":"Mathlib.TacticAnalysis.findTacticSeqs","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L130-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.tacticAnalysisExt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">tacticAnalysisExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">Lean.PersistentEnvExtension</a> <a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Entry\">Entry</a> (<a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Entry\">Entry</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Pass\">Pass</a>) (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Entry\">Entry</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Pass\">Pass</a></span>)</span></div></div>","info":{"doc":"Environment extensions for `tacticAnalysis` declarations ","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.tacticAnalysisExt","kind":"opaque","line":89,"name":"Mathlib.TacticAnalysis.tacticAnalysisExt","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L89-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.instOrdEntry\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">instOrdEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Entry\">Entry</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.instOrdEntry","kind":"instance","line":86,"name":"Mathlib.TacticAnalysis.instOrdEntry","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L86-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Entry.import\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">Entry</span>.<span class=\"name\">import</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Entry\">Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.ImportM\">Lean.ImportM</a> <a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Pass\">Pass</a></span></div></div>","info":{"doc":"Read a configuration from a declaration of the right type. ","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Entry.import","kind":"def","line":77,"name":"Mathlib.TacticAnalysis.Entry.import","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L77-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Entry.optionName\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">Entry</span>.<span class=\"name\">optionName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Entry\">Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>","info":{"doc":"The option, of type `Lean.Option Bool`, that controls whether the pass is enabled. ","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Entry.optionName","kind":"def","line":75,"name":"Mathlib.TacticAnalysis.Entry.optionName","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L75-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Entry.declName\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">Entry</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Entry\">Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>","info":{"doc":"The declaration, of type `Config`, that defines this pass. ","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Entry.declName","kind":"def","line":73,"name":"Mathlib.TacticAnalysis.Entry.declName","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L73-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Entry.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">Entry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName </span><span class=\"fn\">optionName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Entry\">Entry</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Entry.mk","kind":"ctor","line":71,"name":"Mathlib.TacticAnalysis.Entry.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L71-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Entry\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">Entry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Each tactic analysis round is represented by the declaration name for the `Config`. ","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Entry","kind":"structure","line":70,"name":"Mathlib.TacticAnalysis.Entry","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L70-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Pass.opt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">Pass</span>.<span class=\"name\">opt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Pass\">Pass</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>","info":{"doc":"The option corresponding to this pass, used to enable it.\n\nExample: `linter.tacticAnalysis.grindReplacement`.\n","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Pass.opt","kind":"def","line":68,"name":"Mathlib.TacticAnalysis.Pass.opt","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L68-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Pass.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">Pass</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toConfig</span> : <a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config\">Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opt</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Pass\">Pass</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Pass.mk","kind":"ctor","line":63,"name":"Mathlib.TacticAnalysis.Pass.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Pass.toConfig\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">Pass</span>.<span class=\"name\">toConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Pass\">Pass</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Pass.toConfig","kind":"def","line":63,"name":"Mathlib.TacticAnalysis.Pass.toConfig","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L63-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Pass\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">Pass</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config\">Mathlib.TacticAnalysis.Config</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The internal representation of a tactic analysis pass,\nextending `Config` with some declaration meta-information.\n","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Pass","kind":"structure","line":60,"name":"Mathlib.TacticAnalysis.Pass","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L60-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config.run\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">Config</span>.<span class=\"name\">run</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo\">Lean.Elab.TacticInfo</a>)</span> → <span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>","info":{"doc":"The function that runs this pass. Takes an array of infotree nodes corresponding\nto a sequence of tactics from the source file. Should do all reporting itself,\nfor example by `Lean.Linter.logLint`.\n","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config.run","kind":"def","line":58,"name":"Mathlib.TacticAnalysis.Config.run","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L58-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">run</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo\">Lean.Elab.TacticInfo</a>)</span> → <span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config.mk","kind":"ctor","line":53,"name":"Mathlib.TacticAnalysis.Config.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Stores the configuration for a tactic analysis pass.\n\nThis provides the low-level interface into the tactic analysis framework.\n","docLink":"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config","kind":"structure","line":49,"name":"Mathlib.TacticAnalysis.Config","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L49-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis.html#linter.tacticAnalysis\"><span class=\"name\">linter</span>.<span class=\"name\">tacticAnalysis</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The tactic analysis framework hooks into the linter to run analysis rounds on sequences\nof tactics.\nThis can be used for linting, or in a more batch-like mode to report potential refactors.\n","docLink":"./Mathlib/Tactic/TacticAnalysis.html#linter.tacticAnalysis","kind":"opaque","line":38,"name":"linter.tacticAnalysis","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis.lean#L38-L45"}}],"imports":["Init","Lean.Util.Heartbeats","Lean.Server.InfoUtils","Mathlib.Lean.ContextInfo","Mathlib.Lean.Elab.Tactic.Meta"],"instances":[{"className":"Ord","name":"Mathlib.TacticAnalysis.instOrdEntry","typeNames":["Mathlib.TacticAnalysis.Entry"]},{"className":"BEq","name":"Mathlib.TacticAnalysis.instBEqTriggerCondition","typeNames":["Mathlib.TacticAnalysis.TriggerCondition"]}],"name":"Mathlib.Tactic.TacticAnalysis"}