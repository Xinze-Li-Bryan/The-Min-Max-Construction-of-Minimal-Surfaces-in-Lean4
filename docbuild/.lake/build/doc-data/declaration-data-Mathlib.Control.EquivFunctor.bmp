{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv.injective\"><span class=\"name\">EquivFunctor</span>.<span class=\"name\">mapEquiv</span>.<span class=\"name\">injective</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u₀ → <a href=\"./foundational_types.html\">Type</a> u₁</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u₀}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u₀), <span class=\"fn\"><a href=\"./Init/Data/Function.html#Function.Injective\">Function.Injective</a> <a href=\"./Init/Prelude.html#Pure.pure\">pure</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">(<a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv\">mapEquiv</a> <span class=\"fn\">f</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv.injective","kind":"theorem","line":92,"name":"EquivFunctor.mapEquiv.injective","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Control/EquivFunctor.lean#L92-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.ofLawfulFunctor\"><span class=\"name\">EquivFunctor</span>.<span class=\"name\">ofLawfulFunctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u₀ → <a href=\"./foundational_types.html\">Type</a> u₁</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulFunctor\">LawfulFunctor</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor\">EquivFunctor</a> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.ofLawfulFunctor","kind":"instance","line":82,"name":"EquivFunctor.ofLawfulFunctor","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Control/EquivFunctor.lean#L82-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv_trans\"><span class=\"name\">EquivFunctor</span>.<span class=\"name\">mapEquiv_trans</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u₀ → <a href=\"./foundational_types.html\">Type</a> u₁</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor\">EquivFunctor</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u₀}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ab</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bc</span> : <span class=\"fn\">β</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">γ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv\">mapEquiv</a> <span class=\"fn\">f</span> <span class=\"fn\">ab</span>)</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.trans\">trans</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv\">mapEquiv</a> <span class=\"fn\">f</span> <span class=\"fn\">bc</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv\">mapEquiv</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ab</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.trans\">trans</a></span> <span class=\"fn\">bc</span>)</span></span></div></div>","info":{"doc":"The composition of `mapEquiv`s is carried over the `EquivFunctor`.\nFor plain `Functor`s, this lemma is named `map_map` when applied\nor `map_comp_map` when not applied.\n","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv_trans","kind":"theorem","line":71,"name":"EquivFunctor.mapEquiv_trans","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Control/EquivFunctor.lean#L71-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv_symm\"><span class=\"name\">EquivFunctor</span>.<span class=\"name\">mapEquiv_symm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u₀ → <a href=\"./foundational_types.html\">Type</a> u₁</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor\">EquivFunctor</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u₀}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv\">mapEquiv</a> <span class=\"fn\">f</span> <span class=\"fn\">e</span>)</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv\">mapEquiv</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv_symm","kind":"theorem","line":67,"name":"EquivFunctor.mapEquiv_symm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Control/EquivFunctor.lean#L67-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv_refl\"><span class=\"name\">EquivFunctor</span>.<span class=\"name\">mapEquiv_refl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u₀ → <a href=\"./foundational_types.html\">Type</a> u₁</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor\">EquivFunctor</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u₀)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv\">mapEquiv</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.refl\">Equiv.refl</a> <span class=\"fn\">α</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.refl\">Equiv.refl</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv_refl","kind":"theorem","line":63,"name":"EquivFunctor.mapEquiv_refl","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Control/EquivFunctor.lean#L63-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv_symm_apply\"><span class=\"name\">EquivFunctor</span>.<span class=\"name\">mapEquiv_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u₀ → <a href=\"./foundational_types.html\">Type</a> u₁</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor\">EquivFunctor</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u₀}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv\">mapEquiv</a> <span class=\"fn\">f</span> <span class=\"fn\">e</span>)</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.map\">map</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv_symm_apply","kind":"theorem","line":60,"name":"EquivFunctor.mapEquiv_symm_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Control/EquivFunctor.lean#L60-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv_apply\"><span class=\"name\">EquivFunctor</span>.<span class=\"name\">mapEquiv_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u₀ → <a href=\"./foundational_types.html\">Type</a> u₁</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor\">EquivFunctor</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u₀}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv\">mapEquiv</a> <span class=\"fn\">f</span> <span class=\"fn\">e</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.map\">map</a> <span class=\"fn\">e</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv_apply","kind":"theorem","line":56,"name":"EquivFunctor.mapEquiv_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Control/EquivFunctor.lean#L56-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv\"><span class=\"name\">EquivFunctor</span>.<span class=\"name\">mapEquiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u₀ → <a href=\"./foundational_types.html\">Type</a> u₁</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor\">EquivFunctor</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u₀}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"An `EquivFunctor` in fact takes every equiv to an equiv. ","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mapEquiv","kind":"def","line":45,"name":"EquivFunctor.mapEquiv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Control/EquivFunctor.lean#L45-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.map_trans'\"><span class=\"name\">EquivFunctor</span>.<span class=\"name\">map_trans'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u₀ → <a href=\"./foundational_types.html\">Type</a> u₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor\">EquivFunctor</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u₀}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">β</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">γ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.map\">map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.trans\">trans</a></span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.map\">map</a> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.map\">map</a> <span class=\"fn\">k</span></span></div></div>","info":{"doc":"`map` is functorial on equivalences. ","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.map_trans'","kind":"theorem","line":35,"name":"EquivFunctor.map_trans'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Control/EquivFunctor.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.map_refl'\"><span class=\"name\">EquivFunctor</span>.<span class=\"name\">map_refl'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u₀ → <a href=\"./foundational_types.html\">Type</a> u₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor\">EquivFunctor</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u₀)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.map\">map</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.refl\">Equiv.refl</a> <span class=\"fn\">α</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#id\">id</a></div></div>","info":{"doc":"`map` of `f` preserves the identity morphism. ","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.map_refl'","kind":"theorem","line":33,"name":"EquivFunctor.map_refl'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Control/EquivFunctor.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.map\"><span class=\"name\">EquivFunctor</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u₀ → <a href=\"./foundational_types.html\">Type</a> u₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor\">EquivFunctor</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u₀}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">β</span></span></span></span></div></div>","info":{"doc":"The action of `f` on isomorphisms. ","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.map","kind":"def","line":31,"name":"EquivFunctor.map","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Control/EquivFunctor.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mk\"><span class=\"name\">EquivFunctor</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u₀ → <a href=\"./foundational_types.html\">Type</a> u₁</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">map</span> : <span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u₀} → <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">β</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">map_refl'</span> : <span class=\"fn\">∀ (<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u₀), <span class=\"fn\"><span class=\"fn\">map</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.refl\">Equiv.refl</a> <span class=\"fn\">α</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#id\">id</a></span> := by rfl)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">map_trans'</span> : <span class=\"fn\">∀ {<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u₀} (<span class=\"fn\">k</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span>) (<span class=\"fn\">h</span> : <span class=\"fn\">β</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">γ</span>), <span class=\"fn\"><span class=\"fn\">map</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.trans\">trans</a></span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">map</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">map</span> <span class=\"fn\">k</span></span></span> := by rfl)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor\">EquivFunctor</a> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor.mk","kind":"ctor","line":29,"name":"EquivFunctor.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Control/EquivFunctor.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/EquivFunctor.html#EquivFunctor\"><span class=\"name\">EquivFunctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u₀ → <a href=\"./foundational_types.html\">Type</a> u₁</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (u₀ + 1) u₁)</div></div>","info":{"doc":"An `EquivFunctor` is only functorial with respect to equivalences.\n\nTo construct an `EquivFunctor`, it suffices to supply just the function `f α → f β` from\nan equivalence `α ≃ β`, and then prove the functor laws. It's then a consequence that\nthis function is part of an equivalence, provided by `EquivFunctor.mapEquiv`.\n","docLink":"./Mathlib/Control/EquivFunctor.html#EquivFunctor","kind":"class","line":23,"name":"EquivFunctor","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Control/EquivFunctor.lean#L23-L35"}}],"imports":["Init","Mathlib.Logic.Equiv.Defs","Mathlib.Tactic.Convert"],"instances":[{"className":"EquivFunctor","name":"EquivFunctor.ofLawfulFunctor","typeNames":[]}],"name":"Mathlib.Control.EquivFunctor"}