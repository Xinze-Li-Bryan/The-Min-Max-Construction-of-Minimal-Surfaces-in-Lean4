{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.delabSubscript\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">delabSubscript</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Lean.PrettyPrinter.Delaborator.Delab</a></div></div>","info":{"doc":"Successfully delaborates only if the resulting expression can be subscripted.\n\nSee `Mapping.subscript` in this file for legal subscript characters. ","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.delabSubscript","kind":"def","line":322,"name":"Mathlib.Tactic.delabSubscript","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L322-L327"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.delabSuperscript\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">delabSuperscript</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Lean.PrettyPrinter.Delaborator.Delab</a></div></div>","info":{"doc":"Successfully delaborates only if the resulting expression can be superscripted.\n\nSee `Mapping.superscript` in this file for legal superscript characters. ","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.delabSuperscript","kind":"def","line":315,"name":"Mathlib.Tactic.delabSuperscript","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L315-L320"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.subscriptTerm\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">subscriptTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a></div></div>","info":{"doc":"Shorthand for `subscript(term)`.\n\nThis is needed because the initializer below does not always run, and if it has not run then\ndownstream parsers using the combinators will crash.\n\nSee https://leanprover.zulipchat.com/#narrow/channel/270676-lean4/topic/Non-builtin.20parser.20aliases/near/365125476\nfor some context. ","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.subscriptTerm","kind":"def","line":290,"name":"Mathlib.Tactic.subscriptTerm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L290-L298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.subscript.formatter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">subscript</span>.<span class=\"name\">formatter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/PrettyPrinter/Formatter.html#Lean.PrettyPrinter.Formatter\">Lean.PrettyPrinter.Formatter</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Formatter.html#Lean.PrettyPrinter.Formatter\">Lean.PrettyPrinter.Formatter</a></div></div>","info":{"doc":"Formatter for the subscript parser. ","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.subscript.formatter","kind":"def","line":286,"name":"Mathlib.Tactic.subscript.formatter","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L286-L288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.subscript.parenthesizer\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">subscript</span>.<span class=\"name\">parenthesizer</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/PrettyPrinter/Parenthesizer.html#Lean.PrettyPrinter.Parenthesizer\">Lean.PrettyPrinter.Parenthesizer</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Parenthesizer.html#Lean.PrettyPrinter.Parenthesizer\">Lean.PrettyPrinter.Parenthesizer</a></div></div>","info":{"doc":"Formatter for the subscript parser. ","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.subscript.parenthesizer","kind":"def","line":283,"name":"Mathlib.Tactic.subscript.parenthesizer","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L283-L285"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.subscript\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">subscript</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a></div></div>","info":{"doc":"The parser `subscript(term)` parses a subscript. Basic usage is:\n```\nlocal syntax:arg term:max subscript(term) : term\nlocal macro_rules | `($a:term $i:subscript) => `($a $i)\n```\nGiven a notation like this, the expression `(a)ᵢ` parses and expands to `a i`. (Either parentheses\nor a whitespace as in `a ᵢ` is required, because `aᵢ` is considered as an identifier.)\n\nNote that because of Unicode limitations, not many characters can actually be typed inside the\nsubscript, so this should not be used for complex expressions. Legal subscript characters:\n```\n₀₁₂₃₄₅₆₇₈₉ₐₑₕᵢⱼₖₗₘₙₒₚᵣₛₜᵤᵥₓᴀʙᴄᴅᴇꜰɢʜɪᴊᴋʟᴍɴᴏᴘꞯʀꜱᴛᴜᴠᴡʏᴢᵦᵧᵨᵩᵪ₊₋₌₍₎\n```\n","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.subscript","kind":"def","line":266,"name":"Mathlib.Tactic.subscript","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L266-L282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.superscriptTerm\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">superscriptTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a></div></div>","info":{"doc":"Shorthand for `superscript(term)`.\n\nThis is needed because the initializer below does not always run, and if it has not run then\ndownstream parsers using the combinators will crash.\n\nSee https://leanprover.zulipchat.com/#narrow/channel/270676-lean4/topic/Non-builtin.20parser.20aliases/near/365125476\nfor some context. ","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.superscriptTerm","kind":"def","line":254,"name":"Mathlib.Tactic.superscriptTerm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L254-L262"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.superscript.formatter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">superscript</span>.<span class=\"name\">formatter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/PrettyPrinter/Formatter.html#Lean.PrettyPrinter.Formatter\">Lean.PrettyPrinter.Formatter</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Formatter.html#Lean.PrettyPrinter.Formatter\">Lean.PrettyPrinter.Formatter</a></div></div>","info":{"doc":"Formatter for the superscript parser. ","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.superscript.formatter","kind":"def","line":249,"name":"Mathlib.Tactic.superscript.formatter","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L249-L252"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.superscript.parenthesizer\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">superscript</span>.<span class=\"name\">parenthesizer</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/PrettyPrinter/Parenthesizer.html#Lean.PrettyPrinter.Parenthesizer\">Lean.PrettyPrinter.Parenthesizer</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Parenthesizer.html#Lean.PrettyPrinter.Parenthesizer\">Lean.PrettyPrinter.Parenthesizer</a></div></div>","info":{"doc":"Formatter for the superscript parser. ","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.superscript.parenthesizer","kind":"def","line":246,"name":"Mathlib.Tactic.superscript.parenthesizer","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L246-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.superscript\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">superscript</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a></div></div>","info":{"doc":"The parser `superscript(term)` parses a superscript. Basic usage is:\n```\nlocal syntax:arg term:max superscript(term) : term\nlocal macro_rules | `($a:term $b:superscript) => `($a ^ $b)\n```\nGiven a notation like this, the expression `2⁶⁴` parses and expands to `2 ^ 64`.\n\nNote that because of Unicode limitations, not many characters can actually be typed inside the\nsuperscript, so this should not be used for complex expressions. Legal superscript characters:\n```\n⁰¹²³⁴⁵⁶⁷⁸⁹ᵃᵇᶜᵈᵉᶠᵍʰⁱʲᵏˡᵐⁿᵒᵖ𐞥ʳˢᵗᵘᵛʷˣʸᶻᴬᴮᴰᴱᴳᴴᴵᴶᴷᴸᴹᴺᴼᴾꟴᴿᵀᵁⱽᵂᵝᵞᵟᵋᶿᶥᶹᵠᵡ⁺⁻⁼⁽⁾\n```\n","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.superscript","kind":"def","line":230,"name":"Mathlib.Tactic.superscript","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L230-L245"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptParser.formatter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">scriptParser</span>.<span class=\"name\">formatter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping\">Mapping</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/PrettyPrinter/Formatter.html#Lean.PrettyPrinter.Formatter\">Lean.PrettyPrinter.Formatter</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Formatter.html#Lean.PrettyPrinter.Formatter\">Lean.PrettyPrinter.Formatter</a></div></div>","info":{"doc":"Formatter for the script parser. ","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptParser.formatter","kind":"def","line":211,"name":"Mathlib.Tactic.Superscript.scriptParser.formatter","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L211-L226"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Std.Format.mapStringsM\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">mapStringsM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#String\">String</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"Map over the strings in a `Format`. ","docLink":"./Mathlib/Util/Superscript.html#Std.Format.mapStringsM","kind":"def","line":201,"name":"Std.Format.mapStringsM","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L201-L209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptParser.parenthesizer\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">scriptParser</span>.<span class=\"name\">parenthesizer</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/PrettyPrinter/Parenthesizer.html#Lean.PrettyPrinter.Parenthesizer\">Lean.PrettyPrinter.Parenthesizer</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Parenthesizer.html#Lean.PrettyPrinter.Parenthesizer\">Lean.PrettyPrinter.Parenthesizer</a></div></div>","info":{"doc":"Parenthesizer for the script parser. ","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptParser.parenthesizer","kind":"def","line":197,"name":"Mathlib.Tactic.Superscript.scriptParser.parenthesizer","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L197-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptParser\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">scriptParser</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping\">Mapping</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">antiquotName </span><span class=\"fn\">errorMsg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">many</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a> := by exact decl_name%)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a></div></div>","info":{"doc":"The super/subscript parser.\n\n* `m`: the character mapping\n* `antiquotName`: the name to use for antiquotation bindings `$a:antiquotName`.\n  Note that the actual syntax kind bound will be the body kind (parsed by `p`), not `kind`.\n* `errorMsg`: shown when the parser does not match\n* `p`: the inner parser (usually `term`), to be called on the body of the superscript\n* `many`: if false, whitespace is not allowed inside the superscript\n* `kind`: the term will be wrapped in a node with this kind;\n  generally this is a name of the parser declaration itself.\n","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptParser","kind":"def","line":175,"name":"Mathlib.Tactic.Superscript.scriptParser","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L175-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignSyntax\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">scriptFnNoAntiquot</span>.<span class=\"name\">alignSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserContext\">Lean.Parser.ParserContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aligns</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>","info":{"doc":"Applies the alignment mapping to a `Syntax`. ","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignSyntax","kind":"opaque","line":163,"name":"Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignSyntax","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L163-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignInfo\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">scriptFnNoAntiquot</span>.<span class=\"name\">alignInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserContext\">Lean.Parser.ParserContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aligns</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a> → <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a></span></div></div>","info":{"doc":"Applies the alignment mapping to a `SourceInfo`. ","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignInfo","kind":"def","line":154,"name":"Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignInfo","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L154-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignSubstr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">scriptFnNoAntiquot</span>.<span class=\"name\">alignSubstr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserContext\">Lean.Parser.ParserContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aligns</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>","info":{"doc":"Applies the alignment mapping to a `Substring`. ","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignSubstr","kind":"def","line":151,"name":"Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignSubstr","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L151-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot.align\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">scriptFnNoAntiquot</span>.<span class=\"name\">align</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aligns</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>","info":{"doc":"Applies the alignment mapping to a position. ","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot.align","kind":"def","line":143,"name":"Mathlib.Tactic.Superscript.scriptFnNoAntiquot.align","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L143-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">scriptFnNoAntiquot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping\">Mapping</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorMsg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Lean.Parser.ParserFn</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">many</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Lean.Parser.ParserFn</a></div></div>","info":{"doc":"The core function for super/subscript parsing. It consists of three stages:\n\n1. Parse a run of superscripted characters, skipping whitespace and stopping when we hit a\n   non-superscript character.\n2. Un-superscript the text and pass the body to the inner parser (usually `term`).\n3. Take the resulting `Syntax` object and align all the positions to fit back into the original\n   text (which as a side effect also rewrites all the substrings to be in subscript text).\n\nIf `many` is false, then whitespace (and comments) are not allowed inside the superscript.\n","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot","kind":"def","line":110,"name":"Mathlib.Tactic.Superscript.scriptFnNoAntiquot","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L110-L173"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.partitionPoint\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">partitionPoint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">leftOfPartition</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lo</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Given a predicate `leftOfPartition` which is true for indexes `< i` and false for `≥ i`,\nreturns `i`, by binary search. ","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.partitionPoint","kind":"def","line":96,"name":"Mathlib.Tactic.Superscript.partitionPoint","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L96-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.satisfyTokensFn.loop\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">satisfyTokensFn</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span> → <span class=\"fn\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">Lean.Parser.ParserState</a> → <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">Lean.Parser.ParserState</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserContext\">Lean.Parser.ParserContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toks</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">Lean.Parser.ParserState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">Lean.Parser.ParserState</a></div></div>","info":{"doc":"Loop body of `satisfyTokensFn` ","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.satisfyTokensFn.loop","kind":"opaque","line":84,"name":"Mathlib.Tactic.Superscript.satisfyTokensFn.loop","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L84-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.satisfyTokensFn\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">satisfyTokensFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorMsg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">many</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span> → <span class=\"fn\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">Lean.Parser.ParserState</a> → <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">Lean.Parser.ParserState</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Lean.Parser.ParserFn</a></div></div>","info":{"doc":"Collects runs of text satisfying `p` followed by whitespace. Fails if the first character does\nnot satisfy `p`. If `many` is true, it will parse 1 or more many whitespace-separated runs,\notherwise it will parse only 1. If successful, it passes the result to `k` as an array `(a, b, c)`\nwhere `a..b` is a token and `b..c` is whitespace.\n","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.satisfyTokensFn","kind":"def","line":68,"name":"Mathlib.Tactic.Superscript.satisfyTokensFn","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L68-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.subscript\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">Mapping</span>.<span class=\"name\">subscript</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping\">Mapping</a></div></div>","info":{"doc":"A mapping from subscripts to and from regular text. ","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.subscript","kind":"def","line":63,"name":"Mathlib.Tactic.Superscript.Mapping.subscript","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L63-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.superscript\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">Mapping</span>.<span class=\"name\">superscript</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping\">Mapping</a></div></div>","info":{"doc":"A mapping from superscripts to and from regular text. ","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.superscript","kind":"def","line":58,"name":"Mathlib.Tactic.Superscript.Mapping.superscript","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L58-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.mkMapping\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">mkMapping</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping\">Mapping</a></div></div>","info":{"doc":"Constructs a mapping (intended for compile time use). Panics on violated invariants. ","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.mkMapping","kind":"def","line":46,"name":"Mathlib.Tactic.Superscript.mkMapping","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L46-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.instInhabitedMapping.default\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">instInhabitedMapping</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping\">Mapping</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.instInhabitedMapping.default","kind":"def","line":44,"name":"Mathlib.Tactic.Superscript.instInhabitedMapping.default","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.instInhabitedMapping\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">instInhabitedMapping</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping\">Mapping</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.instInhabitedMapping","kind":"instance","line":44,"name":"Mathlib.Tactic.Superscript.instInhabitedMapping","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.toSpecial\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">Mapping</span>.<span class=\"name\">toSpecial</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping\">Mapping</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Char\">Char</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"Map from \"normal\" text to \"special\" (e.g. superscript) characters. ","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.toSpecial","kind":"def","line":43,"name":"Mathlib.Tactic.Superscript.Mapping.toSpecial","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.toNormal\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">Mapping</span>.<span class=\"name\">toNormal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping\">Mapping</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Char\">Char</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"Map from \"special\" (e.g. superscript) characters to \"normal\" characters. ","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.toNormal","kind":"def","line":41,"name":"Mathlib.Tactic.Superscript.Mapping.toNormal","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">Mapping</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toNormal </span><span class=\"fn\">toSpecial</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Char\">Char</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping\">Mapping</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.mk","kind":"ctor","line":39,"name":"Mathlib.Tactic.Superscript.Mapping.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">Mapping</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A bidirectional character mapping. ","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping","kind":"structure","line":38,"name":"Mathlib.Tactic.Superscript.Mapping","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L38-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.instHashableChar_mathlib\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">instHashableChar_mathlib</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.instHashableChar_mathlib","kind":"instance","line":36,"name":"Mathlib.Tactic.Superscript.instHashableChar_mathlib","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/Superscript.lean#L36-L36"}}],"imports":["Init","Mathlib.Init","Batteries.Tactic.Lint"],"instances":[{"className":"Hashable","name":"Mathlib.Tactic.Superscript.instHashableChar_mathlib","typeNames":["Char"]},{"className":"Inhabited","name":"Mathlib.Tactic.Superscript.instInhabitedMapping","typeNames":["Mathlib.Tactic.Superscript.Mapping"]}],"name":"Mathlib.Util.Superscript"}