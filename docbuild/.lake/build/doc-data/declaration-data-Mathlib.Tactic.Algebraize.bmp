{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.tacticAlgebraize_only__\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticAlgebraize_only__</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Version of `algebraize`, which only adds `Algebra` instances and `IsScalarTower` instances,\nbut does not try to add any instances about any properties tagged with\n`@[algebraize]`, like for example `Finite` or `IsIntegral`. ","docLink":"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.tacticAlgebraize_only__","kind":"def","line":288,"name":"Mathlib.Tactic.tacticAlgebraize_only__","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Algebraize.lean#L288-L291"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.tacticAlgebraize__\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticAlgebraize__</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Tactic that, given `RingHom`s, adds the corresponding `Algebra` and (if possible)\n`IsScalarTower` instances, as well as `Algebra` corresponding to `RingHom` properties available\nas hypotheses.\n\nExample: given `f : A →+* B` and `g : B →+* C`, and `hf : f.FiniteType`, `algebraize [f, g]` will\nadd the instances `Algebra A B`, `Algebra B C`, and `Algebra.FiniteType A B`.\n\nSee the `algebraize` tag for instructions on what properties can be added.\n\nThe tactic also comes with a configuration option `properties`. If set to `true` (default), the\ntactic searches through the local context for `RingHom` properties that can be converted to\n`Algebra` properties. The macro `algebraize_only` calls\n`algebraize -properties`,\nso in other words it only adds `Algebra` and `IsScalarTower` instances. ","docLink":"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.tacticAlgebraize__","kind":"def","line":243,"name":"Mathlib.Tactic.tacticAlgebraize__","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Algebraize.lean#L243-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.algebraizeTermSeq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">algebraizeTermSeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"A list of terms passed to `algebraize` as argument. ","docLink":"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.algebraizeTermSeq","kind":"def","line":240,"name":"Mathlib.Tactic.algebraizeTermSeq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Algebraize.lean#L240-L241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.Algebraize.elabAlgebraizeConfig\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Algebraize</span>.<span class=\"name\">elabAlgebraizeConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.Algebraize.Config\">Config</a></span></span></div></div>","info":{"doc":"Function elaborating `Algebraize.Config`. ","docLink":"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.Algebraize.elabAlgebraizeConfig","kind":"def","line":233,"name":"Mathlib.Tactic.Algebraize.elabAlgebraizeConfig","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Algebraize.lean#L233-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.Algebraize.instInhabitedConfig.default\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Algebraize</span>.<span class=\"name\">instInhabitedConfig</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.Algebraize.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.Algebraize.instInhabitedConfig.default","kind":"def","line":231,"name":"Mathlib.Tactic.Algebraize.instInhabitedConfig.default","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Algebraize.lean#L231-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.Algebraize.instInhabitedConfig\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Algebraize</span>.<span class=\"name\">instInhabitedConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.Algebraize.Config\">Config</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.Algebraize.instInhabitedConfig","kind":"instance","line":231,"name":"Mathlib.Tactic.Algebraize.instInhabitedConfig","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Algebraize.lean#L231-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.Algebraize.Config.properties\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Algebraize</span>.<span class=\"name\">Config</span>.<span class=\"name\">properties</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.Algebraize.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If true (default), the tactic will search the local context for `RingHom` properties\nthat can be converted to `Algebra` properties. ","docLink":"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.Algebraize.Config.properties","kind":"def","line":230,"name":"Mathlib.Tactic.Algebraize.Config.properties","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Algebraize.lean#L230-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.Algebraize.Config.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Algebraize</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">properties</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.Algebraize.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.Algebraize.Config.mk","kind":"ctor","line":227,"name":"Mathlib.Tactic.Algebraize.Config.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Algebraize.lean#L227-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.Algebraize.Config\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Algebraize</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Configuration for `algebraize`. ","docLink":"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.Algebraize.Config","kind":"structure","line":226,"name":"Mathlib.Tactic.Algebraize.Config","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Algebraize.lean#L226-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.Algebraize.addProperties\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Algebraize</span>.<span class=\"name\">addProperties</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"This function takes an array of expressions `t`, all of which are assumed to be `RingHom`s,\nand searches through the local context to find any additional properties of these `RingHoms`, after\nwhich it tries to add the corresponding `Algebra` properties to the context. It only looks for\nproperties that have been tagged with the `algebraize` attribute, and uses this tag to find the\ncorresponding `Algebra` property. ","docLink":"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.Algebraize.addProperties","kind":"def","line":164,"name":"Mathlib.Tactic.Algebraize.addProperties","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Algebraize.lean#L164-L224"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.Algebraize.addIsScalarTowerInstanceFromRingHomComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Algebraize</span>.<span class=\"name\">addIsScalarTowerInstanceFromRingHomComp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Given an expression `g.comp f` which is the composition of two `RingHom`s, this function adds\nthe instance `IsScalarTower A B C` to the context (if it does not already exist). ","docLink":"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.Algebraize.addIsScalarTowerInstanceFromRingHomComp","kind":"def","line":142,"name":"Mathlib.Tactic.Algebraize.addIsScalarTowerInstanceFromRingHomComp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Algebraize.lean#L142-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.Algebraize.addAlgebraInstanceFromRingHom\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Algebraize</span>.<span class=\"name\">addAlgebraInstanceFromRingHom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">ft</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Given an expression `f` of type `RingHom A B` where `A` and `B` are commutative semirings,\nthis function adds the instance `Algebra A B` to the context (if it does not already exist).\n\nThis function also requires the type of `f`, given by the parameter `ft`. The reason this is done\n(even though `ft` can be inferred from `f`) is to avoid recomputing `ft` in the `algebraize` tactic,\nas when `algebraize` calls `addAlgebraInstanceFromRingHom` it has already computed `ft`. ","docLink":"./Mathlib/Tactic/Algebraize.html#Mathlib.Tactic.Algebraize.addAlgebraInstanceFromRingHom","kind":"def","line":124,"name":"Mathlib.Tactic.Algebraize.addAlgebraInstanceFromRingHom","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Algebraize.lean#L124-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Algebraize.html#Lean.Attr.algebraizeAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Attr</span>.<span class=\"name\">algebraizeAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.ParametricAttribute\">ParametricAttribute</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"A user attribute that is used to tag `RingHom` properties that can be converted to `Algebra`\nproperties. Using an (optional) parameter, it will also generate a `Name` of a declaration which\nwill help the `algebraize` tactic access the corresponding `Algebra` property.\n\nThere are two cases for what declaration corresponding to this `Name` can be.\n\n1. An inductive type (i.e. the `Algebra` property itself), in this case it is assumed that the\n`RingHom` and the `Algebra` property are definitionally the same, and the tactic will construct the\n`Algebra` property by giving the `RingHom` property as a term.\n2. A lemma (or constructor) proving the `Algebra` property from the `RingHom` property. In this case\nit is assumed that the `RingHom` property is the final argument, and that no other explicit argument\nis needed. The tactic then constructs the `Algebra` property by applying the lemma or constructor.\n\nFinally, if no argument is provided to the `algebraize` attribute, it is assumed that the tagged\ndeclaration has name `RingHom.Property` and that the corresponding `Algebra` property has name\n`Algebra.Property`. The attribute then returns `Algebra.Property` (so assume case 1 above). ","docLink":"./Mathlib/Tactic/Algebraize.html#Lean.Attr.algebraizeAttr","kind":"opaque","line":94,"name":"Lean.Attr.algebraizeAttr","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Algebraize.lean#L94-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Algebraize.html#Lean.Attr.algebraizeGetParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Attr</span>.<span class=\"name\">algebraizeGetParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thm</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttrM\">AttrM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Function that extracts the name of the corresponding `Algebra` property from a `RingHom`\nproperty that has been tagged with the `algebraize` attribute. This is done by either returning the\nparameter of the attribute, or by assuming that the tagged declaration has name `RingHom.Property`\nand then returning `Algebra.Property`. ","docLink":"./Mathlib/Tactic/Algebraize.html#Lean.Attr.algebraizeGetParam","kind":"def","line":78,"name":"Lean.Attr.algebraizeGetParam","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Algebraize.lean#L78-L92"}}],"imports":["Init","Mathlib.Algebra.Algebra.Tower"],"instances":[{"className":"Inhabited","name":"Mathlib.Tactic.Algebraize.instInhabitedConfig","typeNames":["Mathlib.Tactic.Algebraize.Config"]}],"name":"Mathlib.Tactic.Algebraize"}