{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.assertLevelDefEqQ\"><span class=\"name\">Qq</span>.<span class=\"name\">assertLevelDefEqQ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">(u =QL v)</span>)</span></span></div></div>","info":{"doc":"Like `Qq.isLevelDefEqQ`, but throws an error if not defeq. ","docLink":"./Qq/MetaM.html#Qq.assertLevelDefEqQ","kind":"def","line":106,"name":"Qq.assertLevelDefEqQ","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/MetaM.lean#L106-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.isLevelDefEqQ\"><span class=\"name\">Qq</span>.<span class=\"name\">isLevelDefEqQ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Qq/MetaM.html#Qq.MaybeLevelDefEq\">MaybeLevelDefEq</a> <span class=\"fn\">u</span> <span class=\"fn\">v</span>)</span></span></div></div>","info":{"doc":"A version of `Lean.Meta.isLevelDefEq` which returns a strongly-typed witness rather than a bool. ","docLink":"./Qq/MetaM.html#Qq.isLevelDefEqQ","kind":"def","line":99,"name":"Qq.isLevelDefEqQ","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/MetaM.lean#L99-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.instReprMaybeLevelDefEq\"><span class=\"name\">Qq</span>.<span class=\"name\">instReprMaybeLevelDefEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Qq/MetaM.html#Qq.MaybeLevelDefEq\">MaybeLevelDefEq</a> <span class=\"fn\">u</span> <span class=\"fn\">v</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Qq/MetaM.html#Qq.instReprMaybeLevelDefEq","kind":"instance","line":94,"name":"Qq.instReprMaybeLevelDefEq","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/MetaM.lean#L94-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.MaybeLevelDefEq.notDefEq\"><span class=\"name\">Qq</span>.<span class=\"name\">MaybeLevelDefEq</span>.<span class=\"name\">notDefEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/MetaM.html#Qq.MaybeLevelDefEq\">MaybeLevelDefEq</a> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"","docLink":"./Qq/MetaM.html#Qq.MaybeLevelDefEq.notDefEq","kind":"ctor","line":92,"name":"Qq.MaybeLevelDefEq.notDefEq","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/MetaM.lean#L92-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.MaybeLevelDefEq.defEq\"><span class=\"name\">Qq</span>.<span class=\"name\">MaybeLevelDefEq</span>.<span class=\"name\">defEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u =QL v</span> → <span class=\"fn\"><a href=\"./Qq/MetaM.html#Qq.MaybeLevelDefEq\">MaybeLevelDefEq</a> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span></span></div></div>","info":{"doc":"","docLink":"./Qq/MetaM.html#Qq.MaybeLevelDefEq.defEq","kind":"ctor","line":91,"name":"Qq.MaybeLevelDefEq.defEq","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/MetaM.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.MaybeLevelDefEq\"><span class=\"name\">Qq</span>.<span class=\"name\">MaybeLevelDefEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The result of `Qq.isLevelDefEqQ`; `MaybeLevelDefEq u v` is an optional version of `$u =QL $v`. ","docLink":"./Qq/MetaM.html#Qq.MaybeLevelDefEq","kind":"inductive","line":89,"name":"Qq.MaybeLevelDefEq","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/MetaM.lean#L89-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.assertDefEqQ\"><span class=\"name\">Qq</span>.<span class=\"name\">assertDefEqQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> :\n  <span class=\"fn\">have <span class=\"fn\">u</span> := <span class=\"fn\">u</span>;\n  <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">(<span class=\"fn\">«$a»</span> =Q <span class=\"fn\">«$b»</span>)</span>)</span></span></div></div>","info":{"doc":"Like `Qq.isDefEqQ`, but throws an error if not defeq. ","docLink":"./Qq/MetaM.html#Qq.assertDefEqQ","kind":"def","line":83,"name":"Qq.assertDefEqQ","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/MetaM.lean#L83-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.isDefEqQ\"><span class=\"name\">Qq</span>.<span class=\"name\">isDefEqQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> :\n  <span class=\"fn\">have <span class=\"fn\">u</span> := <span class=\"fn\">u</span>;\n  <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Qq/MetaM.html#Qq.MaybeDefEq\">MaybeDefEq</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span></span></div></div>","info":{"doc":"A version of `Lean.Meta.isDefEq` which returns a strongly-typed witness rather than a bool. ","docLink":"./Qq/MetaM.html#Qq.isDefEqQ","kind":"def","line":76,"name":"Qq.isDefEqQ","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/MetaM.lean#L76-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.instReprMaybeDefEq\"><span class=\"name\">Qq</span>.<span class=\"name\">instReprMaybeDefEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u✝</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> :\n  <span class=\"fn\">have <span class=\"fn\">u</span> := <span class=\"fn\">u✝</span>;\n  <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">Q(<span class=\"fn\">$α✝</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Qq/MetaM.html#Qq.MaybeDefEq\">MaybeDefEq</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Qq/MetaM.html#Qq.instReprMaybeDefEq","kind":"instance","line":71,"name":"Qq.instReprMaybeDefEq","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/MetaM.lean#L71-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.MaybeDefEq.notDefEq\"><span class=\"name\">Qq</span>.<span class=\"name\">MaybeDefEq</span>.<span class=\"name\">notDefEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> :\n  <span class=\"fn\">let <span class=\"fn\">u</span> := <span class=\"fn\">u</span>;\n  <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/MetaM.html#Qq.MaybeDefEq\">MaybeDefEq</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Qq/MetaM.html#Qq.MaybeDefEq.notDefEq","kind":"ctor","line":69,"name":"Qq.MaybeDefEq.notDefEq","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/MetaM.lean#L69-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.MaybeDefEq.defEq\"><span class=\"name\">Qq</span>.<span class=\"name\">MaybeDefEq</span>.<span class=\"name\">defEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> :\n  <span class=\"fn\">let <span class=\"fn\">u</span> := <span class=\"fn\">u</span>;\n  <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">«$a»</span> =Q <span class=\"fn\">«$b»</span></span> → <span class=\"fn\"><a href=\"./Qq/MetaM.html#Qq.MaybeDefEq\">MaybeDefEq</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></div></div>","info":{"doc":"","docLink":"./Qq/MetaM.html#Qq.MaybeDefEq.defEq","kind":"ctor","line":68,"name":"Qq.MaybeDefEq.defEq","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/MetaM.lean#L68-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.MaybeDefEq\"><span class=\"name\">Qq</span>.<span class=\"name\">MaybeDefEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> :\n  <span class=\"fn\">let <span class=\"fn\">u</span> := <span class=\"fn\">u</span>;\n  <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The result of `Qq.isDefEqQ`; `MaybeDefEq a b` is an optional version of `$a =Q $b`. ","docLink":"./Qq/MetaM.html#Qq.MaybeDefEq","kind":"inductive","line":66,"name":"Qq.MaybeDefEq","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/MetaM.lean#L66-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.checkTypeQ\"><span class=\"name\">Qq</span>.<span class=\"name\">checkTypeQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> :\n  <span class=\"fn\">have <span class=\"fn\">u</span> := <span class=\"fn\">u</span>;\n  <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">Q(<span class=\"fn\">«$ty»</span>)</span>)</span></span></div></div>","info":{"doc":"If `e` is a `ty`, then view it as a term of `Q($ty)`. ","docLink":"./Qq/MetaM.html#Qq.checkTypeQ","kind":"def","line":59,"name":"Qq.checkTypeQ","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/MetaM.lean#L59-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.inferTypeQ\"><span class=\"name\">Qq</span>.<span class=\"name\">inferTypeQ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a>\n  <span class=\"fn\">((<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>) ×\n    <span class=\"fn\">(<span class=\"fn\">α</span> :\n      <span class=\"fn\">have <span class=\"fn\">u</span> := <span class=\"fn\">u</span>;\n      <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span></span>) ×\n      <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span></span>)</span></span></div></div>","info":{"doc":"A `Qq`-ified version of `Lean.Meta.inferType`\n\nInstead of writing `let α ← inferType e`, this allows writing `let ⟨u, α, e⟩ ← inferTypeQ e`,\nwhich results in a context of\n```\ne✝ : Expr\nu : Level\nα : Q(Type u)\ne : Q($α)\n```\nHere, the new `e` is defeq to the old one, but now has `Qq`-ascribed type information.\n\nThis is frequently useful when using the `~q` matching from `QQ/Match.lean`,\nas it allows an `Expr` to be turned into something that can be matched upon.\n","docLink":"./Qq/MetaM.html#Qq.inferTypeQ","kind":"def","line":38,"name":"Qq.inferTypeQ","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/MetaM.lean#L38-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.elabTermEnsuringTypeQ\"><span class=\"name\">Qq</span>.<span class=\"name\">elabTermEnsuringTypeQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">catchExPostpone </span><span class=\"fn\">implicitLambda</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorMsgHeader?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">Q(<span class=\"fn\">«$expectedType»</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Qq/MetaM.html#Qq.elabTermEnsuringTypeQ","kind":"def","line":33,"name":"Qq.elabTermEnsuringTypeQ","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/MetaM.lean#L33-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.instantiateMVarsQ\"><span class=\"name\">Qq</span>.<span class=\"name\">instantiateMVarsQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Qq/MetaM.html#Qq.instantiateMVarsQ","kind":"def","line":30,"name":"Qq.instantiateMVarsQ","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/MetaM.lean#L30-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.synthInstanceQ\"><span class=\"name\">Qq</span>.<span class=\"name\">synthInstanceQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Qq/MetaM.html#Qq.synthInstanceQ","kind":"def","line":27,"name":"Qq.synthInstanceQ","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/MetaM.lean#L27-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.trySynthInstanceQ\"><span class=\"name\">Qq</span>.<span class=\"name\">trySynthInstanceQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Data/LOption.html#Lean.LOption\">Lean.LOption</a> <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Qq/MetaM.html#Qq.trySynthInstanceQ","kind":"def","line":24,"name":"Qq.trySynthInstanceQ","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/MetaM.lean#L24-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.withLocalDeclQ\"><span class=\"name\">Qq</span>.<span class=\"name\">withLocalDeclQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bi</span> : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">Q(<span class=\"fn\">«$β»</span>)</span> → <span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Qq/MetaM.html#Qq.withLocalDeclQ","kind":"def","line":21,"name":"Qq.withLocalDeclQ","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/MetaM.lean#L21-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.withLocalDeclDQ\"><span class=\"name\">Qq</span>.<span class=\"name\">withLocalDeclDQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">Q(<span class=\"fn\">«$β»</span>)</span> → <span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Qq/MetaM.html#Qq.withLocalDeclDQ","kind":"def","line":18,"name":"Qq.withLocalDeclDQ","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/MetaM.lean#L18-L19"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.mkFreshExprMVarQ\"><span class=\"name\">Qq</span>.<span class=\"name\">mkFreshExprMVarQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarKind\">Lean.MetavarKind</a> := <a href=\"./Lean/MetavarContext.html#Lean.MetavarKind.natural\">Lean.MetavarKind.natural</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> := <a href=\"./Init/Prelude.html#Lean.Name.anonymous\">Lean.Name.anonymous</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">Q(<span class=\"fn\">«$ty»</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Qq/MetaM.html#Qq.mkFreshExprMVarQ","kind":"def","line":15,"name":"Qq.mkFreshExprMVarQ","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/MetaM.lean#L15-L16"}}],"imports":["Init","Qq.Macro","Qq.Delab"],"instances":[{"className":"Repr","name":"Qq.instReprMaybeDefEq","typeNames":["Qq.MaybeDefEq"]},{"className":"Repr","name":"Qq.instReprMaybeLevelDefEq","typeNames":["Qq.MaybeLevelDefEq"]}],"name":"Qq.MetaM"}