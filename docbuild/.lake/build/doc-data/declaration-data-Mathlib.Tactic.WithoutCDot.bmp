{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/WithoutCDot.html#Lean.Elab.Term.elabWithoutCDot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabWithoutCDot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>","info":{"doc":"A set of parentheses, supporting type ascriptions, which does not process `路`.\n\nPrimarily, this is useful when quoting user-provided syntax inside parentheses, as it prevents `路`s\nfrom the caller being interpreted in the context of `()`s from the macro. ","docLink":"./Mathlib/Tactic/WithoutCDot.html#Lean.Elab.Term.elabWithoutCDot","kind":"def","line":40,"name":"Lean.Elab.Term.elabWithoutCDot","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/WithoutCDot.lean#L40-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/WithoutCDot.html#Lean.Elab.Term.withoutCDotImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withoutCDotImpl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser.Parser</a></div></div>","info":{"doc":"Implementation detail of `withoutCDot` ","docLink":"./Mathlib/Tactic/WithoutCDot.html#Lean.Elab.Term.withoutCDotImpl","kind":"def","line":29,"name":"Lean.Elab.Term.withoutCDotImpl","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/WithoutCDot.lean#L29-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/WithoutCDot.html#Lean.Elab.Term.withoutCDot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withoutCDot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser.Parser</a></div></div>","info":{"doc":"A set of parentheses, supporting type ascriptions, which does not process `路`.\n\nPrimarily, this is useful when quoting user-provided syntax inside parentheses, as it prevents `路`s\nfrom the caller being interpreted in the context of `()`s from the macro. ","docLink":"./Mathlib/Tactic/WithoutCDot.html#Lean.Elab.Term.withoutCDot","kind":"def","line":21,"name":"Lean.Elab.Term.withoutCDot","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/WithoutCDot.lean#L21-L27"}}],"imports":["Init","Lean.Elab.SyntheticMVars","Mathlib.Init"],"instances":[],"name":"Mathlib.Tactic.WithoutCDot"}