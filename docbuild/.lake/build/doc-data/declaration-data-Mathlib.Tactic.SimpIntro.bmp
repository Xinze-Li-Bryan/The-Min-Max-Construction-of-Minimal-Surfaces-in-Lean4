{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/SimpIntro.html#Mathlib.Tactic.«tacticSimp_intro_____..Only_»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">«tacticSimp_intro_____</span>.<span class=\"name\"></span>.<span class=\"name\">Only_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"The `simp_intro` tactic is a combination of `simp` and `intro`: it will simplify the types of\nvariables as it introduces them and uses the new variables to simplify later arguments\nand the goal.\n* `simp_intro x y z` introduces variables named `x y z`\n* `simp_intro x y z ..` introduces variables named `x y z` and then keeps introducing `_` binders\n* `simp_intro (config := cfg) (discharger := tac) x y .. only [h₁, h₂]`:\n  `simp_intro` takes the same options as `simp` (see `simp`)\n```\nexample : x + 0 = y → x = z := by\n  simp_intro h\n  -- h: x = y ⊢ y = z\n  sorry\n```\n","docLink":"./Mathlib/Tactic/SimpIntro.html#Mathlib.Tactic.«tacticSimp_intro_____..Only_»","kind":"def","line":55,"name":"Mathlib.Tactic.«tacticSimp_intro_____..Only_»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/SimpIntro.lean#L55-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/SimpIntro.html#Mathlib.Tactic.simpIntroCore\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpIntroCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simprocs</span> : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Lean.Meta.Simp.SimprocsArray</a> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discharge?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.Discharge\">Lean.Meta.Simp.Discharge</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">more</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ids</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.binderIdent</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span></div></div>","info":{"doc":"Main loop of the `simp_intro` tactic.\n* `g`: the original goal\n* `ctx`: the simp context, which is extended with local variables as we enter the binders\n* `discharge?`: the discharger\n* `more`: if true, we will keep introducing binders as long as we can\n* `ids`: the list of binder identifiers\n","docLink":"./Mathlib/Tactic/SimpIntro.html#Mathlib.Tactic.simpIntroCore","kind":"opaque","line":14,"name":"Mathlib.Tactic.simpIntroCore","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/SimpIntro.lean#L14-L52"}}],"imports":["Init","Lean.Elab.Tactic.Simp","Mathlib.Init"],"instances":[],"name":"Mathlib.Tactic.SimpIntro"}