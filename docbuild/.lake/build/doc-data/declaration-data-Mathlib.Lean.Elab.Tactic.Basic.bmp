{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.focusAndDoneWithScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">focusAndDoneWithScope</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">scope</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tactic</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Like `focusAndDone` but takes a scope (e.g. tactic name) as an argument to\nproduce more detailed error messages.\n","docLink":"./Mathlib/Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.focusAndDoneWithScope","kind":"def","line":32,"name":"Lean.Elab.Tactic.focusAndDoneWithScope","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Elab/Tactic/Basic.lean#L32-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.doneWithScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">doneWithScope</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">scope</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Like `done` but takes a scope (e.g. a tactic name) as an argument\nto produce more detailed error messages.\n","docLink":"./Mathlib/Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.doneWithScope","kind":"def","line":21,"name":"Lean.Elab.Tactic.doneWithScope","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Elab/Tactic/Basic.lean#L21-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.getMainTarget''\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">getMainTarget''</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Return expected type for the main goal, cleaning up annotations, using `Lean.MVarId.getType''`.\nRemark: note that `MVarId.getType'` uses `whnf` instead of `cleanupAnnotations`, and\n`MVarId.getType''` also uses `cleanupAnnotations` ","docLink":"./Mathlib/Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.getMainTarget''","kind":"def","line":15,"name":"Lean.Elab.Tactic.getMainTarget''","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Elab/Tactic/Basic.lean#L15-L19"}}],"imports":["Init","Mathlib.Lean.Meta"],"instances":[],"name":"Mathlib.Lean.Elab.Tactic.Basic"}