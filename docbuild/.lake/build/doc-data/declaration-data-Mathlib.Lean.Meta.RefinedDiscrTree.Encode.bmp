{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.encodeExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">encodeExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">labelledStars</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a></span>)</span></div></div>","info":{"doc":"Return the canonical encoding of `e` as a `Array Key`.\nThis is used for looking up `e` in a `RefinedDiscrTree`. ","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.encodeExpr","kind":"def","line":312,"name":"Lean.Meta.RefinedDiscrTree.encodeExpr","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L312-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.LazyEntry.toList\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">LazyEntry</span>.<span class=\"name\">toList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entry</span> : <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.LazyEntry\">LazyEntry</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">result</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a></span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a>)</span></span></div></div>","info":{"doc":"Completely evaluate a `LazyEntry`. ","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.LazyEntry.toList","kind":"opaque","line":305,"name":"Lean.Meta.RefinedDiscrTree.LazyEntry.toList","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L305-L310"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.encodeExprWithEta.go.fold\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">encodeExprWithEta</span>.<span class=\"name\">go</span>.<span class=\"name\">fold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">keys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.LazyEntry\">LazyEntry</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">todo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.LazyEntry\">LazyEntry</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.LazyEntry\">LazyEntry</a>)</span></div></div>","info":{"doc":"This variation on `List.fold` ensures that the array `keys`\nisn't copied unnecessarily. ","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.encodeExprWithEta.go.fold","kind":"opaque","line":296,"name":"Lean.Meta.RefinedDiscrTree.encodeExprWithEta.go.fold","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L296-L300"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.encodeExprWithEta.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">encodeExprWithEta</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">todo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.LazyEntry\">LazyEntry</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">result</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a>)</span>)</span></span></div></div>","info":{"doc":"The main loop for `encodeExpr`. ","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.encodeExprWithEta.go","kind":"opaque","line":284,"name":"Lean.Meta.RefinedDiscrTree.encodeExprWithEta.go","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L284-L303"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.encodeExprWithEta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">encodeExprWithEta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">labelledStars</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a>)</span>)</span></span></div></div>","info":{"doc":"Return all encodings of `e` as a `Array Key`. This is used for testing. ","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.encodeExprWithEta","kind":"def","line":276,"name":"Lean.Meta.RefinedDiscrTree.encodeExprWithEta","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L276-L303"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.evalLazyEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">evalLazyEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entry</span> : <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.LazyEntry\">LazyEntry</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eta</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.LazyEntry\">LazyEntry</a>))</span>)</span></span></div></div>","info":{"doc":"A single step in evaluating a `LazyEntry`. Allow multiple different outcomes. ","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.evalLazyEntry","kind":"def","line":266,"name":"Lean.Meta.RefinedDiscrTree.evalLazyEntry","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L266-L274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.initializeLazyEntryWithEta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">initializeLazyEntryWithEta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">labelledStars</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.LazyEntry\">LazyEntry</a>))</span></span></div></div>","info":{"doc":"Encode `e` as a sequence of keys, computing only the first `Key`. ","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.initializeLazyEntryWithEta","kind":"def","line":175,"name":"Lean.Meta.RefinedDiscrTree.initializeLazyEntryWithEta","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L175-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.initializeLazyEntryWithEtaAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RefinedDiscrTree</span>.<span class=\"name\">initializeLazyEntryWithEtaAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">labelledStars</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.Key\">Key</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Lean/Meta/RefinedDiscrTree/Basic.html#Lean.Meta.RefinedDiscrTree.LazyEntry\">LazyEntry</a>))</span></span></div></div>","info":{"doc":"Encode `e` as a sequence of keys, computing only the first `Key`. ","docLink":"./Mathlib/Lean/Meta/RefinedDiscrTree/Encode.html#Lean.Meta.RefinedDiscrTree.initializeLazyEntryWithEtaAux","kind":"def","line":169,"name":"Lean.Meta.RefinedDiscrTree.initializeLazyEntryWithEtaAux","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Meta/RefinedDiscrTree/Encode.lean#L169-L172"}}],"imports":["Init","Mathlib.Lean.Meta.RefinedDiscrTree.Basic","Lean.Meta.DiscrTree"],"instances":[],"name":"Mathlib.Lean.Meta.RefinedDiscrTree.Encode"}