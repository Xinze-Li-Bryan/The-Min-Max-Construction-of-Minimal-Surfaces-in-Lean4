{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.«tacticHave!?:_Using__»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Propose</span>.<span class=\"name\">«tacticHave!?:_Using__»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"* `have? using a, b, c` tries to find a lemma\n  which makes use of each of the local hypotheses `a, b, c`,\n  and reports any results via trace messages.\n* `have? : h using a, b, c` only returns lemmas whose type matches `h` (which may contain `_`).\n* `have?! using a, b, c` will also call `have` to add results to the local goal state.\n\nNote that `have?` (unlike `apply?`) does not inspect the goal at all,\nonly the types of the lemmas in the `using` clause.\n\n`have?` should not be left in proofs; it is a search tool, like `apply?`.\n\nSuggestions are printed as `have := f a b c`.\n","docLink":"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.«tacticHave!?:_Using__»","kind":"def","line":137,"name":"Mathlib.Tactic.Propose.«tacticHave!?:_Using__»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Propose.lean#L137-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.«tacticHave?!:_Using__»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Propose</span>.<span class=\"name\">«tacticHave?!:_Using__»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"* `have? using a, b, c` tries to find a lemma\n  which makes use of each of the local hypotheses `a, b, c`,\n  and reports any results via trace messages.\n* `have? : h using a, b, c` only returns lemmas whose type matches `h` (which may contain `_`).\n* `have?! using a, b, c` will also call `have` to add results to the local goal state.\n\nNote that `have?` (unlike `apply?`) does not inspect the goal at all,\nonly the types of the lemmas in the `using` clause.\n\n`have?` should not be left in proofs; it is a search tool, like `apply?`.\n\nSuggestions are printed as `have := f a b c`.\n","docLink":"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.«tacticHave?!:_Using__»","kind":"def","line":136,"name":"Mathlib.Tactic.Propose.«tacticHave?!:_Using__»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Propose.lean#L136-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.propose'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Propose</span>.<span class=\"name\">propose'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"* `have? using a, b, c` tries to find a lemma\n  which makes use of each of the local hypotheses `a, b, c`,\n  and reports any results via trace messages.\n* `have? : h using a, b, c` only returns lemmas whose type matches `h` (which may contain `_`).\n* `have?! using a, b, c` will also call `have` to add results to the local goal state.\n\nNote that `have?` (unlike `apply?`) does not inspect the goal at all,\nonly the types of the lemmas in the `using` clause.\n\n`have?` should not be left in proofs; it is a search tool, like `apply?`.\n\nSuggestions are printed as `have := f a b c`.\n","docLink":"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.propose'","kind":"def","line":98,"name":"Mathlib.Tactic.Propose.propose'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Propose.lean#L98-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.propose\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Propose</span>.<span class=\"name\">propose</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lemmas</span> : <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">required</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">solveByElimDepth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">15</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>))</span></span></div></div>","info":{"doc":"Attempts to find lemmas which use all of the `required` expressions as arguments, and\ncan be unified with the given `type` (which may contain metavariables, which we avoid assigning).\nWe look up candidate lemmas from a discrimination tree using the first such expression.\n\nReturns an array of pairs, containing the names of found lemmas and the resulting application.\n","docLink":"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.propose","kind":"def","line":69,"name":"Mathlib.Tactic.Propose.propose","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Propose.lean#L69-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.solveByElim\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Propose</span>.<span class=\"name\">solveByElim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">orig</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goals</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">use </span><span class=\"fn\">required</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"Shortcut for calling `solveByElim`. ","docLink":"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.solveByElim","kind":"def","line":54,"name":"Mathlib.Tactic.Propose.solveByElim","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Propose.lean#L54-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.proposeLemmas\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Propose</span>.<span class=\"name\">proposeLemmas</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Util/Cache.html#Batteries.Tactic.DeclCache\">Batteries.Tactic.DeclCache</a> <span class=\"fn\">(<a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/Propose.html#Mathlib.Tactic.Propose.proposeLemmas","kind":"opaque","line":42,"name":"Mathlib.Tactic.Propose.proposeLemmas","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Propose.lean#L42-L51"}}],"imports":["Init","Lean.Meta.Tactic.TryThis","Lean.Meta.Tactic.SolveByElim","Mathlib.Lean.Expr.Basic","Mathlib.Lean.Meta","Mathlib.Lean.Meta.Basic","Batteries.Util.Cache","Mathlib.Tactic.Core"],"instances":[],"name":"Mathlib.Tactic.Propose"}