{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Rat.html#Lean.Expr.isExplicitNumber\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isExplicitNumber</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Test if an expression represents an explicit number written in normal form:\n* A \"natural number in normal form\" is an expression `OfNat.ofNat n`, even if it is not of type `ℕ`,\n  as long as `n` is a literal.\n* An \"integer in normal form\" is an expression which is either a natural number in number form,\n  or `-n`, where `n` is a natural number in normal form.\n* A \"rational in normal form\" is an expressions which is either an integer in normal form,\n  or `n / d` where `n` is an integer in normal form, `d` is a natural number in normal form,\n  `d ≠ 1`, and `n` and `d` are coprime (in particular, we check that `(mkRat n d).den = d`).\n","docLink":"./Mathlib/Lean/Expr/Rat.html#Lean.Expr.isExplicitNumber","kind":"def","line":45,"name":"Lean.Expr.isExplicitNumber","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Expr/Rat.lean#L45-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Rat.html#Lean.Expr.rat?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">rat?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"Check if an expression is a \"rational in normal form\",\ni.e. either an integer number in normal form,\nor `n / d` where `n` is an integer in normal form, `d` is a natural number in normal form,\n`d ≠ 1`, and `n` and `d` are coprime (in particular, we check that `(mkRat n d).den = d`).\nIf so returns the rational number.\n","docLink":"./Mathlib/Lean/Expr/Rat.html#Lean.Expr.rat?","kind":"def","line":27,"name":"Lean.Expr.rat?","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Expr/Rat.lean#L27-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Rat.html#instToExprRat_mathlib\"><span class=\"name\">instToExprRat_mathlib</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ToExpr.html#Lean.ToExpr\">Lean.ToExpr</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Lean/Expr/Rat.html#instToExprRat_mathlib","kind":"instance","line":21,"name":"instToExprRat_mathlib","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Lean/Expr/Rat.lean#L21-L23"}}],"imports":["Init","Mathlib.Init","Batteries.Tactic.Alias"],"instances":[{"className":"Lean.ToExpr","name":"instToExprRat_mathlib","typeNames":["Rat"]}],"name":"Mathlib.Lean.Expr.Rat"}