{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/DischargerAsTactic.html#wrapSimpDischarger\"><span class=\"name\">wrapSimpDischarger</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dis</span> : <a href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.Discharge\">Lean.Meta.Simp.Discharge</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Wrap a simp discharger (a function `Expr â†’ SimpM (Option Expr)`) as a tactic,\nso that it can be passed as an argument to `simp (discharger := foo)`.\nThis is inverse to `mkDischargeWrapper`. ","docLink":"./Mathlib/Util/DischargerAsTactic.html#wrapSimpDischarger","kind":"def","line":20,"name":"wrapSimpDischarger","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/DischargerAsTactic.lean#L20-L29"}}],"imports":["Init","Mathlib.Init","Lean.Elab.Tactic.Basic","Lean.Meta.Tactic.Simp.Rewrite","Batteries.Tactic.Exact"],"instances":[],"name":"Mathlib.Util.DischargerAsTactic"}