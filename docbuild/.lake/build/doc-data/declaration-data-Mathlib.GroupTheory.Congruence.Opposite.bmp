{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Congruence/Opposite.html#AddCon.orderIsoOp_apply\"><span class=\"name\">AddCon</span>.<span class=\"name\">orderIsoOp_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Congruence/Defs.html#AddCon\">AddCon</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Congruence/Opposite.html#AddCon.orderIsoOp\">orderIsoOp</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/GroupTheory/Congruence/Opposite.html#AddCon.op\">op</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/Congruence/Opposite.html#AddCon.orderIsoOp_apply","kind":"theorem","line":49,"name":"AddCon.orderIsoOp_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/Congruence/Opposite.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Congruence/Opposite.html#AddCon.orderIsoOp_symm_apply\"><span class=\"name\">AddCon</span>.<span class=\"name\">orderIsoOp_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Congruence/Defs.html#AddCon\">AddCon</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/RelIso/Basic.html#RelIso.symm\">RelIso.symm</a> <a href=\"./Mathlib/GroupTheory/Congruence/Opposite.html#AddCon.orderIsoOp\">orderIsoOp</a>)</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/GroupTheory/Congruence/Opposite.html#AddCon.unop\">unop</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/Congruence/Opposite.html#AddCon.orderIsoOp_symm_apply","kind":"theorem","line":49,"name":"AddCon.orderIsoOp_symm_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/Congruence/Opposite.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Congruence/Opposite.html#Con.orderIsoOp_symm_apply\"><span class=\"name\">Con</span>.<span class=\"name\">orderIsoOp_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Congruence/Defs.html#Con\">Con</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/RelIso/Basic.html#RelIso.symm\">RelIso.symm</a> <a href=\"./Mathlib/GroupTheory/Congruence/Opposite.html#Con.orderIsoOp\">orderIsoOp</a>)</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/GroupTheory/Congruence/Opposite.html#Con.unop\">unop</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/Congruence/Opposite.html#Con.orderIsoOp_symm_apply","kind":"theorem","line":49,"name":"Con.orderIsoOp_symm_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/Congruence/Opposite.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Congruence/Opposite.html#Con.orderIsoOp_apply\"><span class=\"name\">Con</span>.<span class=\"name\">orderIsoOp_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Congruence/Defs.html#Con\">Con</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Congruence/Opposite.html#Con.orderIsoOp\">orderIsoOp</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/GroupTheory/Congruence/Opposite.html#Con.op\">op</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/Congruence/Opposite.html#Con.orderIsoOp_apply","kind":"theorem","line":49,"name":"Con.orderIsoOp_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/Congruence/Opposite.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Congruence/Opposite.html#AddCon.orderIsoOp\"><span class=\"name\">AddCon</span>.<span class=\"name\">orderIsoOp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Congruence/Defs.html#AddCon\">AddCon</a> <span class=\"fn\">M</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Congruence/Defs.html#AddCon\">AddCon</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span></div></div>","info":{"doc":"The additive congruences on `M` bijects to the additive\ncongruences on `Mᵃᵒᵖ` ","docLink":"./Mathlib/GroupTheory/Congruence/Opposite.html#AddCon.orderIsoOp","kind":"def","line":49,"name":"AddCon.orderIsoOp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/Congruence/Opposite.lean#L49-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Congruence/Opposite.html#Con.orderIsoOp\"><span class=\"name\">Con</span>.<span class=\"name\">orderIsoOp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Congruence/Defs.html#Con\">Con</a> <span class=\"fn\">M</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Congruence/Defs.html#Con\">Con</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span></div></div>","info":{"doc":"The multiplicative congruences on `M` bijects to the multiplicative congruences on `Mᵐᵒᵖ`\n","docLink":"./Mathlib/GroupTheory/Congruence/Opposite.html#Con.orderIsoOp","kind":"def","line":46,"name":"Con.orderIsoOp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/Congruence/Opposite.lean#L46-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Congruence/Opposite.html#AddCon.unop\"><span class=\"name\">AddCon</span>.<span class=\"name\">unop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Congruence/Defs.html#AddCon\">AddCon</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Congruence/Defs.html#AddCon\">AddCon</a> <span class=\"fn\">M</span></span></div></div>","info":{"doc":"If `c` is an additive congruence on `Mᵃᵒᵖ`, then `(a, b) ↦ c bᵒᵖ aᵒᵖ` is an\nadditive congruence on `M`. ","docLink":"./Mathlib/GroupTheory/Congruence/Opposite.html#AddCon.unop","kind":"def","line":36,"name":"AddCon.unop","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/Congruence/Opposite.lean#L36-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Congruence/Opposite.html#Con.unop\"><span class=\"name\">Con</span>.<span class=\"name\">unop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Congruence/Defs.html#Con\">Con</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Congruence/Defs.html#Con\">Con</a> <span class=\"fn\">M</span></span></div></div>","info":{"doc":"If `c` is a multiplicative congruence on `Mᵐᵒᵖ`, then `(a, b) ↦ c bᵒᵖ aᵒᵖ` is a multiplicative\ncongruence on `M`. ","docLink":"./Mathlib/GroupTheory/Congruence/Opposite.html#Con.unop","kind":"def","line":34,"name":"Con.unop","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/Congruence/Opposite.lean#L34-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Congruence/Opposite.html#AddCon.op\"><span class=\"name\">AddCon</span>.<span class=\"name\">op</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Congruence/Defs.html#AddCon\">AddCon</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Congruence/Defs.html#AddCon\">AddCon</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span></div></div>","info":{"doc":"If `c` is an additive congruence on `M`, then `(a, b) ↦ c b.unop a.unop` is an\nadditive congruence on `Mᵃᵒᵖ` ","docLink":"./Mathlib/GroupTheory/Congruence/Opposite.html#AddCon.op","kind":"def","line":24,"name":"AddCon.op","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/Congruence/Opposite.lean#L24-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Congruence/Opposite.html#Con.op\"><span class=\"name\">Con</span>.<span class=\"name\">op</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Congruence/Defs.html#Con\">Con</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Congruence/Defs.html#Con\">Con</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span></div></div>","info":{"doc":"If `c` is a multiplicative congruence on `M`, then `(a, b) ↦ c b.unop a.unop` is a\nmultiplicative congruence on `Mᵐᵒᵖ`. ","docLink":"./Mathlib/GroupTheory/Congruence/Opposite.html#Con.op","kind":"def","line":22,"name":"Con.op","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/Congruence/Opposite.lean#L22-L32"}}],"imports":["Init","Mathlib.Algebra.Opposites","Mathlib.GroupTheory.Congruence.Defs"],"instances":[],"name":"Mathlib.GroupTheory.Congruence.Opposite"}