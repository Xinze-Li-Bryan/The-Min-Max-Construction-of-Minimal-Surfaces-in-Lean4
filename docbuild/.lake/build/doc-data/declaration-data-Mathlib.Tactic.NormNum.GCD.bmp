{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.evalRatDen\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">evalRatDen</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/NormNum/Core.html#Mathlib.Meta.NormNum.NormNumExt\">Mathlib.Meta.NormNum.NormNumExt</a></div></div>","info":{"doc":"Evaluates the `Rat.den` function. ","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.evalRatDen","kind":"def","line":237,"name":"Tactic.NormNum.evalRatDen","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L237-L247"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.evalRatNum\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">evalRatNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/NormNum/Core.html#Mathlib.Meta.NormNum.NormNumExt\">Mathlib.Meta.NormNum.NormNumExt</a></div></div>","info":{"doc":"Evaluates the `Rat.num` function. ","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.evalRatNum","kind":"def","line":225,"name":"Tactic.NormNum.evalRatNum","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L225-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.isNat_ratDen\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">isNat_ratDen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">q</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">ℚ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n' </span><span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsRat\">Mathlib.Meta.NormNum.IsRat</a> <span class=\"fn\">q</span> <span class=\"fn\">n</span> <span class=\"fn\">d</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n'</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n'</span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">d</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsNat\">Mathlib.Meta.NormNum.IsNat</a> <span class=\"fn\"><span class=\"fn\">q</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.den\">den</a></span> <span class=\"fn\">d</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.isNat_ratDen","kind":"theorem","line":216,"name":"Tactic.NormNum.isNat_ratDen","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L216-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.isInt_ratNum\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">isInt_ratNum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">q</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">ℚ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n' </span><span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsRat\">Mathlib.Meta.NormNum.IsRat</a> <span class=\"fn\">q</span> <span class=\"fn\">n</span> <span class=\"fn\">d</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n'</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n'</span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">d</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsInt\">Mathlib.Meta.NormNum.IsInt</a> <span class=\"fn\"><span class=\"fn\">q</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.num\">num</a></span> <span class=\"fn\">n</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.isInt_ratNum","kind":"theorem","line":207,"name":"Tactic.NormNum.isInt_ratNum","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L207-L214"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.evalIntLCM\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">evalIntLCM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/NormNum/Core.html#Mathlib.Meta.NormNum.NormNumExt\">Mathlib.Meta.NormNum.NormNumExt</a></div></div>","info":{"doc":"Evaluates the `Int.lcm` function. ","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.evalIntLCM","kind":"def","line":196,"name":"Tactic.NormNum.evalIntLCM","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L196-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.proveIntLCM\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">proveIntLCM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ex </span><span class=\"fn\">ey</span> : <span class=\"fn\">Q(<a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">ed</span> : <span class=\"fn\">Q(<a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>) × <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">«$ex»</span>.<a href=\"./Init/Data/Int/Gcd.html#Int.lcm\">lcm</a></span> <span class=\"fn\">«$ey»</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">«$ed»</span>)</span></span></div></div>","info":{"doc":"Given two integers, return their LCM and an equality proof.\nPanics if `ex` or `ey` aren't integer literals. ","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.proveIntLCM","kind":"def","line":188,"name":"Tactic.NormNum.proveIntLCM","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L188-L194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.evalIntGCD\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">evalIntGCD</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/NormNum/Core.html#Mathlib.Meta.NormNum.NormNumExt\">Mathlib.Meta.NormNum.NormNumExt</a></div></div>","info":{"doc":"Evaluates the `Int.gcd` function. ","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.evalIntGCD","kind":"def","line":177,"name":"Tactic.NormNum.evalIntGCD","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L177-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.proveIntGCD\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">proveIntGCD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ex </span><span class=\"fn\">ey</span> : <span class=\"fn\">Q(<a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">ed</span> : <span class=\"fn\">Q(<a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>) × <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">«$ex»</span>.<a href=\"./Init/Data/Int/Gcd.html#Int.gcd\">gcd</a></span> <span class=\"fn\">«$ey»</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">«$ed»</span>)</span></span></div></div>","info":{"doc":"Given two integers, return their GCD and an equality proof.\nPanics if `ex` or `ey` aren't integer literals. ","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.proveIntGCD","kind":"def","line":169,"name":"Tactic.NormNum.proveIntGCD","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L169-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.evalNatLCM\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">evalNatLCM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/NormNum/Core.html#Mathlib.Meta.NormNum.NormNumExt\">Mathlib.Meta.NormNum.NormNumExt</a></div></div>","info":{"doc":"Evaluates the `Nat.lcm` function. ","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.evalNatLCM","kind":"def","line":157,"name":"Tactic.NormNum.evalNatLCM","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L157-L167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.proveNatLCM\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">proveNatLCM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ex </span><span class=\"fn\">ey</span> : <span class=\"fn\">Q(<a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">ed</span> : <span class=\"fn\">Q(<a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>) × <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">«$ex»</span>.<a href=\"./Init/Data/Nat/Lcm.html#Nat.lcm\">lcm</a></span> <span class=\"fn\">«$ey»</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">«$ed»</span>)</span></span></div></div>","info":{"doc":"Given natural number literals `ex` and `ey`, return their LCM as a natural number literal\nand an equality proof. Panics if `ex` or `ey` aren't natural number literals. ","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.proveNatLCM","kind":"def","line":140,"name":"Tactic.NormNum.proveNatLCM","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L140-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.evalNatGCD\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">evalNatGCD</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/NormNum/Core.html#Mathlib.Meta.NormNum.NormNumExt\">Mathlib.Meta.NormNum.NormNumExt</a></div></div>","info":{"doc":"Evaluate the `Nat.gcd` function. ","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.evalNatGCD","kind":"def","line":128,"name":"Tactic.NormNum.evalNatGCD","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L128-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.proveNatGCD\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">proveNatGCD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ex </span><span class=\"fn\">ey</span> : <span class=\"fn\">Q(<a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">ed</span> : <span class=\"fn\">Q(<a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>) × <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">«$ex»</span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">«$ey»</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">«$ed»</span>)</span></span></div></div>","info":{"doc":"Given natural number literals `ex` and `ey`, return their GCD as a natural number literal\nand an equality proof. Panics if `ex` or `ey` aren't natural number literals. ","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.proveNatGCD","kind":"def","line":91,"name":"Tactic.NormNum.proveNatGCD","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L91-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.isInt_lcm\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">isInt_lcm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">nx </span><span class=\"fn\">ny</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">z</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsInt\">Mathlib.Meta.NormNum.IsInt</a> <span class=\"fn\">x</span> <span class=\"fn\">nx</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsInt\">Mathlib.Meta.NormNum.IsInt</a> <span class=\"fn\">y</span> <span class=\"fn\">ny</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">nx</span>.<a href=\"./Init/Data/Int/Gcd.html#Int.lcm\">lcm</a></span> <span class=\"fn\">ny</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">z</span> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsNat\">Mathlib.Meta.NormNum.IsNat</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Int/Gcd.html#Int.lcm\">lcm</a></span> <span class=\"fn\">y</span>)</span> <span class=\"fn\">z</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.isInt_lcm","kind":"theorem","line":87,"name":"Tactic.NormNum.isInt_lcm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L87-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.isInt_gcd\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">isInt_gcd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">nx </span><span class=\"fn\">ny</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">z</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsInt\">Mathlib.Meta.NormNum.IsInt</a> <span class=\"fn\">x</span> <span class=\"fn\">nx</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsInt\">Mathlib.Meta.NormNum.IsInt</a> <span class=\"fn\">y</span> <span class=\"fn\">ny</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">nx</span>.<a href=\"./Init/Data/Int/Gcd.html#Int.gcd\">gcd</a></span> <span class=\"fn\">ny</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">z</span> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsNat\">Mathlib.Meta.NormNum.IsNat</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Int/Gcd.html#Int.gcd\">gcd</a></span> <span class=\"fn\">y</span>)</span> <span class=\"fn\">z</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.isInt_gcd","kind":"theorem","line":83,"name":"Tactic.NormNum.isInt_gcd","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L83-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.isNat_lcm\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">isNat_lcm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">nx </span><span class=\"fn\">ny </span><span class=\"fn\">z</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsNat\">Mathlib.Meta.NormNum.IsNat</a> <span class=\"fn\">x</span> <span class=\"fn\">nx</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsNat\">Mathlib.Meta.NormNum.IsNat</a> <span class=\"fn\">y</span> <span class=\"fn\">ny</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">nx</span>.<a href=\"./Init/Data/Nat/Lcm.html#Nat.lcm\">lcm</a></span> <span class=\"fn\">ny</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">z</span> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsNat\">Mathlib.Meta.NormNum.IsNat</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Nat/Lcm.html#Nat.lcm\">lcm</a></span> <span class=\"fn\">y</span>)</span> <span class=\"fn\">z</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.isNat_lcm","kind":"theorem","line":79,"name":"Tactic.NormNum.isNat_lcm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L79-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.isNat_gcd\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">isNat_gcd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">nx </span><span class=\"fn\">ny </span><span class=\"fn\">z</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsNat\">Mathlib.Meta.NormNum.IsNat</a> <span class=\"fn\">x</span> <span class=\"fn\">nx</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsNat\">Mathlib.Meta.NormNum.IsNat</a> <span class=\"fn\">y</span> <span class=\"fn\">ny</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">nx</span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">ny</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">z</span> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/NormNum/Result.html#Mathlib.Meta.NormNum.IsNat\">Mathlib.Meta.NormNum.IsNat</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">y</span>)</span> <span class=\"fn\">z</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.isNat_gcd","kind":"theorem","line":75,"name":"Tactic.NormNum.isNat_gcd","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L75-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.int_lcm_helper\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">int_lcm_helper</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x' </span><span class=\"fn\">y' </span><span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x'</span>.<a href=\"./Init/Data/Nat/Lcm.html#Nat.lcm\">lcm</a></span> <span class=\"fn\">y'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Int/Gcd.html#Int.lcm\">lcm</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.int_lcm_helper","kind":"theorem","line":69,"name":"Tactic.NormNum.int_lcm_helper","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L69-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.int_gcd_helper\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">int_gcd_helper</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x' </span><span class=\"fn\">y' </span><span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x'</span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">y'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Int/Gcd.html#Int.gcd\">gcd</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.int_gcd_helper","kind":"theorem","line":65,"name":"Tactic.NormNum.int_gcd_helper","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L65-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.nat_lcm_helper\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">nat_lcm_helper</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">d </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hd</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d0</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Init/Prelude.html#Nat.beq\">beq</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dm</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Nat/Lcm.html#Nat.lcm\">lcm</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.nat_lcm_helper","kind":"theorem","line":58,"name":"Tactic.NormNum.nat_lcm_helper","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L58-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.nat_gcd_helper_2'\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">nat_gcd_helper_2'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.nat_gcd_helper_2'","kind":"theorem","line":54,"name":"Tactic.NormNum.nat_gcd_helper_2'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L54-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.nat_gcd_helper_1'\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">nat_gcd_helper_1'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.nat_gcd_helper_1'","kind":"theorem","line":50,"name":"Tactic.NormNum.nat_gcd_helper_1'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L50-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.nat_gcd_helper_1\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">nat_gcd_helper_1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d </span><span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.nat_gcd_helper_1","kind":"theorem","line":46,"name":"Tactic.NormNum.nat_gcd_helper_1","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L46-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.nat_gcd_helper_2\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">nat_gcd_helper_2</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d </span><span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.nat_gcd_helper_2","kind":"theorem","line":37,"name":"Tactic.NormNum.nat_gcd_helper_2","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L37-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.nat_gcd_helper_dvd_right\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">nat_gcd_helper_dvd_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.nat_gcd_helper_dvd_right","kind":"theorem","line":34,"name":"Tactic.NormNum.nat_gcd_helper_dvd_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L34-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.nat_gcd_helper_dvd_left\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">nat_gcd_helper_dvd_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.nat_gcd_helper_dvd_left","kind":"theorem","line":31,"name":"Tactic.NormNum.nat_gcd_helper_dvd_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L31-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.int_gcd_helper'\"><span class=\"name\">Tactic</span>.<span class=\"name\">NormNum</span>.<span class=\"name\">int_gcd_helper'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">↑<span class=\"fn\">d</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">↑<span class=\"fn\">d</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₃</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">d</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Int/Gcd.html#Int.gcd\">gcd</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/NormNum/GCD.html#Tactic.NormNum.int_gcd_helper'","kind":"theorem","line":23,"name":"Tactic.NormNum.int_gcd_helper'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/NormNum/GCD.lean#L23-L29"}}],"imports":["Init","Mathlib.Algebra.Ring.Divisibility.Basic","Mathlib.Data.Int.GCD","Mathlib.Tactic.NormNum"],"instances":[],"name":"Mathlib.Tactic.NormNum.GCD"}