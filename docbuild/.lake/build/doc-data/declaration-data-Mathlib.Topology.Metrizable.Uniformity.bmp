{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Metrizable/Uniformity.html#EMetricSpace.metrizableSpace\"><span class=\"name\">EMetricSpace</span>.<span class=\"name\">metrizableSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#EMetricSpace\">EMetricSpace</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Metrizable/Basic.html#TopologicalSpace.MetrizableSpace\">TopologicalSpace.MetrizableSpace</a> <span class=\"fn\">Œ±</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Topology/Metrizable/Uniformity.html#EMetricSpace.metrizableSpace","kind":"instance","line":296,"name":"EMetricSpace.metrizableSpace","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Metrizable/Uniformity.lean#L296-L298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Metrizable/Uniformity.html#PseudoEMetricSpace.pseudoMetrizableSpace\"><span class=\"name\">PseudoEMetricSpace</span>.<span class=\"name\">pseudoMetrizableSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Defs.html#PseudoEMetricSpace\">PseudoEMetricSpace</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Metrizable/Basic.html#TopologicalSpace.PseudoMetrizableSpace\">TopologicalSpace.PseudoMetrizableSpace</a> <span class=\"fn\">Œ±</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Topology/Metrizable/Uniformity.html#PseudoEMetricSpace.pseudoMetrizableSpace","kind":"instance","line":292,"name":"PseudoEMetricSpace.pseudoMetrizableSpace","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Metrizable/Uniformity.lean#L292-L294"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Metrizable/Uniformity.html#DiscreteTopology.metrizableSpace\"><span class=\"name\">DiscreteTopology</span>.<span class=\"name\">metrizableSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order.html#DiscreteTopology\">DiscreteTopology</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Metrizable/Basic.html#TopologicalSpace.MetrizableSpace\">TopologicalSpace.MetrizableSpace</a> <span class=\"fn\">Œ±</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Topology/Metrizable/Uniformity.html#DiscreteTopology.metrizableSpace","kind":"instance","line":286,"name":"DiscreteTopology.metrizableSpace","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Metrizable/Uniformity.lean#L286-L290"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Metrizable/Uniformity.html#TotallyBounded.isSeparable\"><span class=\"name\">TotallyBounded</span>.<span class=\"name\">isSeparable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/Order/Filter/CountablyGenerated.html#Filter.IsCountablyGenerated\">IsCountablyGenerated</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#TotallyBounded\">TotallyBounded</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#TopologicalSpace.IsSeparable\">TopologicalSpace.IsSeparable</a> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"A totally bounded set is separable in countably generated uniform spaces. This can be obtained\nfrom the more general `EMetric.subset_countable_closure_of_almost_dense_set`. ","docLink":"./Mathlib/Topology/Metrizable/Uniformity.html#TotallyBounded.isSeparable","kind":"theorem","line":268,"name":"TotallyBounded.isSeparable","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Metrizable/Uniformity.lean#L268-L281"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Metrizable/Uniformity.html#UniformSpace.metrizableSpace\"><span class=\"name\">UniformSpace</span>.<span class=\"name\">metrizableSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/Order/Filter/CountablyGenerated.html#Filter.IsCountablyGenerated\">IsCountablyGenerated</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#T0Space\">T0Space</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Metrizable/Basic.html#TopologicalSpace.MetrizableSpace\">TopologicalSpace.MetrizableSpace</a> <span class=\"fn\">X</span></span></div></div>","info":{"doc":"A T‚ÇÄ uniform space with countably generated `ùì§ X` is metrizable. This is not an instance to\navoid loops. ","docLink":"./Mathlib/Topology/Metrizable/Uniformity.html#UniformSpace.metrizableSpace","kind":"theorem","line":261,"name":"UniformSpace.metrizableSpace","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Metrizable/Uniformity.lean#L261-L266"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Metrizable/Uniformity.html#UniformSpace.pseudoMetrizableSpace\"><span class=\"name\">UniformSpace</span>.<span class=\"name\">pseudoMetrizableSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/Order/Filter/CountablyGenerated.html#Filter.IsCountablyGenerated\">IsCountablyGenerated</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Metrizable/Basic.html#TopologicalSpace.PseudoMetrizableSpace\">TopologicalSpace.PseudoMetrizableSpace</a> <span class=\"fn\">X</span></span></div></div>","info":{"doc":"A uniform space with countably generated `ùì§ X` is pseudo metrizable. ","docLink":"./Mathlib/Topology/Metrizable/Uniformity.html#UniformSpace.pseudoMetrizableSpace","kind":"instance","line":255,"name":"UniformSpace.pseudoMetrizableSpace","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Metrizable/Uniformity.lean#L255-L259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Metrizable/Uniformity.html#UniformSpace.metricSpace\"><span class=\"name\">UniformSpace</span>.<span class=\"name\">metricSpace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/Order/Filter/CountablyGenerated.html#Filter.IsCountablyGenerated\">IsCountablyGenerated</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Basic.html#T0Space\">T0Space</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Defs.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">X</span></span></div></div>","info":{"doc":"A `MetricSpace` instance compatible with a given `UniformSpace` structure. ","docLink":"./Mathlib/Topology/Metrizable/Uniformity.html#UniformSpace.metricSpace","kind":"def","line":250,"name":"UniformSpace.metricSpace","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Metrizable/Uniformity.lean#L250-L253"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Metrizable/Uniformity.html#UniformSpace.pseudoMetricSpace\"><span class=\"name\">UniformSpace</span>.<span class=\"name\">pseudoMetricSpace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/Order/Filter/CountablyGenerated.html#Filter.IsCountablyGenerated\">IsCountablyGenerated</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">X</span></span></div></div>","info":{"doc":"A `PseudoMetricSpace` instance compatible with a given `UniformSpace` structure. ","docLink":"./Mathlib/Topology/Metrizable/Uniformity.html#UniformSpace.pseudoMetricSpace","kind":"def","line":244,"name":"UniformSpace.pseudoMetricSpace","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Metrizable/Uniformity.lean#L244-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Metrizable/Uniformity.html#UniformSpace.metrizable_uniformity\"><span class=\"name\">UniformSpace</span>.<span class=\"name\">metrizable_uniformity</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Defs.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/UniformSpace/Defs.html#uniformity\">uniformity</a> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/Order/Filter/CountablyGenerated.html#Filter.IsCountablyGenerated\">IsCountablyGenerated</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÉ (<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">X</span></span>), <a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace.toUniformSpace\">PseudoMetricSpace.toUniformSpace</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">inst‚úù</span></span></div></div>","info":{"doc":"If `X` is a uniform space with countably generated uniformity filter, there exists a\n`PseudoMetricSpace` structure compatible with the `UniformSpace` structure. Use\n`UniformSpace.pseudoMetricSpace` or `UniformSpace.metricSpace` instead. ","docLink":"./Mathlib/Topology/Metrizable/Uniformity.html#UniformSpace.metrizable_uniformity","kind":"theorem","line":175,"name":"UniformSpace.metrizable_uniformity","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Metrizable/Uniformity.lean#L175-L242"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Metrizable/Uniformity.html#PseudoMetricSpace.le_two_mul_dist_ofPreNNDist\"><span class=\"name\">PseudoMetricSpace</span>.<span class=\"name\">le_two_mul_dist_ofPreNNDist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">X</span> ‚Üí <span class=\"fn\">X</span> ‚Üí <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dist_self</span> : <span class=\"fn\">‚àÄ (<span class=\"fn\">x</span> : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dist_comm</span> : <span class=\"fn\">‚àÄ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hd</span> : <span class=\"fn\">‚àÄ (<span class=\"fn\">x‚ÇÅ </span><span class=\"fn\">x‚ÇÇ </span><span class=\"fn\">x‚ÇÉ </span><span class=\"fn\">x‚ÇÑ</span> : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x‚ÇÅ</span> <span class=\"fn\">x‚ÇÑ</span></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">(<span class=\"fn\">d</span> <span class=\"fn\">x‚ÇÅ</span> <span class=\"fn\">x‚ÇÇ</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">(<span class=\"fn\">d</span> <span class=\"fn\">x‚ÇÇ</span> <span class=\"fn\">x‚ÇÉ</span>)</span> <span class=\"fn\">(<span class=\"fn\">d</span> <span class=\"fn\">x‚ÇÉ</span> <span class=\"fn\">x‚ÇÑ</span>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚Üë<span class=\"fn\">(<span class=\"fn\">d</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"Consider a function `d : X ‚Üí X ‚Üí ‚Ñù‚â•0` such that `d x x = 0` and `d x y = d y x` for all `x`,\n`y`. Let `dist` be the largest pseudometric distance such that `dist x y ‚â§ d x y`, see\n`PseudoMetricSpace.ofPreNNDist`. Suppose that `d` satisfies the following triangle-like\ninequality: `d x‚ÇÅ x‚ÇÑ ‚â§ 2 * max (d x‚ÇÅ x‚ÇÇ, d x‚ÇÇ x‚ÇÉ, d x‚ÇÉ x‚ÇÑ)`. Then `d x y ‚â§ 2 * dist x y` for all\n`x`, `y`. ","docLink":"./Mathlib/Topology/Metrizable/Uniformity.html#PseudoMetricSpace.le_two_mul_dist_ofPreNNDist","kind":"theorem","line":95,"name":"PseudoMetricSpace.le_two_mul_dist_ofPreNNDist","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Metrizable/Uniformity.lean#L95-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Metrizable/Uniformity.html#PseudoMetricSpace.dist_ofPreNNDist_le\"><span class=\"name\">PseudoMetricSpace</span>.<span class=\"name\">dist_ofPreNNDist_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">X</span> ‚Üí <span class=\"fn\">X</span> ‚Üí <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dist_self</span> : <span class=\"fn\">‚àÄ (<span class=\"fn\">x</span> : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dist_comm</span> : <span class=\"fn\">‚àÄ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">‚Üë<span class=\"fn\">(<span class=\"fn\">d</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Topology/Metrizable/Uniformity.html#PseudoMetricSpace.dist_ofPreNNDist_le","kind":"theorem","line":88,"name":"PseudoMetricSpace.dist_ofPreNNDist_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Metrizable/Uniformity.lean#L88-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Metrizable/Uniformity.html#PseudoMetricSpace.dist_ofPreNNDist\"><span class=\"name\">PseudoMetricSpace</span>.<span class=\"name\">dist_ofPreNNDist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">X</span> ‚Üí <span class=\"fn\">X</span> ‚Üí <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dist_self</span> : <span class=\"fn\">‚àÄ (<span class=\"fn\">x</span> : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dist_comm</span> : <span class=\"fn\">‚àÄ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚Üë<span class=\"fn\">(‚®Ö (<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">X</span></span>), <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.zipWith\">List.zipWith</a> <span class=\"fn\">d</span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>) (<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">y</span><a href=\"./Init/Prelude.html#List.cons\">]</a>))</span>.<a href=\"./Init/Data/List/Basic.html#List.sum\">sum</a></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Topology/Metrizable/Uniformity.html#PseudoMetricSpace.dist_ofPreNNDist","kind":"theorem","line":81,"name":"PseudoMetricSpace.dist_ofPreNNDist","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Metrizable/Uniformity.lean#L81-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Metrizable/Uniformity.html#PseudoMetricSpace.ofPreNNDist\"><span class=\"name\">PseudoMetricSpace</span>.<span class=\"name\">ofPreNNDist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\">X</span> ‚Üí <span class=\"fn\">X</span> ‚Üí <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dist_self</span> : <span class=\"fn\">‚àÄ (<span class=\"fn\">x</span> : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dist_comm</span> : <span class=\"fn\">‚àÄ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Pseudo/Defs.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">X</span></span></div></div>","info":{"doc":"The maximal pseudo metric space structure on `X` such that `dist x y ‚â§ d x y` for all `x y`,\nwhere `d : X ‚Üí X ‚Üí ‚Ñù‚â•0` is a function such that `d x x = 0` and `d x y = d y x` for all `x`, `y`. ","docLink":"./Mathlib/Topology/Metrizable/Uniformity.html#PseudoMetricSpace.ofPreNNDist","kind":"def","line":55,"name":"PseudoMetricSpace.ofPreNNDist","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Metrizable/Uniformity.lean#L55-L79"}}],"imports":["Init","Mathlib.Data.Nat.Lattice","Mathlib.Data.NNReal.Basic","Mathlib.Topology.Metrizable.Basic"],"instances":[{"className":"TopologicalSpace.PseudoMetrizableSpace","name":"UniformSpace.pseudoMetrizableSpace","typeNames":[]},{"className":"TopologicalSpace.MetrizableSpace","name":"DiscreteTopology.metrizableSpace","typeNames":[]},{"className":"TopologicalSpace.PseudoMetrizableSpace","name":"PseudoEMetricSpace.pseudoMetrizableSpace","typeNames":[]},{"className":"TopologicalSpace.MetrizableSpace","name":"EMetricSpace.metrizableSpace","typeNames":[]}],"name":"Mathlib.Topology.Metrizable.Uniformity"}