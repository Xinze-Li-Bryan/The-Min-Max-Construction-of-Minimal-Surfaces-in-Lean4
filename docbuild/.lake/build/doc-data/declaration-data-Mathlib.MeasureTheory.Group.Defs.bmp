{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddRightInvariant.toVAddInvariantMeasure_op\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">IsAddRightInvariant</span>.<span class=\"name\">toVAddInvariantMeasure_op</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddRightInvariant\">IsAddRightInvariant</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.VAddInvariantMeasure\">VAddInvariantMeasure</a> <span class=\"fn\">G</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a> <span class=\"fn\">G</span> <span class=\"fn\">μ</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddRightInvariant.toVAddInvariantMeasure_op","kind":"instance","line":99,"name":"MeasureTheory.Measure.IsAddRightInvariant.toVAddInvariantMeasure_op","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L99-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulRightInvariant.toSMulInvariantMeasure_op\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">IsMulRightInvariant</span>.<span class=\"name\">toSMulInvariantMeasure_op</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulRightInvariant\">IsMulRightInvariant</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.SMulInvariantMeasure\">SMulInvariantMeasure</a> <span class=\"fn\">G</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a> <span class=\"fn\">G</span> <span class=\"fn\">μ</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulRightInvariant.toSMulInvariantMeasure_op","kind":"instance","line":99,"name":"MeasureTheory.Measure.IsMulRightInvariant.toSMulInvariantMeasure_op","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L99-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.instVAddInvariantMeasureSubtypeMemAddSubmonoidOfIsAddLeftInvariant\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">instVAddInvariantMeasureSubtypeMemAddSubmonoidOfIsAddLeftInvariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Submonoid/Defs.html#AddSubmonoid\">AddSubmonoid</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddLeftInvariant\">IsAddLeftInvariant</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.VAddInvariantMeasure\">VAddInvariantMeasure</a> <span class=\"fn\">(↥<span class=\"fn\">s</span>)</span> <span class=\"fn\">G</span> <span class=\"fn\">μ</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.instVAddInvariantMeasureSubtypeMemAddSubmonoidOfIsAddLeftInvariant","kind":"instance","line":94,"name":"MeasureTheory.Measure.instVAddInvariantMeasureSubtypeMemAddSubmonoidOfIsAddLeftInvariant","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L94-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.instSMulInvariantMeasureSubtypeMemSubmonoidOfIsMulLeftInvariant\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">instSMulInvariantMeasureSubtypeMemSubmonoidOfIsMulLeftInvariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Submonoid/Defs.html#Submonoid\">Submonoid</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulLeftInvariant\">IsMulLeftInvariant</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.SMulInvariantMeasure\">SMulInvariantMeasure</a> <span class=\"fn\">(↥<span class=\"fn\">s</span>)</span> <span class=\"fn\">G</span> <span class=\"fn\">μ</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.instSMulInvariantMeasureSubtypeMemSubmonoidOfIsMulLeftInvariant","kind":"instance","line":94,"name":"MeasureTheory.Measure.instSMulInvariantMeasureSubtypeMemSubmonoidOfIsMulLeftInvariant","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L94-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddLeftInvariant.vaddInvariantMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">IsAddLeftInvariant</span>.<span class=\"name\">vaddInvariantMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddLeftInvariant\">IsAddLeftInvariant</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.VAddInvariantMeasure\">VAddInvariantMeasure</a> <span class=\"fn\">G</span> <span class=\"fn\">G</span> <span class=\"fn\">μ</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddLeftInvariant.vaddInvariantMeasure","kind":"instance","line":89,"name":"MeasureTheory.Measure.IsAddLeftInvariant.vaddInvariantMeasure","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L89-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulLeftInvariant.smulInvariantMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">IsMulLeftInvariant</span>.<span class=\"name\">smulInvariantMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulLeftInvariant\">IsMulLeftInvariant</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.SMulInvariantMeasure\">SMulInvariantMeasure</a> <span class=\"fn\">G</span> <span class=\"fn\">G</span> <span class=\"fn\">μ</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulLeftInvariant.smulInvariantMeasure","kind":"instance","line":89,"name":"MeasureTheory.Measure.IsMulLeftInvariant.smulInvariantMeasure","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L89-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulRightInvariant.map_mul_right_eq_self\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">IsMulRightInvariant</span>.<span class=\"name\">map_mul_right_eq_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulRightInvariant\">IsMulRightInvariant</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Map.html#MeasureTheory.Measure.map\">map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">μ</span></div></div>","info":{"doc":"","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulRightInvariant.map_mul_right_eq_self","kind":"theorem","line":85,"name":"MeasureTheory.Measure.IsMulRightInvariant.map_mul_right_eq_self","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L85-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulRightInvariant.mk\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">IsMulRightInvariant</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">map_mul_right_eq_self</span> : <span class=\"fn\">∀ (<span class=\"fn\">g</span> : <span class=\"fn\">G</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Map.html#MeasureTheory.Measure.map\">map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulRightInvariant\">IsMulRightInvariant</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulRightInvariant.mk","kind":"ctor","line":84,"name":"MeasureTheory.Measure.IsMulRightInvariant.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L84-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulRightInvariant\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">IsMulRightInvariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"A measure `μ` on a measurable group is right invariant\nif the measure of right translations of a set are equal to the measure of the set itself. ","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulRightInvariant","kind":"class","line":81,"name":"MeasureTheory.Measure.IsMulRightInvariant","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L81-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddRightInvariant.map_add_right_eq_self\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">IsAddRightInvariant</span>.<span class=\"name\">map_add_right_eq_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddRightInvariant\">IsAddRightInvariant</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Map.html#MeasureTheory.Measure.map\">map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">μ</span></div></div>","info":{"doc":"","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddRightInvariant.map_add_right_eq_self","kind":"theorem","line":79,"name":"MeasureTheory.Measure.IsAddRightInvariant.map_add_right_eq_self","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L79-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddRightInvariant.mk\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">IsAddRightInvariant</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">map_add_right_eq_self</span> : <span class=\"fn\">∀ (<span class=\"fn\">g</span> : <span class=\"fn\">G</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Map.html#MeasureTheory.Measure.map\">map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddRightInvariant\">IsAddRightInvariant</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddRightInvariant.mk","kind":"ctor","line":78,"name":"MeasureTheory.Measure.IsAddRightInvariant.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L78-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddRightInvariant\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">IsAddRightInvariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"A measure `μ` on a measurable additive group is right invariant\nif the measure of right translations of a set are equal to the measure of the set itself. ","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddRightInvariant","kind":"class","line":76,"name":"MeasureTheory.Measure.IsAddRightInvariant","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L76-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulLeftInvariant.map_mul_left_eq_self\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">IsMulLeftInvariant</span>.<span class=\"name\">map_mul_left_eq_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulLeftInvariant\">IsMulLeftInvariant</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Map.html#MeasureTheory.Measure.map\">map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">μ</span></div></div>","info":{"doc":"","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulLeftInvariant.map_mul_left_eq_self","kind":"theorem","line":74,"name":"MeasureTheory.Measure.IsMulLeftInvariant.map_mul_left_eq_self","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L74-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulLeftInvariant.mk\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">IsMulLeftInvariant</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">map_mul_left_eq_self</span> : <span class=\"fn\">∀ (<span class=\"fn\">g</span> : <span class=\"fn\">G</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Map.html#MeasureTheory.Measure.map\">map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulLeftInvariant\">IsMulLeftInvariant</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulLeftInvariant.mk","kind":"ctor","line":73,"name":"MeasureTheory.Measure.IsMulLeftInvariant.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L73-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulLeftInvariant\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">IsMulLeftInvariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"A measure `μ` on a measurable group is left invariant\nif the measure of left translations of a set are equal to the measure of the set itself. ","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsMulLeftInvariant","kind":"class","line":70,"name":"MeasureTheory.Measure.IsMulLeftInvariant","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L70-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddLeftInvariant.map_add_left_eq_self\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">IsAddLeftInvariant</span>.<span class=\"name\">map_add_left_eq_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddLeftInvariant\">IsAddLeftInvariant</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Map.html#MeasureTheory.Measure.map\">map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">μ</span></div></div>","info":{"doc":"","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddLeftInvariant.map_add_left_eq_self","kind":"theorem","line":68,"name":"MeasureTheory.Measure.IsAddLeftInvariant.map_add_left_eq_self","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L68-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddLeftInvariant.mk\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">IsAddLeftInvariant</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">map_add_left_eq_self</span> : <span class=\"fn\">∀ (<span class=\"fn\">g</span> : <span class=\"fn\">G</span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Map.html#MeasureTheory.Measure.map\">map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddLeftInvariant\">IsAddLeftInvariant</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddLeftInvariant.mk","kind":"ctor","line":67,"name":"MeasureTheory.Measure.IsAddLeftInvariant.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L67-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddLeftInvariant\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">IsAddLeftInvariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"A measure `μ` on a measurable additive group is left invariant\nif the measure of left translations of a set are equal to the measure of the set itself. ","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.Measure.IsAddLeftInvariant","kind":"class","line":65,"name":"MeasureTheory.Measure.IsAddLeftInvariant","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L65-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.vaddInvariantMeasure_iff\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">vaddInvariantMeasure_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#VAdd\">VAdd</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.VAddInvariantMeasure\">VAddInvariantMeasure</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <span class=\"fn\">M</span>) ⦃<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>⦄, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">μ</span> (<span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">x</span>)</span> <a href=\"./Mathlib/Data/Set/Operations.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">μ</span> <span class=\"fn\">s</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.vaddInvariantMeasure_iff","kind":"theorem","line":59,"name":"MeasureTheory.vaddInvariantMeasure_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L59-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.SMulInvariantMeasure.measure_preimage_smul\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SMulInvariantMeasure</span>.<span class=\"name\">measure_preimage_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#SMul\">SMul</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.SMulInvariantMeasure\">SMulInvariantMeasure</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span> <span class=\"fn\">μ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>⦄</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">μ</span> (<span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">x</span>)</span> <a href=\"./Mathlib/Data/Set/Operations.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">μ</span> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.SMulInvariantMeasure.measure_preimage_smul","kind":"theorem","line":57,"name":"MeasureTheory.SMulInvariantMeasure.measure_preimage_smul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L57-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.SMulInvariantMeasure.mk\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SMulInvariantMeasure</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#SMul\">SMul</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">measure_preimage_smul</span> : <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <span class=\"fn\">M</span>) ⦃<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>⦄, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">μ</span> (<span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">x</span>)</span> <a href=\"./Mathlib/Data/Set/Operations.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">μ</span> <span class=\"fn\">s</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.SMulInvariantMeasure\">SMulInvariantMeasure</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span> <span class=\"fn\">μ</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.SMulInvariantMeasure.mk","kind":"ctor","line":55,"name":"MeasureTheory.SMulInvariantMeasure.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L55-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.smulInvariantMeasure_iff\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">smulInvariantMeasure_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#SMul\">SMul</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.SMulInvariantMeasure\">SMulInvariantMeasure</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <span class=\"fn\">M</span>) ⦃<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>⦄, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">μ</span> (<span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">x</span>)</span> <a href=\"./Mathlib/Data/Set/Operations.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">μ</span> <span class=\"fn\">s</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.smulInvariantMeasure_iff","kind":"theorem","line":54,"name":"MeasureTheory.smulInvariantMeasure_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L54-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.SMulInvariantMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">SMulInvariantMeasure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#SMul\">SMul</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"A measure `μ : Measure α` is invariant under a multiplicative action of `M` on `α` if for any\nmeasurable set `s : Set α` and `c : M`, the measure of its preimage under `fun x => c • x` is equal\nto the measure of `s`. ","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.SMulInvariantMeasure","kind":"class","line":51,"name":"MeasureTheory.SMulInvariantMeasure","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L51-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.VAddInvariantMeasure.measure_preimage_vadd\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">VAddInvariantMeasure</span>.<span class=\"name\">measure_preimage_vadd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#VAdd\">VAdd</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.VAddInvariantMeasure\">VAddInvariantMeasure</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span> <span class=\"fn\">μ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>⦄</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">μ</span> (<span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">x</span>)</span> <a href=\"./Mathlib/Data/Set/Operations.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">μ</span> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.VAddInvariantMeasure.measure_preimage_vadd","kind":"theorem","line":49,"name":"MeasureTheory.VAddInvariantMeasure.measure_preimage_vadd","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.VAddInvariantMeasure.mk\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">VAddInvariantMeasure</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#VAdd\">VAdd</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">measure_preimage_vadd</span> : <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <span class=\"fn\">M</span>) ⦃<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>⦄, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">μ</span> (<span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">x</span>)</span> <a href=\"./Mathlib/Data/Set/Operations.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">μ</span> <span class=\"fn\">s</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.VAddInvariantMeasure\">VAddInvariantMeasure</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span> <span class=\"fn\">μ</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.VAddInvariantMeasure.mk","kind":"ctor","line":47,"name":"MeasureTheory.VAddInvariantMeasure.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L47-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.VAddInvariantMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">VAddInvariantMeasure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#VAdd\">VAdd</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"A measure `μ : Measure α` is invariant under an additive action of `M` on `α` if for any\nmeasurable set `s : Set α` and `c : M`, the measure of its preimage under `fun x => c +ᵥ x` is equal\nto the measure of `s`. ","docLink":"./Mathlib/MeasureTheory/Group/Defs.html#MeasureTheory.VAddInvariantMeasure","kind":"class","line":44,"name":"MeasureTheory.VAddInvariantMeasure","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/MeasureTheory/Group/Defs.lean#L44-L49"}}],"imports":["Init","Mathlib.MeasureTheory.Measure.Map"],"instances":[{"className":"MeasureTheory.SMulInvariantMeasure","name":"MeasureTheory.Measure.IsMulLeftInvariant.smulInvariantMeasure","typeNames":[]},{"className":"MeasureTheory.VAddInvariantMeasure","name":"MeasureTheory.Measure.IsAddLeftInvariant.vaddInvariantMeasure","typeNames":[]},{"className":"MeasureTheory.SMulInvariantMeasure","name":"MeasureTheory.Measure.instSMulInvariantMeasureSubtypeMemSubmonoidOfIsMulLeftInvariant","typeNames":["Subtype"]},{"className":"MeasureTheory.VAddInvariantMeasure","name":"MeasureTheory.Measure.instVAddInvariantMeasureSubtypeMemAddSubmonoidOfIsAddLeftInvariant","typeNames":["Subtype"]},{"className":"MeasureTheory.SMulInvariantMeasure","name":"MeasureTheory.Measure.IsMulRightInvariant.toSMulInvariantMeasure_op","typeNames":["MulOpposite"]},{"className":"MeasureTheory.VAddInvariantMeasure","name":"MeasureTheory.Measure.IsAddRightInvariant.toVAddInvariantMeasure_op","typeNames":["AddOpposite"]}],"name":"Mathlib.MeasureTheory.Group.Defs"}