{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Defs.html#String.head\"><span class=\"name\">String</span>.<span class=\"name\">head</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"Produce the head character from the string `s`, if `s` is not empty, otherwise `'A'`. ","docLink":"./Mathlib/Data/String/Defs.html#String.head","kind":"def","line":46,"name":"String.head","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/String/Defs.lean#L46-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Defs.html#String.mapTokens\"><span class=\"name\">String</span>.<span class=\"name\">mapTokens</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"`String.mapTokens c f s` tokenizes `s : string` on `c : char`, maps `f` over each token, and\nthen reassembles the string by intercalating the separator token `c` over the mapped tokens. ","docLink":"./Mathlib/Data/String/Defs.html#String.mapTokens","kind":"def","line":41,"name":"String.mapTokens","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/String/Defs.lean#L41-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Defs.html#String.IsSuffix\"><span class=\"name\">String</span>.<span class=\"name\">IsSuffix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"`s.IsSuffix t` checks if the string `s` is a suffix of the string `t`. ","docLink":"./Mathlib/Data/String/Defs.html#String.IsSuffix","kind":"def","line":37,"name":"String.IsSuffix","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/String/Defs.lean#L37-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Defs.html#String.IsPrefix\"><span class=\"name\">String</span>.<span class=\"name\">IsPrefix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"`s.IsPrefix t` checks if the string `s` is a prefix of the string `t`. ","docLink":"./Mathlib/Data/String/Defs.html#String.IsPrefix","kind":"def","line":33,"name":"String.IsPrefix","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/String/Defs.lean#L33-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Defs.html#String.rightpad\"><span class=\"name\">String</span>.<span class=\"name\">rightpad</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a> := <span class=\"fn\">' '</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Pad `s : String` with repeated occurrences of `c : Char` on the right until it's of length `n`.\nIf `s` is initially larger than `n`, just return `s`. ","docLink":"./Mathlib/Data/String/Defs.html#String.rightpad","kind":"def","line":28,"name":"String.rightpad","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/String/Defs.lean#L28-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Defs.html#String.replicate\"><span class=\"name\">String</span>.<span class=\"name\">replicate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Construct the string consisting of `n` copies of the character `c`. ","docLink":"./Mathlib/Data/String/Defs.html#String.replicate","kind":"def","line":21,"name":"String.replicate","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/String/Defs.lean#L21-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Defs.html#String.leftpad\"><span class=\"name\">String</span>.<span class=\"name\">leftpad</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a> := <span class=\"fn\">' '</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Pad `s : String` with repeated occurrences of `c : Char` until it's of length `n`.\nIf `s` is initially larger than `n`, just return `s`. ","docLink":"./Mathlib/Data/String/Defs.html#String.leftpad","kind":"def","line":16,"name":"String.leftpad","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/String/Defs.lean#L16-L19"}}],"imports":["Init","Mathlib.Init"],"instances":[],"name":"Mathlib.Data.String.Defs"}