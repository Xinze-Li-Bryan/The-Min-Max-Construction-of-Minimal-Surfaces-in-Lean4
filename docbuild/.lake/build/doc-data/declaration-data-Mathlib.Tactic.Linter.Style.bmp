{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.show.showLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">show</span>.<span class=\"name\">showLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>","info":{"doc":"The \"show\" linter emits a warning if the `show` tactic changed the goal. `show` should only be used\nto indicate intermediate goal states for proof readability. When the goal is actually changed,\n`change` should be preferred.\n","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.show.showLinter","kind":"def","line":548,"name":"Mathlib.Linter.Style.show.showLinter","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L548-L571"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.show\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">show</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The \"show\" linter emits a warning if the `show` tactic changed the goal. `show` should only be used\nto indicate intermediate goal states for proof readability. When the goal is actually changed,\n`change` should be preferred.\n","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.show","kind":"opaque","line":536,"name":"Mathlib.Linter.linter.style.show","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L536-L544"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.openClassical.openClassicalLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">openClassical</span>.<span class=\"name\">openClassicalLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>","info":{"doc":"The \"openClassical\" linter emits a warning on `open Classical` statements which are not\nscoped to a single declaration. A non-scoped `open Classical` can hide that some theorem statements\nwould be better stated with explicit decidability statements.\n","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.openClassical.openClassicalLinter","kind":"def","line":515,"name":"Mathlib.Linter.Style.openClassical.openClassicalLinter","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L515-L528"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.openClassical.extractOpenNames\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">openClassical</span>.<span class=\"name\">extractOpenNames</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`ident</span>)</span></span></div></div>","info":{"doc":"If `stx` is syntax describing an `open` command, `extractOpenNames stx`\nreturns an array of the syntax corresponding to the opened names,\nomitting any renamed or hidden items.\n\nThis only checks independent `open` commands: for `open ... in ...` commands,\nthis linter returns an empty array.\n","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.openClassical.extractOpenNames","kind":"def","line":497,"name":"Mathlib.Linter.Style.openClassical.extractOpenNames","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L497-L513"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.openClassical\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">openClassical</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The \"openClassical\" linter emits a warning on `open Classical` statements which are not\nscoped to a single declaration. A non-scoped `open Classical` can hide that some theorem statements\nwould be better stated with explicit decidability statements.\n","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.openClassical","kind":"opaque","line":486,"name":"Mathlib.Linter.linter.style.openClassical","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L486-L493"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.nameCheck.doubleUnderscore\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">nameCheck</span>.<span class=\"name\">doubleUnderscore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>","info":{"doc":"The `nameCheck` linter emits a warning on declarations whose name is non-standard style.\n(Currently, this only includes declarations whose name includes a double underscore.)\n\n**Why is this bad?** Double underscores in theorem names can be considered non-standard style and\nprobably have been introduced by accident.\n**How to fix this?** Use single underscores to separate parts of a name, following standard naming\nconventions.\n","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.nameCheck.doubleUnderscore","kind":"def","line":460,"name":"Mathlib.Linter.Style.nameCheck.doubleUnderscore","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L460-L478"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.nameCheck\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">nameCheck</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The `nameCheck` linter emits a warning on declarations whose name is non-standard style.\n(Currently, this only includes declarations whose name includes a double underscore.)\n\n**Why is this bad?** Double underscores in theorem names can be considered non-standard style and\nprobably have been introduced by accident.\n**How to fix this?** Use single underscores to separate parts of a name, following standard naming\nconventions.\n","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.nameCheck","kind":"opaque","line":445,"name":"Mathlib.Linter.linter.style.nameCheck","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L445-L456"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.longLine.longLineLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">longLine</span>.<span class=\"name\">longLineLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>","info":{"doc":"The \"longLine\" linter emits a warning on lines longer than 100 characters.\nWe allow lines containing URLs to be longer, though. ","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.longLine.longLineLinter","kind":"def","line":409,"name":"Mathlib.Linter.Style.longLine.longLineLinter","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L409-L440"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.longLine\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">longLine</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The \"longLine\" linter emits a warning on lines longer than 100 characters.\nWe allow lines containing URLs to be longer, though. ","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.longLine","kind":"opaque","line":400,"name":"Mathlib.Linter.linter.style.longLine","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L400-L405"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.longFile.longFileLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">longFile</span>.<span class=\"name\">longFileLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>","info":{"doc":"The \"longFile\" linter emits a warning on files which are longer than a certain number of lines\n(`linter.style.longFileDefValue` by default on mathlib, no limit for downstream projects).\nIf this option is set to `N` lines, the linter warns once a file has more than `N` lines.\nA value of `0` silences the linter entirely.\n","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.longFile.longFileLinter","kind":"def","line":338,"name":"Mathlib.Linter.Style.longFile.longFileLinter","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L338-L392"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.longFileDefValue\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">longFileDefValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"The number of lines that the `longFile` linter considers the default. ","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.longFileDefValue","kind":"opaque","line":330,"name":"Mathlib.Linter.linter.style.longFileDefValue","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L330-L334"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.longFile\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">longFile</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"The \"longFile\" linter emits a warning on files which are longer than a certain number of lines\n(`linter.style.longFileDefValue` by default on mathlib, no limit for downstream projects).\nIf this option is set to `N` lines, the linter warns once a file has more than `N` lines.\nA value of `0` silences the linter entirely.\n","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.longFile","kind":"opaque","line":319,"name":"Mathlib.Linter.linter.style.longFile","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L319-L328"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.lambdaSyntax.lambdaSyntaxLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">lambdaSyntax</span>.<span class=\"name\">lambdaSyntaxLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>","info":{"doc":"The `lambdaSyntax` linter flags uses of the symbol `Î»` to define anonymous functions.\nThis is syntactically equivalent to the `fun` keyword; mathlib style prefers using the latter.\n","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.lambdaSyntax.lambdaSyntaxLinter","kind":"def","line":296,"name":"Mathlib.Linter.Style.lambdaSyntax.lambdaSyntaxLinter","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L296-L306"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.lambdaSyntax.findLambdaSyntax\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">lambdaSyntax</span>.<span class=\"name\">findLambdaSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>","info":{"doc":"`findLambdaSyntax stx` extracts from `stx` all syntax nodes of `kind` `Term.fun`. ","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.lambdaSyntax.findLambdaSyntax","kind":"opaque","line":285,"name":"Mathlib.Linter.Style.lambdaSyntax.findLambdaSyntax","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L285-L294"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.lambdaSyntax\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">lambdaSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The `lambdaSyntax` linter flags uses of the symbol `Î»` to define anonymous functions.\nThis is syntactically equivalent to the `fun` keyword; mathlib style prefers using the latter.\n","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.lambdaSyntax","kind":"opaque","line":274,"name":"Mathlib.Linter.linter.style.lambdaSyntax","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L274-L281"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.dollarSyntax.dollarSyntaxLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">dollarSyntax</span>.<span class=\"name\">dollarSyntaxLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>","info":{"doc":"The `dollarSyntax` linter flags uses of `<|` that are achieved by typing `$`.\nThese are disallowed by the mathlib style guide, as using `<|` pairs better with `|>`. ","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.dollarSyntax.dollarSyntaxLinter","kind":"def","line":252,"name":"Mathlib.Linter.Style.dollarSyntax.dollarSyntaxLinter","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L252-L260"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.dollarSyntax.findDollarSyntax\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">dollarSyntax</span>.<span class=\"name\">findDollarSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>","info":{"doc":"`findDollarSyntax stx` extracts from `stx` the syntax nodes of `kind` `$`. ","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.dollarSyntax.findDollarSyntax","kind":"opaque","line":242,"name":"Mathlib.Linter.Style.dollarSyntax.findDollarSyntax","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L242-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.dollarSyntax\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">dollarSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The `dollarSyntax` linter flags uses of `<|` that are achieved by typing `$`.\nThese are disallowed by the mathlib style guide, as using `<|` pairs better with `|>`. ","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.dollarSyntax","kind":"opaque","line":233,"name":"Mathlib.Linter.linter.style.dollarSyntax","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L233-L238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.cdotLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">cdotLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>","info":{"doc":"The `cdot` linter flags uses of the \"cdot\" `Â·` that are achieved by typing a character\ndifferent from `Â·`.\nFor instance, a \"plain\" dot `.` is allowed syntax, but is flagged by the linter.\nIt also flags \"isolated cdots\", i.e. when the `Â·` is on its own line. ","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.cdotLinter","kind":"def","line":204,"name":"Mathlib.Linter.Style.cdotLinter","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L204-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.unwanted_cdot\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">unwanted_cdot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>","info":{"doc":"`unwanted_cdot stx` returns an array of syntax atoms within `stx`\ncorresponding to `cdot`s that are not written with the character `Â·`.\nThis is precisely what the `cdot` linter flags.\n","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.unwanted_cdot","kind":"def","line":195,"name":"Mathlib.Linter.unwanted_cdot","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L195-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.findCDot\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">findCDot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>","info":{"doc":"`findCDot stx` extracts from `stx` the syntax nodes of `kind` `Lean.Parser.Term.cdot` or `cdotTk`.\n","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.findCDot","kind":"opaque","line":183,"name":"Mathlib.Linter.findCDot","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L183-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.isCDot?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">isCDot?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"`isCDot? stx` checks whether `stx` is a `Syntax` node corresponding to a `cdot` typed with\nthe character `Â·`. ","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.isCDot?","kind":"def","line":176,"name":"Mathlib.Linter.isCDot?","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L176-L181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.cdot\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">cdot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The `cdot` linter flags uses of the \"cdot\" `Â·` that are achieved by typing a character\ndifferent from `Â·`.\nFor instance, a \"plain\" dot `.` is allowed syntax, but is flagged by the linter.\nIt also flags \"isolated cdots\", i.e. when the `Â·` is on its own line. ","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.cdot","kind":"opaque","line":166,"name":"Mathlib.Linter.linter.style.cdot","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L166-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.missingEnd.missingEndLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">missingEnd</span>.<span class=\"name\">missingEndLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>","info":{"doc":"The \"missing end\" linter emits a warning on non-closed `section`s and `namespace`s.\nIt allows the \"outermost\" `noncomputable section` to be left open (whether or not it is named).\n","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.missingEnd.missingEndLinter","kind":"def","line":133,"name":"Mathlib.Linter.Style.missingEnd.missingEndLinter","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L133-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.missingEnd\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">missingEnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The \"missing end\" linter emits a warning on non-closed `section`s and `namespace`s.\nIt allows the \"outermost\" `noncomputable section` to be left open (whether or not it is named).\n","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.missingEnd","kind":"opaque","line":123,"name":"Mathlib.Linter.linter.style.missingEnd","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L123-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.setOption.setOptionLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">setOption</span>.<span class=\"name\">setOptionLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>","info":{"doc":"The `setOption` linter: this lints any `set_option` command, term or tactic\nwhich sets a `debug`, `pp`, `profiler` or `trace` option.\nThis also warns if an option containing `maxHeartbeats` (typically, the `maxHeartbeats` or\n`synthInstance.maxHeartbeats` option) is set.\n\n**Why is this bad?** The `debug`, `pp`, `profiler` and `trace` options are good for debugging,\nbut should not be used in production code.\n\n`maxHeartbeats` options should be scoped as `set_option opt in ...` (and be followed by a comment\nexplaining the need for them; another linter enforces this).\n\n**How to fix this?** The `maxHeartbeats` options can be scoped to individual commands, if they\nare truly necessary.\n\nThe `debug`, `pp`, `profiler` and `trace` are usually not necessary for production code,\nso you can simply remove them. (Some tests will intentionally use one of these options;\nin this case, simply allow the linter.)\n","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.setOption.setOptionLinter","kind":"def","line":72,"name":"Mathlib.Linter.Style.setOption.setOptionLinter","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L72-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.setOption.isSetOption\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">setOption</span>.<span class=\"name\">isSetOption</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Whether a given piece of syntax is a `set_option` command, tactic or term. ","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.setOption.isSetOption","kind":"def","line":68,"name":"Mathlib.Linter.Style.setOption.isSetOption","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L68-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.setOption.parseSetOption\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">setOption</span>.<span class=\"name\">parseSetOption</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></span></div></div>","info":{"doc":"Whether a syntax element is a `set_option` command, tactic or term:\nReturn the name of the option being set, if any. ","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.Style.setOption.parseSetOption","kind":"def","line":59,"name":"Mathlib.Linter.Style.setOption.parseSetOption","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L59-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.setOption\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">style</span>.<span class=\"name\">setOption</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The `setOption` linter emits a warning on a `set_option` command, term or tactic\nwhich sets a `pp`, `profiler` or `trace` option.\nIt also warns on an option containing `maxHeartbeats`\n(as these should be scoped as `set_option ... in` instead). ","docLink":"./Mathlib/Tactic/Linter/Style.html#Mathlib.Linter.linter.style.setOption","kind":"opaque","line":48,"name":"Mathlib.Linter.linter.style.setOption","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Linter/Style.lean#L48-L55"}}],"imports":["Init","Lean.Elab.Command","Lean.Server.InfoUtils","Mathlib.Tactic.Linter.Header","Mathlib.Tactic.DeclarationNames"],"instances":[],"name":"Mathlib.Tactic.Linter.Style"}