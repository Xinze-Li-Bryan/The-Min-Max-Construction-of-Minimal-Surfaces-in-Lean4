{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.«command#min_importsIn_»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">«command#min_importsIn_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`#min_imports in cmd` scans the syntax `cmd` and the declaration obtained by elaborating `cmd`\nto find a collection of minimal imports that should be sufficient for `cmd` to work. ","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.«command#min_importsIn_»","kind":"def","line":256,"name":"Mathlib.Command.MinImports.«command#min_importsIn_»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/MinImports.lean#L256-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.minImpsStx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">minImpsStx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`#min_imports in cmd` scans the syntax `cmd` and the declaration obtained by elaborating `cmd`\nto find a collection of minimal imports that should be sufficient for `cmd` to work. ","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.minImpsStx","kind":"def","line":252,"name":"Mathlib.Command.MinImports.minImpsStx","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/MinImports.lean#L252-L254"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.minImpsCore\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">minImpsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx </span><span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"`minImpsCore stx id` is the internal function to elaborate the `#min_imports in` command.\nIt collects the irredundant imports to parse and elaborate `stx` and logs\n```lean\nimport A\nimport B\n...\nimport Z\n```\nThe `id` input is expected to be the name of the declaration that is currently processed.\nIt is used to provide the internally generated name for \"nameless\" `instance`s.\n","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.minImpsCore","kind":"def","line":236,"name":"Mathlib.Command.MinImports.minImpsCore","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/MinImports.lean#L236-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getIrredundantImports\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">getIrredundantImports</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">importNames</span> : <a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">Lean.NameSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">Lean.NameSet</a></div></div>","info":{"doc":"`getIrredundantImports env importNames` takes an `Environment` and a `NameSet` as inputs.\nAssuming that `importNames` are module names,\nit returns the `NameSet` consisting of a minimal collection of module names whose transitive\nclosure is enough to parse (and elaborate) `cmd`. ","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getIrredundantImports","kind":"def","line":229,"name":"Mathlib.Command.MinImports.getIrredundantImports","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/MinImports.lean#L229-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getAllImports\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">getAllImports</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmd </span><span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dbg?</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">Lean.NameSet</a></span></div></div>","info":{"doc":"`getAllImports cmd id` takes a `Syntax` input `cmd` and returns the `NameSet` of all the\nmodule names that are implied by\n* the `SyntaxNodeKinds`,\n* the attributes of `cmd` (if there are any),\n* the identifiers contained in `cmd`,\n* if `cmd` adds a declaration `d` to the environment, then also all the module names implied by `d`.\nThe argument `id` is expected to be an identifier.\nIt is used either for the internally generated name of a \"nameless\" `instance` or when parsing\nan identifier representing the name of a declaration.\n","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getAllImports","kind":"def","line":202,"name":"Mathlib.Command.MinImports.getAllImports","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/MinImports.lean#L202-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getAllDependencies\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">getAllDependencies</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmd </span><span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">Lean.NameSet</a></span></div></div>","info":{"doc":"`getAllDependencies cmd id` takes a `Syntax` input `cmd` and returns the `NameSet` of all the\ndeclaration names that are implied by\n* the `SyntaxNodeKinds`,\n* the attributes of `cmd` (if there are any),\n* the identifiers contained in `cmd`,\n* if `cmd` adds a declaration `d` to the environment, then also all the module names implied by `d`.\nThe argument `id` is expected to be an identifier.\nIt is used either for the internally generated name of a \"nameless\" `instance` or when parsing\nan identifier representing the name of a declaration.\n\nNote that the return value does not contain dependencies of the dependencies;\nyou can use `Lean.NameSet.transitivelyUsedConstants` to get those.\n","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getAllDependencies","kind":"def","line":179,"name":"Mathlib.Command.MinImports.getAllDependencies","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/MinImports.lean#L179-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getDeclName\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">getDeclName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmd</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>","info":{"doc":"`getDeclName cmd id` takes a `Syntax` input `cmd` and returns the `Name` of the declaration defined\nby `cmd`.\n","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getDeclName","kind":"def","line":140,"name":"Mathlib.Command.MinImports.getDeclName","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/MinImports.lean#L140-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.previousInstName\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">previousInstName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>","info":{"doc":"`previousInstName nm` takes as input a name `nm`, assuming that it is the name of an\nauto-generated \"nameless\" `instance`.\nIf `nm` ends in `..._n`, where `n` is a number, it returns the same name, but with `_n` replaced\nby `_(n-1)`, unless `n ≤ 1`, in which case it simply removes the `_n` suffix.\n","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.previousInstName","kind":"def","line":122,"name":"Mathlib.Command.MinImports.previousInstName","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/MinImports.lean#L122-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getAttrs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">getAttrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">Lean.NameSet</a></div></div>","info":{"doc":"`getAttrs env stx` returns all attribute declaration names contained in `stx` and registered\nin the `Environment `env`. ","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getAttrs","kind":"def","line":111,"name":"Mathlib.Command.MinImports.getAttrs","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/MinImports.lean#L111-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getAttrNames\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">getAttrNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">Lean.NameSet</a></div></div>","info":{"doc":"`getAttrNames stx` extracts `attribute`s from `stx`.\nIt does not collect `simp`, `ext`, `to_additive`.\nIt should collect almost all other attributes, e.g., `fun_prop`. ","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getAttrNames","kind":"def","line":103,"name":"Mathlib.Command.MinImports.getAttrNames","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/MinImports.lean#L103-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getIds\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">getIds</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">Lean.NameSet</a></span></div></div>","info":{"doc":"`getIds stx` extracts all identifiers, collecting them in a `NameSet`. ","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getIds","kind":"opaque","line":96,"name":"Mathlib.Command.MinImports.getIds","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/MinImports.lean#L96-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getId\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">getId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>","info":{"doc":"`getId stx` takes as input a `Syntax` `stx`.\nIf `stx` contains a `declId`, then it returns the `ident`-syntax for the `declId`.\nIf `stx` is a nameless instance, then it also tries to fetch the `ident` for the instance.\nOtherwise it returns `.missing`. ","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getId","kind":"def","line":79,"name":"Mathlib.Command.MinImports.getId","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/MinImports.lean#L79-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getVisited\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">getVisited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">Lean.NameSet</a></span></div></div>","info":{"doc":"Extracts the names of the declarations in `env` on which `decl` depends. ","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getVisited","kind":"def","line":71,"name":"Mathlib.Command.MinImports.getVisited","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/MinImports.lean#L71-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getSyntaxNodeKinds\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">getSyntaxNodeKinds</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">Lean.NameSet</a></span></div></div>","info":{"doc":"`getSyntaxNodeKinds stx` takes a `Syntax` input `stx` and returns the `NameSet` of all the\n`SyntaxNodeKinds` and all the identifiers contained in `stx`. ","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getSyntaxNodeKinds","kind":"opaque","line":62,"name":"Mathlib.Command.MinImports.getSyntaxNodeKinds","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/MinImports.lean#L62-L69"}}],"imports":["Init","Lean.Elab.DefView","Lean.Util.CollectAxioms","ImportGraph.Imports","ImportGraph.RequiredModules","Mathlib.Tactic.Linter.Header"],"instances":[],"name":"Mathlib.Tactic.MinImports"}