{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Elab/Tactic/Meta.html#Lean.Elab.runTactic'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">runTactic'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacticCode</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.Context\">Term.Context</a> := <a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.Context.mk\">{</a> <a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.Context.mk\">}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.State\">Term.State</a> := <a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.State.mk\">{</a> <a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.State.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"Apply the given tactic code to `mvarId` in `MetaM`.\n\nThis is a variant of `Lean.Elab.runTactic` that forgets the final `Term.State`.\n","docLink":"./Mathlib/Lean/Elab/Tactic/Meta.html#Lean.Elab.runTactic'","kind":"def","line":18,"name":"Lean.Elab.runTactic'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Elab/Tactic/Meta.lean#L18-L27"}}],"imports":["Init","Lean.Elab.SyntheticMVars","Mathlib.Tactic.Linter.Header"],"instances":[],"name":"Mathlib.Lean.Elab.Tactic.Meta"}