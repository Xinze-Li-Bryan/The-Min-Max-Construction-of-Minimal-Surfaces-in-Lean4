{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/OldObtain.html#Mathlib.Linter.Style.oldObtainLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">oldObtainLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>","info":{"doc":"The `oldObtain` linter: see docstring above ","docLink":"./Mathlib/Tactic/Linter/OldObtain.html#Mathlib.Linter.Style.oldObtainLinter","kind":"def","line":70,"name":"Mathlib.Linter.Style.oldObtainLinter","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/OldObtain.lean#L70-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/OldObtain.html#Mathlib.Linter.Style.linter.oldObtain\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">linter</span>.<span class=\"name\">oldObtain</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The `oldObtain` linter emits a warning upon uses of the \"stream-of-consciousness\" variants\nof the `obtain` tactic, i.e. with the proof postponed. ","docLink":"./Mathlib/Tactic/Linter/OldObtain.html#Mathlib.Linter.Style.linter.oldObtain","kind":"opaque","line":63,"name":"Mathlib.Linter.Style.linter.oldObtain","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/OldObtain.lean#L63-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/OldObtain.html#Mathlib.Linter.Style.isObtainWithoutProof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">Style</span>.<span class=\"name\">isObtainWithoutProof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Whether a syntax element is an `obtain` tactic call without a provided proof. ","docLink":"./Mathlib/Tactic/Linter/OldObtain.html#Mathlib.Linter.Style.isObtainWithoutProof","kind":"def","line":56,"name":"Mathlib.Linter.Style.isObtainWithoutProof","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Linter/OldObtain.lean#L56-L61"}}],"imports":["Init","Lean.Elab.Command","Mathlib.Tactic.Linter.Header"],"instances":[],"name":"Mathlib.Tactic.Linter.OldObtain"}