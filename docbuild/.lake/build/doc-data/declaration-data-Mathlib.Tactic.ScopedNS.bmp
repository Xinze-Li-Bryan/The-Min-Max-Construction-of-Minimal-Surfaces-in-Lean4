{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ScopedNS.html#Mathlib.Tactic.scopedNS\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">scopedNS</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`scoped[NS]` is similar to the `scoped` modifier on attributes and notations,\nbut it scopes the syntax in the specified namespace instead of the current namespace.\n```\nscoped[Matrix] postfix:1024 \"ᵀ\" => Matrix.transpose\n-- declares `ᵀ` as a notation for matrix transposition\n-- which is only accessible if you `open Matrix` or `open scoped Matrix`.\n\nnamespace Nat\n\nscoped[Nat.Count] attribute [instance] CountSet.fintype\n-- make the definition Nat.CountSet.fintype an instance,\n-- but only if `Nat.Count` is open\n```\n","docLink":"./Mathlib/Tactic/ScopedNS.html#Mathlib.Tactic.scopedNS","kind":"def","line":17,"name":"Mathlib.Tactic.scopedNS","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/ScopedNS.lean#L17-L33"}}],"imports":["Init","Mathlib.Util.WithWeakNamespace"],"instances":[],"name":"Mathlib.Tactic.ScopedNS"}