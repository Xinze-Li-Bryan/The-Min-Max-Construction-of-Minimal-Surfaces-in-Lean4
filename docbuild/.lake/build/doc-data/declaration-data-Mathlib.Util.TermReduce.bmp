{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.elabReduceProj\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">TermReduce</span>.<span class=\"name\">elabReduceProj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>","info":{"doc":"`reduceProj% t` apply `Expr.reduceProjStruct?` to all subexpressions of `t`. ","docLink":"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.elabReduceProj","kind":"def","line":77,"name":"Mathlib.Util.TermReduce.elabReduceProj","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/TermReduce.lean#L77-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.reduceProjStx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">TermReduce</span>.<span class=\"name\">reduceProjStx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`reduceProj% t` apply `Expr.reduceProjStruct?` to all subexpressions of `t`. ","docLink":"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.reduceProjStx","kind":"def","line":74,"name":"Mathlib.Util.TermReduce.reduceProjStx","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/TermReduce.lean#L74-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.elabZeta\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">TermReduce</span>.<span class=\"name\">elabZeta</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>","info":{"doc":"`zeta% t` elaborates to a zeta and zeta-delta reduced version of `t`. ","docLink":"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.elabZeta","kind":"def","line":62,"name":"Mathlib.Util.TermReduce.elabZeta","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/TermReduce.lean#L62-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.zetaStx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">TermReduce</span>.<span class=\"name\">zetaStx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`zeta% t` elaborates to a zeta and zeta-delta reduced version of `t`. ","docLink":"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.zetaStx","kind":"def","line":59,"name":"Mathlib.Util.TermReduce.zetaStx","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/TermReduce.lean#L59-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.elabDelta\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">TermReduce</span>.<span class=\"name\">elabDelta</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>","info":{"doc":"`delta% t` elaborates to a head-delta reduced version of `t`. ","docLink":"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.elabDelta","kind":"def","line":47,"name":"Mathlib.Util.TermReduce.elabDelta","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/TermReduce.lean#L47-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.deltaStx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">TermReduce</span>.<span class=\"name\">deltaStx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`delta% t` elaborates to a head-delta reduced version of `t`. ","docLink":"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.deltaStx","kind":"def","line":44,"name":"Mathlib.Util.TermReduce.deltaStx","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/TermReduce.lean#L44-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.elabBeta\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">TermReduce</span>.<span class=\"name\">elabBeta</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>","info":{"doc":"`beta% t` elaborates `t` and then if the result is in the form\n`f x1 ... xn` where `f` is a (nested) lambda expression,\nit will substitute all of its arguments by beta reduction.\nThis does not recursively do beta reduction, nor will it do\nbeta reduction of subexpressions.\n\nIn particular, `t` is elaborated, its metavariables are instantiated,\nand then `Lean.Expr.headBeta` is applied. ","docLink":"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.elabBeta","kind":"def","line":36,"name":"Mathlib.Util.TermReduce.elabBeta","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/TermReduce.lean#L36-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.betaStx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">TermReduce</span>.<span class=\"name\">betaStx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`beta% t` elaborates `t` and then if the result is in the form\n`f x1 ... xn` where `f` is a (nested) lambda expression,\nit will substitute all of its arguments by beta reduction.\nThis does not recursively do beta reduction, nor will it do\nbeta reduction of subexpressions.\n\nIn particular, `t` is elaborated, its metavariables are instantiated,\nand then `Lean.Expr.headBeta` is applied. ","docLink":"./Mathlib/Util/TermReduce.html#Mathlib.Util.TermReduce.betaStx","kind":"def","line":26,"name":"Mathlib.Util.TermReduce.betaStx","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Util/TermReduce.lean#L26-L34"}}],"imports":["Init","Lean.Meta.Tactic.Delta","Mathlib.Lean.Expr.Basic"],"instances":[],"name":"Mathlib.Util.TermReduce"}