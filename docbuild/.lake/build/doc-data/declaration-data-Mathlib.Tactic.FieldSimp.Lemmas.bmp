{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.mkEqMul\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">Sign</span>.<span class=\"name\">mkEqMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> v)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">iM</span> : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">«$M»</span></span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">C </span><span class=\"fn\">d </span><span class=\"fn\">e</span> : <span class=\"fn\">Q(<span class=\"fn\">«$M»</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign\">Sign</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pf₁</span> :\n  <span class=\"fn\">have <span class=\"fn\">a_1</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.expr\">expr</a></span> <span class=\"fn\">b</span></span>;\n  <span class=\"fn\">Q(<span class=\"fn\">«$a»</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">«$a_1»</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pf₂</span> : <span class=\"fn\">Q(<span class=\"fn\">«$b»</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">«$C»</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">«$d»</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pf₃</span> : <span class=\"fn\">Q(<span class=\"fn\">«$d»</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">«$e»</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a>\n  <span class=\"fn\">(have <span class=\"fn\">a_1</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.expr\">expr</a></span> <span class=\"fn\">e</span></span>;\n  <span class=\"fn\">Q(<span class=\"fn\">«$a»</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">«$C»</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">«$a_1»</span>)</span>)</span></span></div></div>","info":{"doc":"If `a` = ± `b`, `b = C * d`, and `d = e`, construct a proof that `a` = `C` * ± `e`. ","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.mkEqMul","kind":"def","line":493,"name":"Mathlib.Tactic.FieldSimp.Sign.mkEqMul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L493-L499"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.congr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">Sign</span>.<span class=\"name\">congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y </span><span class=\"fn\">y'</span> : <span class=\"fn\">Q(<span class=\"fn\">«$M»</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign\">Sign</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pf</span> : <span class=\"fn\">Q(<span class=\"fn\">«$y»</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">«$y'»</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">have <span class=\"fn\">a</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.expr\">expr</a></span> <span class=\"fn\">y'</span></span>;\n<span class=\"fn\">have <span class=\"fn\">a_1</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.expr\">expr</a></span> <span class=\"fn\">y</span></span>;\n<span class=\"fn\">Q(<span class=\"fn\">«$a_1»</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">«$a»</span>)</span></span></span></div></div>","info":{"doc":"Given a proof that two expressions `y₁ y₂ : Q($M)` are equal, construct a proof that (± `y₁`)\nand (± `y₂`) are equal, where the same sign is taken in both expression. ","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.congr","kind":"def","line":486,"name":"Mathlib.Tactic.FieldSimp.Sign.congr","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L486-L491"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.zpow\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">Sign</span>.<span class=\"name\">zpow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> v)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">iM</span> : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">«$M»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">Q(<span class=\"fn\">«$M»</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign\">Sign</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a>\n  <span class=\"fn\">((<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign\">Sign</a> <span class=\"fn\">M</span></span>) ×\n    <span class=\"fn\">have <span class=\"fn\">a</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.expr\">expr</a></span> <span class=\"fn\">q(<span class=\"fn\">«$y»</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">«$s»</span>)</span></span>;\n    <span class=\"fn\">have <span class=\"fn\">a_1</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.expr\">expr</a></span> <span class=\"fn\">y</span></span>;\n    <span class=\"fn\">Q(<span class=\"fn\">«$a_1»</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">«$s»</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">«$a»</span>)</span></span></span>)</span></span></div></div>","info":{"doc":"Given an expression `y : Q($M)` with specified sign (either + or -), construct a proof that\nthe exponentiation to power `s : ℤ` of (± `y`) (here taking the specified signs) is ± `y ^ s`;\nreturn this proof and the computed sign. ","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.zpow","kind":"def","line":470,"name":"Mathlib.Tactic.FieldSimp.Sign.zpow","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L470-L484"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.pow\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">Sign</span>.<span class=\"name\">pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> v)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">iM</span> : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">«$M»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">Q(<span class=\"fn\">«$M»</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign\">Sign</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a>\n  <span class=\"fn\">((<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign\">Sign</a> <span class=\"fn\">M</span></span>) ×\n    <span class=\"fn\">have <span class=\"fn\">a</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.expr\">expr</a></span> <span class=\"fn\">q(<span class=\"fn\">«$y»</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">«$s»</span>)</span></span>;\n    <span class=\"fn\">have <span class=\"fn\">a_1</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.expr\">expr</a></span> <span class=\"fn\">y</span></span>;\n    <span class=\"fn\">Q(<span class=\"fn\">«$a_1»</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">«$s»</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">«$a»</span>)</span></span></span>)</span></span></div></div>","info":{"doc":"Given an expression `y : Q($M)` with specified sign (either + or -), construct a proof that\nthe exponentiation to power `s : ℕ` of (± `y`) (here taking the specified signs) is ± `y ^ s`;\nreturn this proof and the computed sign. ","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.pow","kind":"def","line":454,"name":"Mathlib.Tactic.FieldSimp.Sign.pow","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L454-L468"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.neg\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">Sign</span>.<span class=\"name\">neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> v)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">iM</span> : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">«$M»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">Q(<span class=\"fn\">«$M»</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign\">Sign</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a>\n  <span class=\"fn\">((<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign\">Sign</a> <span class=\"fn\">M</span></span>) ×\n    <span class=\"fn\">have <span class=\"fn\">a</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.expr\">expr</a></span> <span class=\"fn\">y</span></span>;\n    <span class=\"fn\">have <span class=\"fn\">a_1</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.expr\">expr</a></span> <span class=\"fn\">y</span></span>;\n    <span class=\"fn\">Q(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">«$a_1»</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">«$a»</span>)</span></span></span>)</span></span></div></div>","info":{"doc":"Given an expression `y : Q($M)` with specified sign (either + or -), construct a proof that\nthe negation of (± `y`) (here taking the specified sign) is ∓ `y`. ","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.neg","kind":"def","line":444,"name":"Mathlib.Tactic.FieldSimp.Sign.neg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L444-L452"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.div\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">Sign</span>.<span class=\"name\">div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> v)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">iM</span> : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">«$M»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y₁ </span><span class=\"fn\">y₂</span> : <span class=\"fn\">Q(<span class=\"fn\">«$M»</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g₁ </span><span class=\"fn\">g₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign\">Sign</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a>\n  <span class=\"fn\">((<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign\">Sign</a> <span class=\"fn\">M</span></span>) ×\n    <span class=\"fn\">have <span class=\"fn\">a</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.expr\">expr</a></span> <span class=\"fn\">q(<span class=\"fn\">«$y₁»</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">«$y₂»</span>)</span></span>;\n    <span class=\"fn\">have <span class=\"fn\">a_1</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g₂</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.expr\">expr</a></span> <span class=\"fn\">y₂</span></span>;\n    <span class=\"fn\">have <span class=\"fn\">a_2</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g₁</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.expr\">expr</a></span> <span class=\"fn\">y₁</span></span>;\n    <span class=\"fn\">Q(<span class=\"fn\">«$a_2»</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">«$a_1»</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">«$a»</span>)</span></span></span></span>)</span></span></div></div>","info":{"doc":"Given expressions `y₁ y₂ : Q($M)` with specified signs (either + or -), construct a proof that\nthe quotient of (± `y₁`) and (± `y₂`) (here taking the specified signs) is ± `y₁ / y₂`; return this\nproof and the computed sign. ","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.div","kind":"def","line":427,"name":"Mathlib.Tactic.FieldSimp.Sign.div","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L427-L442"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.inv\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">Sign</span>.<span class=\"name\">inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> v)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">iM</span> : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">«$M»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">Q(<span class=\"fn\">«$M»</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign\">Sign</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a>\n  <span class=\"fn\">(have <span class=\"fn\">a</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.expr\">expr</a></span> <span class=\"fn\">q(<span class=\"fn\">«$y»</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a>)</span></span>;\n  <span class=\"fn\">have <span class=\"fn\">a_1</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.expr\">expr</a></span> <span class=\"fn\">y</span></span>;\n  <span class=\"fn\">Q(<span class=\"fn\">«$a_1»</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">«$a»</span>)</span></span>)</span></span></div></div>","info":{"doc":"Given an expression `y : Q($M)` with specified sign (either + or -), construct a proof that\nthe inverse of (± `y`) (here taking the specified sign) is ± `y⁻¹`. ","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.inv","kind":"def","line":417,"name":"Mathlib.Tactic.FieldSimp.Sign.inv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L417-L425"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.mul\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">Sign</span>.<span class=\"name\">mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> v)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">iM</span> : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">«$M»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y₁ </span><span class=\"fn\">y₂</span> : <span class=\"fn\">Q(<span class=\"fn\">«$M»</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g₁ </span><span class=\"fn\">g₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign\">Sign</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a>\n  <span class=\"fn\">((<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign\">Sign</a> <span class=\"fn\">M</span></span>) ×\n    <span class=\"fn\">have <span class=\"fn\">a</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.expr\">expr</a></span> <span class=\"fn\">q(<span class=\"fn\">«$y₁»</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">«$y₂»</span>)</span></span>;\n    <span class=\"fn\">have <span class=\"fn\">a_1</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g₂</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.expr\">expr</a></span> <span class=\"fn\">y₂</span></span>;\n    <span class=\"fn\">have <span class=\"fn\">a_2</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g₁</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.expr\">expr</a></span> <span class=\"fn\">y₁</span></span>;\n    <span class=\"fn\">Q(<span class=\"fn\">«$a_2»</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">«$a_1»</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">«$a»</span>)</span></span></span></span>)</span></span></div></div>","info":{"doc":"Given expressions `y₁ y₂ : Q($M)` with specified signs (either + or -), construct a proof that\nthe product of (± `y₁`) and (± `y₂`) (here taking the specified signs) is ± `y₁ * y₂`; return this\nproof and the computed sign. ","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.mul","kind":"def","line":400,"name":"Mathlib.Tactic.FieldSimp.Sign.mul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L400-L415"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.mulRight\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">Sign</span>.<span class=\"name\">mulRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> v)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">iM</span> : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">«$M»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">y</span> : <span class=\"fn\">Q(<span class=\"fn\">«$M»</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign\">Sign</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a>\n  <span class=\"fn\">(have <span class=\"fn\">a</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.expr\">expr</a></span> <span class=\"fn\">y</span></span>;\n  <span class=\"fn\">have <span class=\"fn\">a_1</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.expr\">expr</a></span> <span class=\"fn\">q(<span class=\"fn\">«$c»</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">«$y»</span>)</span></span>;\n  <span class=\"fn\">Q(<span class=\"fn\">«$a_1»</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">«$c»</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">«$a»</span>)</span></span>)</span></span></div></div>","info":{"doc":"Given an expression `y : Q($M)` with specified sign (either + or -), construct a proof that\nthe product with `c` of (± `y`) (here taking the specified sign) is ± `c * y`. ","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.mulRight","kind":"def","line":390,"name":"Mathlib.Tactic.FieldSimp.Sign.mulRight","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L390-L398"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.expr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">Sign</span>.<span class=\"name\">expr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> v)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign\">Sign</a> <span class=\"fn\">M</span></span> → <span class=\"fn\"><span class=\"fn\">Q(<span class=\"fn\">«$M»</span>)</span> → <span class=\"fn\">Q(<span class=\"fn\">«$M»</span>)</span></span></span></div></div>","info":{"doc":"Given an expression `e : Q($M)`, construct an expression which is morally \"± `e`\", with the\nchoice between + and - determined by an object `g : Sign M`. ","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.expr","kind":"def","line":384,"name":"Mathlib.Tactic.FieldSimp.Sign.expr","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L384-L388"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.minus\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">Sign</span>.<span class=\"name\">minus</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> v)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">iM</span> : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">«$M»</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign\">Sign</a> <span class=\"fn\">M</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.minus","kind":"ctor","line":382,"name":"Mathlib.Tactic.FieldSimp.Sign.minus","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L382-L382"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.plus\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">Sign</span>.<span class=\"name\">plus</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> v)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign\">Sign</a> <span class=\"fn\">M</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign.plus","kind":"ctor","line":381,"name":"Mathlib.Tactic.FieldSimp.Sign.plus","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L381-L381"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">Sign</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> v)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Inductive type representing the options for the sign of an element in a type-expression `M`\n\nIf the sign is \"-\", then we also carry an expression for a field instance on `M`, to allow us to\nconstruct that negation when needed. ","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.Sign","kind":"inductive","line":376,"name":"Mathlib.Tactic.FieldSimp.Sign","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L376-L382"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval_cons_eq_eval_of_eq_of_eq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">eval_cons_eq_eval_of_eq_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">t' </span><span class=\"fn\">l'</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t'</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">r</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">t'</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l'</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">r</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">t</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l'</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval_cons_eq_eval_of_eq_of_eq","kind":"theorem","line":362,"name":"Mathlib.Tactic.FieldSimp.NF.eval_cons_eq_eval_of_eq_of_eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L362-L365"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval_cons_of_pow_eq_zero\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">eval_cons_of_pow_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">r</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval_cons_of_pow_eq_zero","kind":"theorem","line":357,"name":"Mathlib.Tactic.FieldSimp.NF.eval_cons_of_pow_eq_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L357-L360"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.pow_eq_eval\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">pow_eq_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">r</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">r</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.pow_eq_eval","kind":"theorem","line":351,"name":"Mathlib.Tactic.FieldSimp.NF.pow_eq_eval","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L351-L355"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval_pow\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">eval_pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">r</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <span class=\"fn\">↑<span class=\"fn\">r</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval_pow","kind":"theorem","line":348,"name":"Mathlib.Tactic.FieldSimp.NF.eval_pow","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L348-L349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.pow_apply\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">pow_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a>\n    <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">M</span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">↑<span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>)</span>\n    <span class=\"fn\">l</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.pow_apply","kind":"theorem","line":345,"name":"Mathlib.Tactic.FieldSimp.NF.pow_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L345-L346"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.instPowNat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">instPowNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span>)</span> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.instPowNat","kind":"instance","line":342,"name":"Mathlib.Tactic.FieldSimp.NF.instPowNat","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L342-L343"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.zpow_eq_eval\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">zpow_eq_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">r</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">r</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.zpow_eq_eval","kind":"theorem","line":337,"name":"Mathlib.Tactic.FieldSimp.NF.zpow_eq_eval","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L337-L340"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval_zpow'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">eval_zpow'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">r</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <span class=\"fn\">r</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval_zpow'","kind":"theorem","line":329,"name":"Mathlib.Tactic.FieldSimp.NF.eval_zpow'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L329-L335"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.zpow_apply\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">zpow_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a>\n    <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">M</span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>)</span>\n    <span class=\"fn\">l</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.zpow_apply","kind":"theorem","line":327,"name":"Mathlib.Tactic.FieldSimp.NF.zpow_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L327-L327"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.instPowInt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">instPowInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span>)</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.instPowInt","kind":"instance","line":324,"name":"Mathlib.Tactic.FieldSimp.NF.instPowInt","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L324-L325"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.inv_eq_eval\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">inv_eq_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.inv_eq_eval","kind":"theorem","line":320,"name":"Mathlib.Tactic.FieldSimp.NF.inv_eq_eval","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L320-L322"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.one_div_eq_eval\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">one_div_eq_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.one_div_eq_eval","kind":"theorem","line":317,"name":"Mathlib.Tactic.FieldSimp.NF.one_div_eq_eval","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L317-L318"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval_inv\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">eval_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval_inv","kind":"theorem","line":311,"name":"Mathlib.Tactic.FieldSimp.NF.eval_inv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L311-L315"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.instInv\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">instInv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inv\">Inv</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.instInv","kind":"instance","line":308,"name":"Mathlib.Tactic.FieldSimp.NF.instInv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L308-L309"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons_zero_eq_div_of_eq_div\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">cons_zero_eq_div_of_eq_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">t_n </span><span class=\"fn\">t_d</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t_n</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">t_d</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">0</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">e</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">t</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">e</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">t_n</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">e</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">t_d</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons_zero_eq_div_of_eq_div","kind":"theorem","line":302,"name":"Mathlib.Tactic.FieldSimp.NF.cons_zero_eq_div_of_eq_div","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L302-L306"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons_eq_div_of_eq_div'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">cons_eq_div_of_eq_div'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">t_n </span><span class=\"fn\">t_d</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t_n</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">t_d</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">e</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">t</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t_n</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">n</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">e</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">t_d</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons_eq_div_of_eq_div'","kind":"theorem","line":296,"name":"Mathlib.Tactic.FieldSimp.NF.cons_eq_div_of_eq_div'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L296-L300"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons_eq_div_of_eq_div\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">cons_eq_div_of_eq_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">t_n </span><span class=\"fn\">t_d</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t_n</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">t_d</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">n</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">e</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">t</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">n</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">e</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">t_n</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">t_d</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons_eq_div_of_eq_div","kind":"theorem","line":290,"name":"Mathlib.Tactic.FieldSimp.NF.cons_eq_div_of_eq_div","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L290-L294"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval_cons_mul_eval_cons_neg\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">eval_cons_mul_eval_cons_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\">e</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L </span><span class=\"fn\">l </span><span class=\"fn\">l'</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l'</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">n</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">e</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">L</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">e</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l'</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval_cons_mul_eval_cons_neg","kind":"theorem","line":284,"name":"Mathlib.Tactic.FieldSimp.NF.eval_cons_mul_eval_cons_neg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L284-L288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval_cons_mul_eval\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">eval_cons_mul_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L </span><span class=\"fn\">l </span><span class=\"fn\">l'</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l'</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">n</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">e</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">L</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">n</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">e</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l'</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval_cons_mul_eval","kind":"theorem","line":278,"name":"Mathlib.Tactic.FieldSimp.NF.eval_cons_mul_eval","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L278-L282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval_mul_eval_cons_zero\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">eval_mul_eval_cons_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L </span><span class=\"fn\">l </span><span class=\"fn\">l' </span><span class=\"fn\">l₀</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l'</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">0</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">e</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l₀</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">l₀</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">0</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">e</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l'</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval_mul_eval_cons_zero","kind":"theorem","line":273,"name":"Mathlib.Tactic.FieldSimp.NF.eval_mul_eval_cons_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L273-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval_mul_eval_cons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">eval_mul_eval_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L </span><span class=\"fn\">l </span><span class=\"fn\">l'</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l'</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">n</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">e</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">n</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">e</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l'</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval_mul_eval_cons","kind":"theorem","line":268,"name":"Mathlib.Tactic.FieldSimp.NF.eval_mul_eval_cons","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L268-L271"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.div_eq_eval\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">div_eq_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#GroupWithZero\">GroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂ </span><span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₁ </span><span class=\"fn\">x₂</span> : <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx₁</span> : <span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx₂</span> : <span class=\"fn\">x₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">x₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.div_eq_eval","kind":"theorem","line":263,"name":"Mathlib.Tactic.FieldSimp.NF.div_eq_eval","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L263-L266"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.div_eq_eval₃\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">div_eq_eval₃</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">M</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂ </span><span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">(<span class=\"fn\">a₁</span> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l₁</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a₁</span> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l₁</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">(<span class=\"fn\">a₂</span> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l₂</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">a₂</span>.1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">a₂</span>.2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.div_eq_eval₃","kind":"theorem","line":258,"name":"Mathlib.Tactic.FieldSimp.NF.div_eq_eval₃","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L258-L261"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.div_eq_eval₂\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">div_eq_eval₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r₁ </span><span class=\"fn\">r₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂ </span><span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">r₁</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l₁</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">r₂</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l₂</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">r₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">r₂</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.div_eq_eval₂","kind":"theorem","line":252,"name":"Mathlib.Tactic.FieldSimp.NF.div_eq_eval₂","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L252-L256"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.div_eq_eval₁\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">div_eq_eval₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">M</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂ </span><span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">(<span class=\"fn\">a₂</span> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l₂</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a₁</span> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l₁</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">(<span class=\"fn\">a₂</span> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l₂</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">a₁</span> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.div_eq_eval₁","kind":"theorem","line":246,"name":"Mathlib.Tactic.FieldSimp.NF.div_eq_eval₁","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L246-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.mul_eq_eval\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">mul_eq_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#GroupWithZero\">GroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂ </span><span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₁ </span><span class=\"fn\">x₂</span> : <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx₁</span> : <span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx₂</span> : <span class=\"fn\">x₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.mul_eq_eval","kind":"theorem","line":241,"name":"Mathlib.Tactic.FieldSimp.NF.mul_eq_eval","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L241-L244"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.mul_eq_eval₃\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">mul_eq_eval₃</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">M</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂ </span><span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">(<span class=\"fn\">a₁</span> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l₁</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a₁</span> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l₁</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\">a₂</span> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l₂</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">a₂</span> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.mul_eq_eval₃","kind":"theorem","line":235,"name":"Mathlib.Tactic.FieldSimp.NF.mul_eq_eval₃","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L235-L239"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.mul_eq_eval₂\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">mul_eq_eval₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r₁ </span><span class=\"fn\">r₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂ </span><span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">r₁</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l₁</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">r₂</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l₂</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">r₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">r₂</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.mul_eq_eval₂","kind":"theorem","line":229,"name":"Mathlib.Tactic.FieldSimp.NF.mul_eq_eval₂","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L229-L233"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.mul_eq_eval₁\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">mul_eq_eval₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">M</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂ </span><span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\">a₂</span> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l₂</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a₁</span> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l₁</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\">a₂</span> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l₂</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">a₁</span> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.mul_eq_eval₁","kind":"theorem","line":223,"name":"Mathlib.Tactic.FieldSimp.NF.mul_eq_eval₁","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L223-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.one_eq_eval\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">one_eq_eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#GroupWithZero\">GroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.one_eq_eval","kind":"theorem","line":221,"name":"Mathlib.Tactic.FieldSimp.NF.one_eq_eval","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L221-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.atom_eq_eval\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">atom_eq_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#GroupWithZero\">GroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Init/Prelude.html#List.cons\">]</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.atom_eq_eval","kind":"theorem","line":218,"name":"Mathlib.Tactic.FieldSimp.NF.atom_eq_eval","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L218-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons_pos\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">cons_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#GroupWithZero\">GroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/GroupWithZero/Unbundled/Defs.html#PosMulStrictMono\">PosMulStrictMono</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/GroupWithZero/Unbundled/Defs.html#PosMulReflectLT\">PosMulReflectLT</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/ZeroLEOne.html#ZeroLEOneClass\">ZeroLEOneClass</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">r</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons_pos","kind":"theorem","line":209,"name":"Mathlib.Tactic.FieldSimp.NF.cons_pos","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L209-L216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons_ne_zero\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">cons_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#GroupWithZero\">GroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">r</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons_ne_zero","kind":"theorem","line":203,"name":"Mathlib.Tactic.FieldSimp.NF.cons_ne_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L203-L207"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval_cons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">eval_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\">::ᵣ</a> <span class=\"fn\">l</span>).<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\">eval</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\"><span class=\"fn\">p</span>.2</span> <span class=\"fn\"><span class=\"fn\">p</span>.1</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval_cons","kind":"theorem","line":198,"name":"Mathlib.Tactic.FieldSimp.NF.eval_cons","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L198-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#GroupWithZero\">GroupWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span></div></div>","info":{"doc":"Evaluate a `FieldSimp.NF M` object `l`, i.e. a list of pairs in `ℤ × M`, to an element of `M`,\nby forming the \"multiplicative linear combination\" it specifies: raise each `M` term to the power of\nthe corresponding `ℤ` term, then multiply them all together. ","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.eval","kind":"def","line":192,"name":"Mathlib.Tactic.FieldSimp.NF.eval","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L192-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.«term_::ᵣ_»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">«term_::ᵣ_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>","info":{"doc":"Augment a `FieldSimp.NF M` object `l`, i.e. a list of pairs in `ℤ × M`, by prepending another\npair `p : ℤ × M`. ","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.«term_::ᵣ_»","kind":"def","line":190,"name":"Mathlib.Tactic.FieldSimp.NF.«term_::ᵣ_»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L190-L190"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\">NF</a> <span class=\"fn\">M</span></span></div></div>","info":{"doc":"Augment a `FieldSimp.NF M` object `l`, i.e. a list of pairs in `ℤ × M`, by prepending another\npair `p : ℤ × M`. ","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF.cons","kind":"def","line":185,"name":"Mathlib.Tactic.FieldSimp.NF.cons","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L185-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">NF</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>","info":{"doc":"Basic theoretical \"normal form\" object of the `field_simp` tactic: a type\nsynonym for a list of ordered pairs in `ℤ × M`, where typically `M` is a field.  This is the\nform to which the tactics reduce field expressions. ","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.NF","kind":"def","line":177,"name":"Mathlib.Tactic.FieldSimp.NF","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L177-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.lt_eq_cancel_lt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">lt_eq_cancel_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CancelMonoidWithZero\">CancelMonoidWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/GroupWithZero/Unbundled/Defs.html#PosMulStrictMono\">PosMulStrictMono</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/GroupWithZero/Unbundled/Defs.html#PosMulReflectLT\">PosMulReflectLT</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e₁ </span><span class=\"fn\">e₂ </span><span class=\"fn\">f₁ </span><span class=\"fn\">f₂ </span><span class=\"fn\">L</span> : <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H₁</span> : <span class=\"fn\">e₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">f₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H₂</span> : <span class=\"fn\">e₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">f₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">HL</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">e₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">e₂</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">f₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">f₂</span>)</div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.lt_eq_cancel_lt","kind":"theorem","line":162,"name":"Mathlib.Tactic.FieldSimp.lt_eq_cancel_lt","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L162-L168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.le_eq_cancel_le\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">le_eq_cancel_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CancelMonoidWithZero\">CancelMonoidWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/GroupWithZero/Unbundled/Defs.html#PosMulMono\">PosMulMono</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/GroupWithZero/Unbundled/Defs.html#PosMulReflectLE\">PosMulReflectLE</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e₁ </span><span class=\"fn\">e₂ </span><span class=\"fn\">f₁ </span><span class=\"fn\">f₂ </span><span class=\"fn\">L</span> : <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H₁</span> : <span class=\"fn\">e₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">f₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H₂</span> : <span class=\"fn\">e₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">f₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">HL</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">e₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">e₂</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">f₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">f₂</span>)</div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.le_eq_cancel_le","kind":"theorem","line":154,"name":"Mathlib.Tactic.FieldSimp.le_eq_cancel_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L154-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.eq_eq_cancel_eq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">eq_eq_cancel_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CancelMonoidWithZero\">CancelMonoidWithZero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e₁ </span><span class=\"fn\">e₂ </span><span class=\"fn\">f₁ </span><span class=\"fn\">f₂ </span><span class=\"fn\">L</span> : <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H₁</span> : <span class=\"fn\">e₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">f₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H₂</span> : <span class=\"fn\">e₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">f₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">HL</span> : <span class=\"fn\">L</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">e₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">e₂</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">f₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f₂</span>)</div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.eq_eq_cancel_eq","kind":"theorem","line":148,"name":"Mathlib.Tactic.FieldSimp.eq_eq_cancel_eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L148-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.eq_mul_of_eq_eq_eq_mul\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">eq_mul_of_eq_eq_eq_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">D </span><span class=\"fn\">e </span><span class=\"fn\">f</span> : <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₃</span> : <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">D</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">e</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₄</span> : <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">D</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">f</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.eq_mul_of_eq_eq_eq_mul","kind":"theorem","line":143,"name":"Mathlib.Tactic.FieldSimp.eq_mul_of_eq_eq_eq_mul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L143-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.eq_div_of_subst\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">eq_div_of_subst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">l_n </span><span class=\"fn\">l_d </span><span class=\"fn\">n </span><span class=\"fn\">d</span> : <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l_n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">l_d</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">l_n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hd</span> : <span class=\"fn\">l_d</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">d</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.eq_div_of_subst","kind":"theorem","line":138,"name":"Mathlib.Tactic.FieldSimp.eq_div_of_subst","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L138-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.eq_div_of_eq_one_of_subst'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">eq_div_of_eq_one_of_subst'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#DivInvOneMonoid\">DivInvOneMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">l_d </span><span class=\"fn\">d</span> : <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">l_d</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">l_d</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.eq_div_of_eq_one_of_subst'","kind":"theorem","line":133,"name":"Mathlib.Tactic.FieldSimp.eq_div_of_eq_one_of_subst'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L133-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.eq_div_of_eq_one_of_subst\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">eq_div_of_eq_one_of_subst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#DivInvOneMonoid\">DivInvOneMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">l_n </span><span class=\"fn\">n</span> : <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l_n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">l_n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.eq_div_of_eq_one_of_subst","kind":"theorem","line":128,"name":"Mathlib.Tactic.FieldSimp.eq_div_of_eq_one_of_subst","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L128-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.subst_sub\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">subst_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₁ </span><span class=\"fn\">x₂ </span><span class=\"fn\">X₁ </span><span class=\"fn\">X₂ </span><span class=\"fn\">Y </span><span class=\"fn\">y </span><span class=\"fn\">a</span> : <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">X₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">x₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">X₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H_atom</span> : <span class=\"fn\">X₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">X₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">Y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">x₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.subst_sub","kind":"theorem","line":122,"name":"Mathlib.Tactic.FieldSimp.subst_sub","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L122-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.subst_add\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">subst_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₁ </span><span class=\"fn\">x₂ </span><span class=\"fn\">X₁ </span><span class=\"fn\">X₂ </span><span class=\"fn\">Y </span><span class=\"fn\">y </span><span class=\"fn\">a</span> : <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">X₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">x₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">X₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H_atom</span> : <span class=\"fn\">X₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">X₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">Y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.subst_add","kind":"theorem","line":116,"name":"Mathlib.Tactic.FieldSimp.subst_add","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L116-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.list_prod_zpow'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">list_prod_zpow'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/List/Defs.html#List.prod\">prod</a></span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\">x</span> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/List/Defs.html#List.prod\">prod</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.list_prod_zpow'","kind":"theorem","line":109,"name":"Mathlib.Tactic.FieldSimp.list_prod_zpow'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L109-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.mul_zpow'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">mul_zpow'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CommGroupWithZero\">CommGroupWithZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>) <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\">b</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.mul_zpow'","kind":"theorem","line":101,"name":"Mathlib.Tactic.FieldSimp.mul_zpow'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L101-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'_ofNat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">zpow'_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#GroupWithZero\">GroupWithZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\">a</span> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'_ofNat","kind":"theorem","line":94,"name":"Mathlib.Tactic.FieldSimp.zpow'_ofNat","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L94-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'_mul\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">zpow'_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#GroupWithZero\">GroupWithZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\">a</span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\">a</span> <span class=\"fn\">m</span>)</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'_mul","kind":"theorem","line":83,"name":"Mathlib.Tactic.FieldSimp.zpow'_mul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L83-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'_neg\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">zpow'_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#GroupWithZero\">GroupWithZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\">a</span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\">a</span> <span class=\"fn\">n</span>)</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'_neg","kind":"theorem","line":77,"name":"Mathlib.Tactic.FieldSimp.zpow'_neg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L77-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'_zero_of_ne_zero\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">zpow'_zero_of_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#GroupWithZero\">GroupWithZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\">a</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'_zero_of_ne_zero","kind":"theorem","line":75,"name":"Mathlib.Tactic.FieldSimp.zpow'_zero_of_ne_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L75-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'_zero_eq_div\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">zpow'_zero_eq_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#GroupWithZero\">GroupWithZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\">a</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'_zero_eq_div","kind":"theorem","line":69,"name":"Mathlib.Tactic.FieldSimp.zpow'_zero_eq_div","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L69-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'_one\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">zpow'_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#GroupWithZero\">GroupWithZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\">a</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'_one","kind":"theorem","line":65,"name":"Mathlib.Tactic.FieldSimp.zpow'_one","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L65-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.one_zpow'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">one_zpow'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#GroupWithZero\">GroupWithZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\">1</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.one_zpow'","kind":"theorem","line":61,"name":"Mathlib.Tactic.FieldSimp.one_zpow'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L61-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'_eq_zero_iff\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">zpow'_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#GroupWithZero\">GroupWithZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'_eq_zero_iff","kind":"theorem","line":55,"name":"Mathlib.Tactic.FieldSimp.zpow'_eq_zero_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L55-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zero_zpow'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">zero_zpow'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#GroupWithZero\">GroupWithZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\">0</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zero_zpow'","kind":"theorem","line":49,"name":"Mathlib.Tactic.FieldSimp.zero_zpow'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L49-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'_of_ne_zero_left\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">zpow'_of_ne_zero_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#GroupWithZero\">GroupWithZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'_of_ne_zero_left","kind":"theorem","line":46,"name":"Mathlib.Tactic.FieldSimp.zpow'_of_ne_zero_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L46-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'_of_ne_zero_right\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">zpow'_of_ne_zero_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#GroupWithZero\">GroupWithZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'_of_ne_zero_right","kind":"theorem","line":43,"name":"Mathlib.Tactic.FieldSimp.zpow'_of_ne_zero_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L43-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'_add\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">zpow'_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#GroupWithZero\">GroupWithZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\">a</span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\">zpow'</a> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'_add","kind":"theorem","line":34,"name":"Mathlib.Tactic.FieldSimp.zpow'_add","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L34-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">FieldSimp</span>.<span class=\"name\">zpow'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#GroupWithZero\">GroupWithZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"This is a variant of integer exponentiation, defined for internal use in the `field_simp` tactic\nimplementation. It differs from the usual integer exponentiation in that `0 ^ 0` is `0`, not `1`.\nWith this choice, the function `n ↦ a ^ n` is always a homomorphism (`a ^ (n + m) = a ^ n * a ^ m`),\neven if `a` is zero. ","docLink":"./Mathlib/Tactic/FieldSimp/Lemmas.html#Mathlib.Tactic.FieldSimp.zpow'","kind":"def","line":27,"name":"Mathlib.Tactic.FieldSimp.zpow'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/FieldSimp/Lemmas.lean#L27-L32"}}],"imports":["Init","Mathlib.Algebra.BigOperators.Group.List.Basic","Mathlib.Algebra.Field.Power","Mathlib.Algebra.Order.GroupWithZero.Unbundled.Basic","Mathlib.Util.Qq"],"instances":[{"className":"Inv","name":"Mathlib.Tactic.FieldSimp.NF.instInv","typeNames":["Mathlib.Tactic.FieldSimp.NF"]},{"className":"Pow","name":"Mathlib.Tactic.FieldSimp.NF.instPowInt","typeNames":["Mathlib.Tactic.FieldSimp.NF","Int"]},{"className":"Pow","name":"Mathlib.Tactic.FieldSimp.NF.instPowNat","typeNames":["Mathlib.Tactic.FieldSimp.NF","Nat"]}],"name":"Mathlib.Tactic.FieldSimp.Lemmas"}