{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instLawfulMonad\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instLawfulMonad</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instLawfulMonad","kind":"instance","line":948,"name":"FreeAddGroup.instLawfulMonad","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L948-L948"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instLawfulMonad\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instLawfulMonad</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instLawfulMonad","kind":"instance","line":948,"name":"FreeGroup.instLawfulMonad","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L948-L957"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.neg_bind\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">neg_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>)</div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.neg_bind","kind":"theorem","line":944,"name":"FreeAddGroup.neg_bind","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L944-L944"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.inv_bind\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">inv_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>)<a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.inv_bind","kind":"theorem","line":944,"name":"FreeGroup.inv_bind","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L944-L946"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.add_bind\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">add_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>)</div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.add_bind","kind":"theorem","line":940,"name":"FreeAddGroup.add_bind","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L940-L940"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mul_bind\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">mul_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>)</div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mul_bind","kind":"theorem","line":940,"name":"FreeGroup.mul_bind","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L940-L942"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.zero_bind\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">zero_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.zero_bind","kind":"theorem","line":936,"name":"FreeAddGroup.zero_bind","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L936-L936"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.one_bind\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">one_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.one_bind","kind":"theorem","line":936,"name":"FreeGroup.one_bind","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L936-L938"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.pure_bind\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">pure_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.pure_bind","kind":"theorem","line":932,"name":"FreeAddGroup.pure_bind","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L932-L932"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.pure_bind\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">pure_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.pure_bind","kind":"theorem","line":932,"name":"FreeGroup.pure_bind","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L932-L934"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_neg\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_neg","kind":"theorem","line":928,"name":"FreeAddGroup.map_neg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L928-L928"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_inv\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>)<a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_inv","kind":"theorem","line":928,"name":"FreeGroup.map_inv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L928-L930"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_add\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_add","kind":"theorem","line":924,"name":"FreeAddGroup.map_add","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L924-L924"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_mul\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_mul","kind":"theorem","line":924,"name":"FreeGroup.map_mul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L924-L926"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_zero\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_zero","kind":"theorem","line":920,"name":"FreeAddGroup.map_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L920-L920"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_one\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_one","kind":"theorem","line":920,"name":"FreeGroup.map_one","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L920-L922"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_pure\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_pure","kind":"theorem","line":916,"name":"FreeAddGroup.map_pure","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L916-L916"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_pure\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_pure","kind":"theorem","line":916,"name":"FreeGroup.map_pure","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L916-L918"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instMonad\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instMonad</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instMonad","kind":"instance","line":910,"name":"FreeAddGroup.instMonad","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L910-L910"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instMonad\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instMonad</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instMonad","kind":"instance","line":910,"name":"FreeGroup.instMonad","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L910-L914"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupUnitEquivInt\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">freeGroupUnitEquivInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></div></div>","info":{"doc":"The bijection between the free group on a singleton, and the integers. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupUnitEquivInt","kind":"def","line":884,"name":"FreeGroup.freeGroupUnitEquivInt","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L884-L904"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupEmptyEquivAddUnit\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupEmptyEquivAddUnit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <a href=\"./Init/Prelude.html#Empty\">Empty</a></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></div></div>","info":{"doc":"The bijection between the additive free group on the empty type, and a type with\none element. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupEmptyEquivAddUnit","kind":"def","line":877,"name":"FreeAddGroup.freeAddGroupEmptyEquivAddUnit","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L877-L878"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupEmptyEquivUnit\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">freeGroupEmptyEquivUnit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <a href=\"./Init/Prelude.html#Empty\">Empty</a></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></div></div>","info":{"doc":"The bijection between the free group on the empty type, and a type with one element. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupEmptyEquivUnit","kind":"def","line":876,"name":"FreeGroup.freeGroupEmptyEquivUnit","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L876-L882"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.map_inv\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">sum</span>.<span class=\"name\">map_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a>.<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum\">sum</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.map_inv","kind":"theorem","line":870,"name":"FreeGroup.sum.map_inv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L870-L872"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.map_one\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">sum</span>.<span class=\"name\">map_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum\">sum</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.map_one","kind":"theorem","line":866,"name":"FreeGroup.sum.map_one","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L866-L868"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.map_mul\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">sum</span>.<span class=\"name\">map_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum\">sum</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum\">sum</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.map_mul","kind":"theorem","line":862,"name":"FreeGroup.sum.map_mul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L862-L864"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.of\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">sum</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.of","kind":"theorem","line":856,"name":"FreeGroup.sum.of","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L856-L858"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">sum_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">mk</a> <span class=\"fn\">L</span>)</span>.<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt; <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\">x</span>.2</span> then <span class=\"fn\"><span class=\"fn\">x</span>.1</span> else <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.1</span></span>)</span> <span class=\"fn\">L</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.sum\">sum</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum_mk","kind":"theorem","line":852,"name":"FreeGroup.sum_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L852-L854"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"If `α` is a group, then any function from `α` to `α` extends uniquely to a homomorphism from the\nfree group over `α` to `α`. This is the additive version of `Prod`. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum","kind":"def","line":845,"name":"FreeGroup.sum","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L845-L848"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_eq_sum_map\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift_eq_sum_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift\">lift</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum\">sum</a> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_eq_sum_map","kind":"theorem","line":837,"name":"FreeAddGroup.lift_eq_sum_map","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L837-L837"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_eq_prod_map\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift_eq_prod_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift\">lift</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod\">prod</a> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_eq_prod_map","kind":"theorem","line":837,"name":"FreeGroup.lift_eq_prod_map","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L837-L839"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum.unique\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">sum</span>.<span class=\"name\">unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum\">sum</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum.unique","kind":"theorem","line":831,"name":"FreeAddGroup.sum.unique","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L831-L831"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod.unique\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">prod</span>.<span class=\"name\">unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod\">prod</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod.unique","kind":"theorem","line":831,"name":"FreeGroup.prod.unique","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L831-L833"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum.of\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">sum</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum\">sum</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum.of","kind":"theorem","line":827,"name":"FreeAddGroup.sum.of","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L827-L827"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod.of\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">prod</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod\">prod</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod.of","kind":"theorem","line":827,"name":"FreeGroup.prod.of","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L827-L829"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">sum_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum\">sum</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">mk</a> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt; <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\">x</span>.2</span> then <span class=\"fn\"><span class=\"fn\">x</span>.1</span> else <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.1</span></span>)</span> <span class=\"fn\">L</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.sum\">sum</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum_mk","kind":"theorem","line":823,"name":"FreeAddGroup.sum_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L823-L823"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">prod_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod\">prod</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">mk</a> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt; <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\">x</span>.2</span> then <span class=\"fn\"><span class=\"fn\">x</span>.1</span> else <span class=\"fn\"><span class=\"fn\">x</span>.1</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></span>)</span> <span class=\"fn\">L</span>)</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/List/Defs.html#List.prod\">prod</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod_mk","kind":"theorem","line":823,"name":"FreeGroup.prod_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L823-L825"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">α</span></div></div>","info":{"doc":"If `α` is an additive group, then any function from `α` to `α` extends uniquely\nto an additive homomorphism from the additive free group over `α` to `α`. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum","kind":"def","line":816,"name":"FreeAddGroup.sum","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L816-L817"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">α</span></div></div>","info":{"doc":"If `α` is a group, then any function from `α` to `α` extends uniquely to a homomorphism from the\nfree group over `α` to `α`. This is the multiplicative version of `FreeGroup.sum`. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod","kind":"def","line":814,"name":"FreeGroup.prod","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L814-L819"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_trans\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupCongr_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">β</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">γ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\">freeAddGroupCongr</a> <span class=\"fn\">e</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.trans\">trans</a></span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\">freeAddGroupCongr</a> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\">freeAddGroupCongr</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.trans\">trans</a></span> <span class=\"fn\">f</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_trans","kind":"theorem","line":803,"name":"FreeAddGroup.freeAddGroupCongr_trans","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L803-L803"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_trans\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">freeGroupCongr_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">β</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">γ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\">freeGroupCongr</a> <span class=\"fn\">e</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv.trans\">trans</a></span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\">freeGroupCongr</a> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\">freeGroupCongr</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.trans\">trans</a></span> <span class=\"fn\">f</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_trans","kind":"theorem","line":803,"name":"FreeGroup.freeGroupCongr_trans","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L803-L806"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_symm\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupCongr_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\">freeAddGroupCongr</a> <span class=\"fn\">e</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.symm\">symm</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\">freeAddGroupCongr</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_symm","kind":"theorem","line":799,"name":"FreeAddGroup.freeAddGroupCongr_symm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L799-L799"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_symm\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">freeGroupCongr_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\">freeGroupCongr</a> <span class=\"fn\">e</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv.symm\">symm</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\">freeGroupCongr</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_symm","kind":"theorem","line":799,"name":"FreeGroup.freeGroupCongr_symm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L799-L801"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_refl\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupCongr_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\">freeAddGroupCongr</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.refl\">Equiv.refl</a> <span class=\"fn\">α</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv.refl\">AddEquiv.refl</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_refl","kind":"theorem","line":795,"name":"FreeAddGroup.freeAddGroupCongr_refl","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L795-L795"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_refl\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">freeGroupCongr_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\">freeGroupCongr</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.refl\">Equiv.refl</a> <span class=\"fn\">α</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv.refl\">MulEquiv.refl</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_refl","kind":"theorem","line":795,"name":"FreeGroup.freeGroupCongr_refl","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L795-L797"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_apply\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupCongr_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\">freeAddGroupCongr</a> <span class=\"fn\">e</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">map</a> <span class=\"fn\">⇑<span class=\"fn\">e</span></span>)</span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_apply","kind":"theorem","line":786,"name":"FreeAddGroup.freeAddGroupCongr_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L786-L786"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_apply\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">freeGroupCongr_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\">freeGroupCongr</a> <span class=\"fn\">e</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">map</a> <span class=\"fn\">⇑<span class=\"fn\">e</span></span>)</span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_apply","kind":"theorem","line":786,"name":"FreeGroup.freeGroupCongr_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L786-L786"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupCongr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Equivalent types give rise to additively equivalent additive free groups. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr","kind":"def","line":786,"name":"FreeAddGroup.freeAddGroupCongr","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L786-L787"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">freeGroupCongr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv\">≃*</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Equivalent types give rise to multiplicatively equivalent free groups.\n\nThe converse can be found in `Mathlib/GroupTheory/FreeGroup/GeneratorEquiv.lean`, as\n`Equiv.ofFreeGroupEquiv`. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr","kind":"def","line":782,"name":"FreeGroup.freeGroupCongr","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L782-L793"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_eq_lift\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map_eq_lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift\">lift</a> (<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">of</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>))</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_eq_lift","kind":"theorem","line":778,"name":"FreeAddGroup.map_eq_lift","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L778-L778"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_eq_lift\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map_eq_lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift\">lift</a> (<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">of</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>))</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_eq_lift","kind":"theorem","line":778,"name":"FreeGroup.map_eq_lift","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L778-L780"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.unique\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.unique","kind":"theorem","line":765,"name":"FreeAddGroup.map.unique","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L765-L765"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.unique\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.unique","kind":"theorem","line":765,"name":"FreeGroup.map.unique","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L765-L776"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.of\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.of","kind":"theorem","line":761,"name":"FreeAddGroup.map.of","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L761-L761"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.of\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.of","kind":"theorem","line":761,"name":"FreeGroup.map.of","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L761-L763"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.comp\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">map</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">map</a> (<span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>))</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.comp","kind":"theorem","line":756,"name":"FreeAddGroup.map.comp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L756-L756"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.comp\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">map</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">map</a> (<span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>))</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.comp","kind":"theorem","line":756,"name":"FreeGroup.map.comp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L756-L759"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.id'\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">id'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">map</a> <span class=\"fn\">fun (<span class=\"fn\">z</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">z</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.id'","kind":"theorem","line":752,"name":"FreeAddGroup.map.id'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L752-L752"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.id'\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">id'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">map</a> <span class=\"fn\">fun (<span class=\"fn\">z</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">z</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.id'","kind":"theorem","line":752,"name":"FreeGroup.map.id'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L752-L754"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.id\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">map</a> <a href=\"./Init/Prelude.html#id\">_root_.id</a>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.id","kind":"theorem","line":749,"name":"FreeAddGroup.map.id","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L749-L749"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.id\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">map</a> <a href=\"./Init/Prelude.html#id\">_root_.id</a>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.id","kind":"theorem","line":749,"name":"FreeGroup.map.id","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L749-L750"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">x</span>.2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span> <span class=\"fn\">L</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.mk","kind":"theorem","line":745,"name":"FreeAddGroup.map.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L745-L745"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">x</span>.2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span> <span class=\"fn\">L</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.mk","kind":"theorem","line":745,"name":"FreeGroup.map.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L745-L747"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Any function from `α` to `β` extends uniquely to an additive group homomorphism\nfrom the additive free group over `α` to the additive free group over `β`. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map","kind":"def","line":736,"name":"FreeAddGroup.map","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L736-L737"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Any function from `α` to `β` extends uniquely to a group homomorphism from the free group over\n`α` to the free group over `β`. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map","kind":"def","line":734,"name":"FreeGroup.map","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L734-L741"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.closure_range_of\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">closure_range_of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Lattice.html#AddSubgroup.closure\">AddSubgroup.closure</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">of</a>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.closure_range_of","kind":"theorem","line":722,"name":"FreeAddGroup.closure_range_of","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L722-L722"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.closure_range_of\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">closure_range_of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Lattice.html#Subgroup.closure\">Subgroup.closure</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">of</a>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></div></div>","info":{"doc":"The generators of `FreeGroup α` generate `FreeGroup α`. That is, the subgroup closure of the\nset of generators equals `⊤`. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.closure_range_of","kind":"theorem","line":720,"name":"FreeGroup.closure_range_of","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L720-L726"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.range_lift_eq_closure\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">range_lift_eq_closure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift\">lift</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Subgroup/Ker.html#AddMonoidHom.range\">range</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Lattice.html#AddSubgroup.closure\">AddSubgroup.closure</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">f</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.range_lift_eq_closure","kind":"theorem","line":713,"name":"FreeAddGroup.range_lift_eq_closure","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L713-L713"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.range_lift_eq_closure\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">range_lift_eq_closure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift\">lift</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Subgroup/Ker.html#MonoidHom.range\">range</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Lattice.html#Subgroup.closure\">Subgroup.closure</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">f</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.range_lift_eq_closure","kind":"theorem","line":713,"name":"FreeGroup.range_lift_eq_closure","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L713-L718"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.range_lift_le\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">range_lift_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Defs.html#AddSubgroup\">AddSubgroup</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift\">lift</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Subgroup/Ker.html#AddMonoidHom.range\">range</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">s</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.range_lift_le","kind":"theorem","line":706,"name":"FreeAddGroup.range_lift_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L706-L706"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.range_lift_le\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">range_lift_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Defs.html#Subgroup\">Subgroup</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift\">lift</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Subgroup/Ker.html#MonoidHom.range\">range</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">s</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.range_lift_le","kind":"theorem","line":706,"name":"FreeGroup.range_lift_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L706-L711"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_of_apply\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift_of_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift\">lift</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">of</a>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_of_apply","kind":"theorem","line":702,"name":"FreeAddGroup.lift_of_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L702-L702"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_of_apply\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift_of_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift\">lift</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">of</a>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_of_apply","kind":"theorem","line":702,"name":"FreeGroup.lift_of_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L702-L704"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_of_eq_id\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift_of_eq_id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift\">lift</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">of</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.id\">AddMonoidHom.id</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_of_eq_id","kind":"theorem","line":698,"name":"FreeAddGroup.lift_of_eq_id","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L698-L698"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_of_eq_id\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift_of_eq_id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift\">lift</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">of</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom.id\">MonoidHom.id</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_of_eq_id","kind":"theorem","line":698,"name":"FreeGroup.lift_of_eq_id","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L698-L700"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_unique\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift\">lift</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_unique","kind":"theorem","line":693,"name":"FreeAddGroup.lift_unique","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L693-L693"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_unique\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift\">lift</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_unique","kind":"theorem","line":693,"name":"FreeGroup.lift_unique","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L693-L696"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_apply_of\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift_apply_of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift\">lift</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_apply_of","kind":"theorem","line":689,"name":"FreeAddGroup.lift_apply_of","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L689-L689"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_apply_of\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift_apply_of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift\">lift</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">of</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_apply_of","kind":"theorem","line":689,"name":"FreeGroup.lift_apply_of","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L689-L691"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift\">lift</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">mk</a> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt; <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\">x</span>.2</span> then <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span> else <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span></span>)</span> <span class=\"fn\">L</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.sum\">sum</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_mk","kind":"theorem","line":685,"name":"FreeAddGroup.lift_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L685-L685"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift\">lift</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">mk</a> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt; <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\">x</span>.2</span> then <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span> else <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span>)</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></span>)</span> <span class=\"fn\">L</span>)</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/List/Defs.html#List.prod\">prod</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_mk","kind":"theorem","line":685,"name":"FreeGroup.lift_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L685-L687"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_symm_apply\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift\">lift</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">g</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">of</a>) <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_symm_apply","kind":"theorem","line":672,"name":"FreeGroup.lift_symm_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L672-L672"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_symm_apply\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift\">lift</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">g</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">of</a>) <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_symm_apply","kind":"theorem","line":672,"name":"FreeAddGroup.lift_symm_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L672-L672"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">β</span>)</div></div>","info":{"doc":"If `β` is an additive group, then any function from `α` to `β` extends uniquely to an\nadditive group homomorphism from the free additive group over `α` to `β` ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift","kind":"def","line":672,"name":"FreeAddGroup.lift","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L672-L674"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">β</span>)</div></div>","info":{"doc":"If `β` is a group, then any function from `α` to `β` extends uniquely to a group homomorphism\nfrom the free group over `α` to `β` ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift","kind":"def","line":670,"name":"FreeGroup.lift","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L670-L681"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.lift\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.lift","kind":"theorem","line":666,"name":"FreeAddGroup.Red.Step.lift","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L666-L666"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.lift\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Lift.aux\">Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Lift.aux\">Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.lift","kind":"theorem","line":666,"name":"FreeGroup.Red.Step.lift","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L666-L668"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Lift</span>.<span class=\"name\">aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Given `f : α → β` with `β` an additive group, the canonical map\n`List (α × Bool) → β` ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux","kind":"def","line":661,"name":"FreeAddGroup.Lift.aux","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L661-L662"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Lift.aux\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Lift</span>.<span class=\"name\">aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Given `f : α → β` with `β` a group, the canonical map `List (α × Bool) → β` ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Lift.aux","kind":"def","line":660,"name":"FreeGroup.Lift.aux","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L660-L664"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of_injective\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">of_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Function.html#Function.Injective\">Function.Injective</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">of</a></span></div></div>","info":{"doc":"The canonical map from the type to the additive free group is an injection. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of_injective","kind":"theorem","line":651,"name":"FreeAddGroup.of_injective","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L651-L651"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of_injective\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">of_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Function.html#Function.Injective\">Function.Injective</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">of</a></span></div></div>","info":{"doc":"The canonical map from the type to the free group is an injection. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of_injective","kind":"theorem","line":650,"name":"FreeGroup.of_injective","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L650-L654"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.exact\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">mk</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">mk</a> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.exact","kind":"theorem","line":644,"name":"FreeAddGroup.Red.exact","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L644-L644"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.exact\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">mk</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">mk</a> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.exact","kind":"theorem","line":644,"name":"FreeGroup.Red.exact","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L644-L648"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.ext_hom_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">ext_hom_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">of</a> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">of</a> <span class=\"fn\">a</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.ext_hom_iff","kind":"theorem","line":633,"name":"FreeGroup.ext_hom_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L633-L633"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.ext_hom_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">ext_hom_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">of</a> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">of</a> <span class=\"fn\">a</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.ext_hom_iff","kind":"theorem","line":633,"name":"FreeAddGroup.ext_hom_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L633-L633"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.ext_hom\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">ext_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">of</a> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">of</a> <span class=\"fn\">a</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></div></div>","info":{"doc":"Two homomorphisms out of a free additive group are equal if they are\nequal on generators. See note [partially-applied ext lemmas]. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.ext_hom","kind":"theorem","line":633,"name":"FreeAddGroup.ext_hom","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L633-L634"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.ext_hom\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">ext_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">of</a> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">of</a> <span class=\"fn\">a</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></div></div>","info":{"doc":"Two homomorphisms out of a free group are equal if they are equal on generators.\n\nSee note [partially-applied ext lemmas]. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.ext_hom","kind":"theorem","line":630,"name":"FreeGroup.ext_hom","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L630-L642"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.induction_on\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">induction_on</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">z</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C1</span> : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">of</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">of</a> <span class=\"fn\">x</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">neg_of</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">x</span>)</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">x</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">add</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">z</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.induction_on","kind":"theorem","line":623,"name":"FreeAddGroup.induction_on","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L623-L623"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.induction_on\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">induction_on</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">z</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C1</span> : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">of</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">of</a> <span class=\"fn\">x</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv_of</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">x</span>)</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">x</span>)</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mul</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">z</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.induction_on","kind":"theorem","line":623,"name":"FreeGroup.induction_on","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L623-L628"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`of` is the canonical injection from the type to the free group over that type\nby sending each element to the equivalence class of the letter that is the element. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of","kind":"def","line":618,"name":"FreeAddGroup.of","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L618-L619"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`of` is the canonical injection from the type to the free group over that type by sending each\nelement to the equivalence class of the letter that is the element. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of","kind":"def","line":616,"name":"FreeGroup.of","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L616-L621"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.nsmul_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">nsmul_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">mk</a> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">mk</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.replicate\">List.replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">L</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.nsmul_mk","kind":"theorem","line":610,"name":"FreeAddGroup.nsmul_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L610-L610"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.pow_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">pow_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">mk</a> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">mk</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.replicate\">List.replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">L</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.pow_mk","kind":"theorem","line":610,"name":"FreeGroup.pow_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L610-L614"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroup\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instAddGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroup","kind":"instance","line":596,"name":"FreeAddGroup.instAddGroup","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L596-L596"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instGroup\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instGroup","kind":"instance","line":596,"name":"FreeGroup.instGroup","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L596-L608"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.red_negRev_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">red_negRev_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">negRev</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">negRev</a> <span class=\"fn\">L₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.red_negRev_iff","kind":"theorem","line":592,"name":"FreeAddGroup.red_negRev_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L592-L592"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.red_invRev_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">red_invRev_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">invRev</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">invRev</a> <span class=\"fn\">L₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.red_invRev_iff","kind":"theorem","line":592,"name":"FreeGroup.red_invRev_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L592-L594"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.step_negRev_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">step_negRev_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.step_negRev_iff","kind":"theorem","line":587,"name":"FreeAddGroup.Red.step_negRev_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L587-L587"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.step_invRev_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">step_invRev_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.step_invRev_iff","kind":"theorem","line":587,"name":"FreeGroup.Red.step_invRev_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L587-L590"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.negRev\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">negRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₂</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.negRev","kind":"theorem","line":583,"name":"FreeAddGroup.Red.negRev","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L583-L583"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.invRev\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">invRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₂</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.invRev","kind":"theorem","line":583,"name":"FreeGroup.Red.invRev","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L583-L585"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.negRev\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">negRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₂</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.negRev","kind":"theorem","line":577,"name":"FreeAddGroup.Red.Step.negRev","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L577-L577"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.invRev\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">invRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₁</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₂</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.invRev","kind":"theorem","line":577,"name":"FreeGroup.Red.Step.invRev","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L577-L581"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.neg_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">neg_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">mk</a> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">mk</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">negRev</a> <span class=\"fn\">L</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.neg_mk","kind":"theorem","line":573,"name":"FreeAddGroup.neg_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L573-L573"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.inv_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">inv_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">mk</a> <span class=\"fn\">L</span>)</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">mk</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">invRev</a> <span class=\"fn\">L</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.inv_mk","kind":"theorem","line":573,"name":"FreeGroup.inv_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L573-L575"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instNeg\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instNeg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instNeg","kind":"instance","line":565,"name":"FreeAddGroup.instNeg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L565-L565"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instInv\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instInv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inv\">Inv</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instInv","kind":"instance","line":565,"name":"FreeGroup.instInv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L565-L571"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_bijective\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev_bijective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Bijective\">Function.Bijective</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">negRev</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_bijective","kind":"theorem","line":561,"name":"FreeAddGroup.negRev_bijective","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L561-L561"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_bijective\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev_bijective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Bijective\">Function.Bijective</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">invRev</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_bijective","kind":"theorem","line":561,"name":"FreeGroup.invRev_bijective","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L561-L563"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_surjective\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Function.html#Function.Surjective\">Function.Surjective</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">negRev</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_surjective","kind":"theorem","line":557,"name":"FreeAddGroup.negRev_surjective","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L557-L557"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_surjective\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Function.html#Function.Surjective\">Function.Surjective</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">invRev</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_surjective","kind":"theorem","line":557,"name":"FreeGroup.invRev_surjective","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L557-L559"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_injective\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Function.html#Function.Injective\">Function.Injective</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">negRev</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_injective","kind":"theorem","line":553,"name":"FreeAddGroup.negRev_injective","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L553-L553"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_injective\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Function.html#Function.Injective\">Function.Injective</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">invRev</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_injective","kind":"theorem","line":553,"name":"FreeGroup.invRev_injective","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L553-L555"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_involutive\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev_involutive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.Involutive\">Function.Involutive</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">negRev</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_involutive","kind":"theorem","line":550,"name":"FreeAddGroup.negRev_involutive","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L550-L550"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_involutive\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev_involutive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.Involutive\">Function.Involutive</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">invRev</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_involutive","kind":"theorem","line":550,"name":"FreeGroup.invRev_involutive","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L550-L551"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_cons\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">negRev</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">negRev</a> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">negRev</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_cons","kind":"theorem","line":546,"name":"FreeAddGroup.negRev_cons","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L546-L546"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_cons\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">invRev</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">invRev</a> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">invRev</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_cons","kind":"theorem","line":546,"name":"FreeGroup.invRev_cons","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L546-L548"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_append\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">negRev</a> (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">negRev</a> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">negRev</a> <span class=\"fn\">L₁</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_append","kind":"theorem","line":543,"name":"FreeAddGroup.negRev_append","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L543-L543"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_append\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">invRev</a> (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">invRev</a> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">invRev</a> <span class=\"fn\">L₁</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_append","kind":"theorem","line":543,"name":"FreeGroup.invRev_append","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L543-L544"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_empty\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">negRev</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_empty","kind":"theorem","line":539,"name":"FreeAddGroup.negRev_empty","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L539-L539"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_empty\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">invRev</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_empty","kind":"theorem","line":539,"name":"FreeGroup.invRev_empty","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L539-L541"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_negRev\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev_negRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">negRev</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">negRev</a> <span class=\"fn\">L₁</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₁</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_negRev","kind":"theorem","line":535,"name":"FreeAddGroup.negRev_negRev","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L535-L535"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_invRev\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev_invRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">invRev</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">invRev</a> <span class=\"fn\">L₁</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₁</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_invRev","kind":"theorem","line":535,"name":"FreeGroup.invRev_invRev","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L535-L537"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_length\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev_length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">negRev</a> <span class=\"fn\">L₁</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_length","kind":"theorem","line":532,"name":"FreeAddGroup.negRev_length","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L532-L532"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_length\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev_length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">invRev</a> <span class=\"fn\">L₁</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_length","kind":"theorem","line":532,"name":"FreeGroup.invRev_length","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L532-L533"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></div></div>","info":{"doc":"Transform a word representing a free group element into a word representing its\nnegative. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev","kind":"def","line":527,"name":"FreeAddGroup.negRev","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L527-L528"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></div></div>","info":{"doc":"Transform a word representing a free group element into a word representing its inverse. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev","kind":"def","line":526,"name":"FreeGroup.invRev","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L526-L530"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.add_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">add_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">mk</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">mk</a> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">mk</a> (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.add_mk","kind":"theorem","line":522,"name":"FreeAddGroup.add_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L522-L522"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mul_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">mul_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">mk</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">mk</a> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">mk</a> (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mul_mk","kind":"theorem","line":522,"name":"FreeGroup.mul_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L522-L524"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAdd\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAdd","kind":"instance","line":513,"name":"FreeAddGroup.instAdd","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L513-L513"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instMul\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instMul","kind":"instance","line":513,"name":"FreeGroup.instMul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L513-L520"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instUniqueOfIsEmpty\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instUniqueOfIsEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instUniqueOfIsEmpty","kind":"instance","line":510,"name":"FreeAddGroup.instUniqueOfIsEmpty","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L510-L510"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instUniqueOfIsEmpty\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instUniqueOfIsEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instUniqueOfIsEmpty","kind":"instance","line":510,"name":"FreeGroup.instUniqueOfIsEmpty","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L510-L511"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instInhabited\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instInhabited","kind":"instance","line":506,"name":"FreeAddGroup.instInhabited","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L506-L506"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instInhabited\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instInhabited","kind":"instance","line":506,"name":"FreeGroup.instInhabited","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L506-L508"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.zero_eq_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">zero_eq_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">mk</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.zero_eq_mk","kind":"theorem","line":502,"name":"FreeAddGroup.zero_eq_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L502-L502"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.one_eq_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">one_eq_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">mk</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.one_eq_mk","kind":"theorem","line":502,"name":"FreeGroup.one_eq_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L502-L504"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instZero\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instZero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instZero","kind":"instance","line":498,"name":"FreeAddGroup.instZero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L498-L498"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instOne\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instOne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#One\">One</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instOne","kind":"instance","line":498,"name":"FreeGroup.instOne","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L498-L500"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_map_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">quot_map_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">Relator.LiftFun</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Red.Step</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Red.Step</a> <span class=\"fn\">f</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Quot.html#Quot.map\">Quot.map</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">mk</a> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">mk</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">L</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_map_mk","kind":"theorem","line":493,"name":"FreeAddGroup.quot_map_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L493-L493"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_map_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">quot_map_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">Relator.LiftFun</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Red.Step</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Red.Step</a> <span class=\"fn\">f</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Quot.html#Quot.map\">Quot.map</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">mk</a> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">mk</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">L</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_map_mk","kind":"theorem","line":493,"name":"FreeGroup.quot_map_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L493-L496"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_liftOn_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">quot_liftOn_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ (<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quot.liftOn\">Quot.liftOn</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">mk</a> <span class=\"fn\">L</span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">H</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_liftOn_mk","kind":"theorem","line":487,"name":"FreeAddGroup.quot_liftOn_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L487-L487"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_liftOn_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">quot_liftOn_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ (<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quot.liftOn\">Quot.liftOn</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">mk</a> <span class=\"fn\">L</span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">H</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_liftOn_mk","kind":"theorem","line":487,"name":"FreeGroup.quot_liftOn_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L487-L490"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_lift_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">quot_lift_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ (<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.lift\">Quot.lift</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">mk</a> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_lift_mk","kind":"theorem","line":482,"name":"FreeAddGroup.quot_lift_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L482-L482"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_lift_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">quot_lift_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ (<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.lift\">Quot.lift</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">mk</a> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_lift_mk","kind":"theorem","line":482,"name":"FreeGroup.quot_lift_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L482-L485"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_mk_eq_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">quot_mk_eq_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Red.Step</a> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">mk</a> <span class=\"fn\">L</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_mk_eq_mk","kind":"theorem","line":478,"name":"FreeAddGroup.quot_mk_eq_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L478-L478"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_mk_eq_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">quot_mk_eq_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Red.Step</a> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">mk</a> <span class=\"fn\">L</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_mk_eq_mk","kind":"theorem","line":478,"name":"FreeGroup.quot_mk_eq_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L478-L480"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"The canonical map from `List (α × Bool)` to the free additive group on `α`. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk","kind":"def","line":474,"name":"FreeAddGroup.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L474-L474"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"The canonical map from `List (α × Bool)` to the free group on `α`. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk","kind":"def","line":473,"name":"FreeGroup.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L473-L476"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\"><span class=\"name\">FreeAddGroup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"If `α` is a type, then `FreeAddGroup α` is the free additive group generated by `α`.\nThis is a group equipped with a function `FreeAddGroup.of : α → FreeAddGroup α` which has\nthe following universal property: if `G` is any group, and `f : α → G` is any function,\nthen this function is the composite of `FreeAddGroup.of` and a unique group homomorphism\n`FreeAddGroup.lift f : FreeAddGroup α →+ G`.\n\nA typical element of `FreeAddGroup α` is a formal sum of\nelements of `α` and their formal inverses, quotient by reduction.\nFor example if `x` and `y` are terms of type `α` then `-x + y + y + x + -y` is a\n\"typical\" element of `FreeAddGroup α`. In particular if `α` is empty\nthen `FreeAddGroup α` is isomorphic to the trivial group, and if `α` has one term\nthen `FreeAddGroup α` is isomorphic to `ℤ`.\nIf `α` has two or more terms then `FreeAddGroup α` is not commutative. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup","kind":"def","line":452,"name":"FreeAddGroup","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L452-L465"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\"><span class=\"name\">FreeGroup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"If `α` is a type, then `FreeGroup α` is the free group generated by `α`.\nThis is a group equipped with a function `FreeGroup.of : α → FreeGroup α` which has\nthe following universal property: if `G` is any group, and `f : α → G` is any function,\nthen this function is the composite of `FreeGroup.of` and a unique group homomorphism\n`FreeGroup.lift f : FreeGroup α →* G`.\n\nA typical element of `FreeGroup α` is a formal product of\nelements of `α` and their formal inverses, quotient by reduction.\nFor example if `x` and `y` are terms of type `α` then `x⁻¹ * y * y * x * y⁻¹` is a\n\"typical\" element of `FreeGroup α`. In particular if `α` is empty\nthen `FreeGroup α` is isomorphic to the trivial group, and if `α` has one term\nthen `FreeGroup α` is isomorphic to `Multiplicative ℤ`.\nIf `α` has two or more terms then `FreeGroup α` is not commutative.\n","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup","kind":"def","line":437,"name":"FreeGroup","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L437-L467"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced.infix\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">IsReduced</span>.<span class=\"name\">infix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced\">IsReduced</a> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">L₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">L₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced\">IsReduced</a> <span class=\"fn\">L₁</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced.infix","kind":"theorem","line":431,"name":"FreeAddGroup.IsReduced.infix","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L431-L431"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced.infix\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">IsReduced</span>.<span class=\"name\">infix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced\">IsReduced</a> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">L₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">L₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced\">IsReduced</a> <span class=\"fn\">L₁</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced.infix","kind":"theorem","line":431,"name":"FreeGroup.IsReduced.infix","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L431-L432"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced.append_overlap\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">IsReduced</span>.<span class=\"name\">append_overlap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂ </span><span class=\"fn\">L₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced\">IsReduced</a> (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced\">IsReduced</a> (<span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₃</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">L₂</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced\">IsReduced</a> (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₃</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced.append_overlap","kind":"theorem","line":426,"name":"FreeAddGroup.IsReduced.append_overlap","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L426-L426"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced.append_overlap\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">IsReduced</span>.<span class=\"name\">append_overlap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂ </span><span class=\"fn\">L₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced\">IsReduced</a> (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced\">IsReduced</a> (<span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₃</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">L₂</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced\">IsReduced</a> (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₃</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced.append_overlap","kind":"theorem","line":426,"name":"FreeGroup.IsReduced.append_overlap","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L426-L429"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced.red_iff_eq\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">IsReduced</span>.<span class=\"name\">red_iff_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced\">IsReduced</a> <span class=\"fn\">L₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₁</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced.red_iff_eq","kind":"theorem","line":422,"name":"FreeAddGroup.IsReduced.red_iff_eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L422-L422"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced.red_iff_eq\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">IsReduced</span>.<span class=\"name\">red_iff_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced\">IsReduced</a> <span class=\"fn\">L₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₁</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced.red_iff_eq","kind":"theorem","line":422,"name":"FreeGroup.IsReduced.red_iff_eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L422-L424"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.isReduced_iff_not_step\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">isReduced_iff_not_step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced\">IsReduced</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>), <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.isReduced_iff_not_step","kind":"theorem","line":417,"name":"FreeAddGroup.isReduced_iff_not_step","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L417-L417"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.isReduced_iff_not_step\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">isReduced_iff_not_step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced\">IsReduced</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>), <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.isReduced_iff_not_step","kind":"theorem","line":417,"name":"FreeGroup.isReduced_iff_not_step","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L417-L420"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced.of_forall_not_step\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">IsReduced</span>.<span class=\"name\">of_forall_not_step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>), <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced\">IsReduced</a> <span class=\"fn\">L₁</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced.of_forall_not_step","kind":"theorem","line":403,"name":"FreeAddGroup.IsReduced.of_forall_not_step","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L403-L403"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced.of_forall_not_step\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">IsReduced</span>.<span class=\"name\">of_forall_not_step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>), <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced\">IsReduced</a> <span class=\"fn\">L₁</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced.of_forall_not_step","kind":"theorem","line":403,"name":"FreeGroup.IsReduced.of_forall_not_step","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L403-L415"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced.not_step\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">IsReduced</span>.<span class=\"name\">not_step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced\">IsReduced</a> <span class=\"fn\">L₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced.not_step","kind":"theorem","line":398,"name":"FreeAddGroup.IsReduced.not_step","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L398-L398"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced.not_step\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">IsReduced</span>.<span class=\"name\">not_step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced\">IsReduced</a> <span class=\"fn\">L₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced.not_step","kind":"theorem","line":398,"name":"FreeGroup.IsReduced.not_step","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L398-L401"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.isReduced_cons_cons\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">isReduced_cons_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced\">IsReduced</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.1</span> → <span class=\"fn\"><span class=\"fn\">a</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.2</span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced\">IsReduced</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.isReduced_cons_cons","kind":"theorem","line":394,"name":"FreeAddGroup.isReduced_cons_cons","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L394-L394"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.isReduced_cons_cons\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">isReduced_cons_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced\">IsReduced</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.1</span> → <span class=\"fn\"><span class=\"fn\">a</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.2</span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced\">IsReduced</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.isReduced_cons_cons","kind":"theorem","line":394,"name":"FreeGroup.isReduced_cons_cons","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L394-L396"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced.singleton\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">IsReduced</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced\">IsReduced</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced.singleton","kind":"theorem","line":391,"name":"FreeAddGroup.IsReduced.singleton","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L391-L391"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced.singleton\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">IsReduced</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced\">IsReduced</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced.singleton","kind":"theorem","line":391,"name":"FreeGroup.IsReduced.singleton","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L391-L392"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced.nil\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">IsReduced</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced\">IsReduced</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced.nil","kind":"theorem","line":388,"name":"FreeAddGroup.IsReduced.nil","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L388-L388"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced.nil\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">IsReduced</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced\">IsReduced</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced.nil","kind":"theorem","line":388,"name":"FreeGroup.IsReduced.nil","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L388-L389"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">IsReduced</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Predicate asserting the word `L` admits no reduction steps,\ni.e., no two neighboring elements of the word cancel. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.IsReduced","kind":"def","line":380,"name":"FreeAddGroup.IsReduced","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L380-L381"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">IsReduced</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Predicate asserting that the word `L` admits no reduction steps, i.e., no two neighboring\nelements of the word cancel. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.IsReduced","kind":"def","line":378,"name":"FreeGroup.IsReduced","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L378-L382"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.eqvGen_step_iff_join_red\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">eqvGen_step_iff_join_red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.EqvGen\">Relation.EqvGen</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.eqvGen_step_iff_join_red","kind":"theorem","line":367,"name":"FreeAddGroup.eqvGen_step_iff_join_red","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L367-L367"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.eqvGen_step_iff_join_red\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">eqvGen_step_iff_join_red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.EqvGen\">Relation.EqvGen</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.eqvGen_step_iff_join_red","kind":"theorem","line":367,"name":"FreeGroup.eqvGen_step_iff_join_red","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L367-L374"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.join_red_of_step\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">join_red_of_step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.join_red_of_step","kind":"theorem","line":363,"name":"FreeAddGroup.join_red_of_step","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L363-L363"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.join_red_of_step\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">join_red_of_step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.join_red_of_step","kind":"theorem","line":363,"name":"FreeGroup.join_red_of_step","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L363-L365"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.equivalence_join_red\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">equivalence_join_red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Equivalence\">Equivalence</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.equivalence_join_red","kind":"theorem","line":356,"name":"FreeAddGroup.equivalence_join_red","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L356-L356"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.equivalence_join_red\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">equivalence_join_red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Equivalence\">Equivalence</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.equivalence_join_red","kind":"theorem","line":356,"name":"FreeGroup.equivalence_join_red","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L356-L361"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.antisymm\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁₂</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂₁</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₂</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.antisymm","kind":"theorem","line":350,"name":"FreeAddGroup.Red.antisymm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L350-L350"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.antisymm\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁₂</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂₁</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₂</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.antisymm","kind":"theorem","line":350,"name":"FreeGroup.Red.antisymm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L350-L352"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.length\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">L₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₂</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.length","kind":"theorem","line":341,"name":"FreeAddGroup.Red.length","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L341-L341"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.length\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">L₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₂</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.length","kind":"theorem","line":341,"name":"FreeGroup.Red.length","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L341-L348"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.sizeof_of_step\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">sizeof_of_step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">L₁</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.sizeof_of_step","kind":"theorem","line":329,"name":"FreeAddGroup.Red.sizeof_of_step","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L329-L329"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.sizeof_of_step\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">sizeof_of_step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">L₁</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.sizeof_of_step","kind":"theorem","line":329,"name":"FreeGroup.Red.sizeof_of_step","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L329-L339"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.length_le\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">length_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">L₂</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">L₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.length_le","kind":"theorem","line":324,"name":"FreeAddGroup.Red.length_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L324-L324"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.length_le\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">length_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">L₂</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">L₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.length_le","kind":"theorem","line":324,"name":"FreeGroup.Red.length_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L324-L326"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.sublist\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₂</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">L₁</span></span></span></div></div>","info":{"doc":"If `w₁ w₂` are words such that `w₁` reduces to `w₂`, then `w₂` is a sublist of `w₁`. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.sublist","kind":"theorem","line":315,"name":"FreeAddGroup.Red.sublist","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L315-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.sublist\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₂</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">L₁</span></span></span></div></div>","info":{"doc":"If `w₁ w₂` are words such that `w₁` reduces to `w₂`, then `w₂` is a sublist of `w₁`. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.sublist","kind":"theorem","line":314,"name":"FreeGroup.Red.sublist","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L314-L322"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.sublist\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₂</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">L₁</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.sublist","kind":"theorem","line":310,"name":"FreeAddGroup.Red.Step.sublist","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L310-L310"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.sublist\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₂</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">L₁</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.sublist","kind":"theorem","line":310,"name":"FreeGroup.Red.Step.sublist","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L310-L312"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.neg_of_red_of_ne\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">neg_of_red_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x1</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x2</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b2</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H1</span> : <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b1</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x2</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H2</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> (<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b1</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>) (<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x2</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₁</span> (<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b1</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x2</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>)</span></div></div>","info":{"doc":"If `x` and `y` are distinct letters and `w₁ w₂` are words such that `x + w₁`\nreduces to `y + w₂`, then `w₁` reduces to `-x + y + w₂`. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.neg_of_red_of_ne","kind":"theorem","line":292,"name":"FreeAddGroup.Red.neg_of_red_of_ne","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L292-L293"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.inv_of_red_of_ne\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">inv_of_red_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x1</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x2</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b2</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H1</span> : <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b1</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x2</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H2</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> (<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b1</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>) (<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x2</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₁</span> (<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b1</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x2</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>)</span></div></div>","info":{"doc":"If `x` and `y` are distinct letters and `w₁ w₂` are words such that `xw₁` reduces to `yw₂`, then\n`w₁` reduces to `x⁻¹yw₂`. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.inv_of_red_of_ne","kind":"theorem","line":290,"name":"FreeGroup.Red.inv_of_red_of_ne","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L290-L306"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.red_iff_addIrreducible\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">red_iff_addIrreducible</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x1</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x2</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b2</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b1</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x2</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b1</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Init/Prelude.html#List.cons\">,</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x2</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Init/Prelude.html#List.cons\">]</a> <span class=\"fn\">L</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b1</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Init/Prelude.html#List.cons\">,</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x2</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Init/Prelude.html#List.cons\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.red_iff_addIrreducible","kind":"theorem","line":278,"name":"FreeAddGroup.Red.red_iff_addIrreducible","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L278-L278"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.red_iff_irreducible\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">red_iff_irreducible</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x1</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x2</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b2</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b1</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x2</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b1</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Init/Prelude.html#List.cons\">,</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x2</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Init/Prelude.html#List.cons\">]</a> <span class=\"fn\">L</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b1</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Init/Prelude.html#List.cons\">,</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x2</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Init/Prelude.html#List.cons\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.red_iff_irreducible","kind":"theorem","line":278,"name":"FreeGroup.Red.red_iff_irreducible","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L278-L288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.cons_nil_iff_singleton\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">cons_nil_iff_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> (<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span>) <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#List.cons\">[</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Init/Prelude.html#List.cons\">]</a></span></div></div>","info":{"doc":"If `x` is a letter and `w` is a word such that `x + w` reduces to the empty word, then `w`\nreduces to `-x`. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.cons_nil_iff_singleton","kind":"theorem","line":264,"name":"FreeAddGroup.Red.cons_nil_iff_singleton","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L264-L266"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.cons_nil_iff_singleton\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">cons_nil_iff_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> (<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span>) <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#List.cons\">[</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Init/Prelude.html#List.cons\">]</a></span></div></div>","info":{"doc":"If `x` is a letter and `w` is a word such that `xw` reduces to the empty word, then `w` reduces\nto `x⁻¹` ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.cons_nil_iff_singleton","kind":"theorem","line":262,"name":"FreeGroup.Red.cons_nil_iff_singleton","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L262-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.singleton_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">singleton_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#List.cons\">]</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#List.cons\">]</a></div></div>","info":{"doc":"A letter only reduces to itself. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.singleton_iff","kind":"theorem","line":258,"name":"FreeAddGroup.Red.singleton_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L258-L258"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.singleton_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">singleton_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#List.cons\">]</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#List.cons\">]</a></div></div>","info":{"doc":"A letter only reduces to itself. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.singleton_iff","kind":"theorem","line":257,"name":"FreeGroup.Red.singleton_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L257-L260"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.nil_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">nil_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">L</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"The empty word `[]` only reduces to itself. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.nil_iff","kind":"theorem","line":253,"name":"FreeAddGroup.Red.nil_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L253-L253"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.nil_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">nil_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">L</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"The empty word `[]` only reduces to itself. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.nil_iff","kind":"theorem","line":252,"name":"FreeGroup.Red.nil_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L252-L255"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.to_append_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">to_append_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L </span><span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L</span> (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">L₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>) (<span class=\"fn\">L₄</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>), <span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₃</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₄</span> <span class=\"fn\">L₂</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.to_append_iff","kind":"theorem","line":231,"name":"FreeAddGroup.Red.to_append_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L231-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.to_append_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">to_append_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L </span><span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L</span> (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">L₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>) (<span class=\"fn\">L₄</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>), <span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₃</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₄</span> <span class=\"fn\">L₂</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.to_append_iff","kind":"theorem","line":231,"name":"FreeGroup.Red.to_append_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L231-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.append_append\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">append_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂ </span><span class=\"fn\">L₃ </span><span class=\"fn\">L₄</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₄</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>) (<span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.append_append","kind":"theorem","line":227,"name":"FreeAddGroup.Red.append_append","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L227-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.append_append\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">append_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂ </span><span class=\"fn\">L₃ </span><span class=\"fn\">L₄</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₄</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>) (<span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.append_append","kind":"theorem","line":227,"name":"FreeGroup.Red.append_append","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L227-L229"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.append_append_left_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">append_append_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> (<span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₁</span>) (<span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.append_append_left_iff","kind":"theorem","line":222,"name":"FreeAddGroup.Red.append_append_left_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L222-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.append_append_left_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">append_append_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> (<span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₁</span>) (<span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.append_append_left_iff","kind":"theorem","line":222,"name":"FreeGroup.Red.append_append_left_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L222-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.cons_cons_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">cons_cons_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>) (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.cons_cons_iff","kind":"theorem","line":201,"name":"FreeAddGroup.Red.cons_cons_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L201-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.cons_cons_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">cons_cons_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>) (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.cons_cons_iff","kind":"theorem","line":201,"name":"FreeGroup.Red.cons_cons_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L201-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.cons_cons\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">cons_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>) (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.cons_cons","kind":"theorem","line":197,"name":"FreeAddGroup.Red.cons_cons","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L197-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.cons_cons\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">cons_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>) (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.cons_cons","kind":"theorem","line":197,"name":"FreeGroup.Red.cons_cons","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L197-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.church_rosser\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">church_rosser</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂ </span><span class=\"fn\">L₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₃</span></span></span></span></div></div>","info":{"doc":"**Church-Rosser theorem** for word reduction: If `w1 w2 w3` are words such that `w1` reduces\nto `w2` and `w3` respectively, then there is a word `w4` such that `w2` and `w3` reduce to `w4`\nrespectively. This is also known as Newman's diamond lemma. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.church_rosser","kind":"theorem","line":187,"name":"FreeAddGroup.Red.church_rosser","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L187-L190"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.church_rosser\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">church_rosser</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂ </span><span class=\"fn\">L₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₃</span></span></span></span></div></div>","info":{"doc":"**Church-Rosser theorem** for word reduction: If `w1 w2 w3` are words such that `w1` reduces\nto `w2` and `w3` respectively, then there is a word `w4` such that `w2` and `w3` reduce to `w4`\nrespectively. This is also known as Newman's diamond lemma. ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.church_rosser","kind":"theorem","line":184,"name":"FreeGroup.Red.church_rosser","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L184-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.to_red\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">to_red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.to_red","kind":"theorem","line":180,"name":"FreeAddGroup.Red.Step.to_red","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L180-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.to_red\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">to_red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.to_red","kind":"theorem","line":180,"name":"FreeGroup.Red.Step.to_red","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L180-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.diamond\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">diamond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂ </span><span class=\"fn\">L₃ </span><span class=\"fn\">L₄</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₄</span></span> → <span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₂</span> → <span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₄</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">L₅</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>), <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> <span class=\"fn\">L₃</span> <span class=\"fn\">L₅</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> <span class=\"fn\">L₄</span> <span class=\"fn\">L₅</span></span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.diamond","kind":"theorem","line":174,"name":"FreeAddGroup.Red.Step.diamond","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L174-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.diamond\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">diamond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂ </span><span class=\"fn\">L₃ </span><span class=\"fn\">L₄</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₄</span></span> → <span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₂</span> → <span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₄</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">L₅</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>), <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> <span class=\"fn\">L₃</span> <span class=\"fn\">L₅</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> <span class=\"fn\">L₄</span> <span class=\"fn\">L₅</span></span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.diamond","kind":"theorem","line":174,"name":"FreeGroup.Red.Step.diamond","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L174-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.diamond_aux\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">diamond_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂ </span><span class=\"fn\">L₃ </span><span class=\"fn\">L₄</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x1</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x2</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b2</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b1</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b1</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x2</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x2</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₄</span> →\n  <span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">L₅</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>), <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>) <span class=\"fn\">L₅</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> (<span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span>) <span class=\"fn\">L₅</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.diamond_aux","kind":"theorem","line":156,"name":"FreeAddGroup.Red.Step.diamond_aux","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L156-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.diamond_aux\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">diamond_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂ </span><span class=\"fn\">L₃ </span><span class=\"fn\">L₄</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x1</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x2</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b2</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b1</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b1</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x2</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x2</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₄</span> →\n  <span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (<span class=\"fn\">L₅</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>), <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>) <span class=\"fn\">L₅</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> (<span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span>) <span class=\"fn\">L₅</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.diamond_aux","kind":"theorem","line":156,"name":"FreeGroup.Red.Step.diamond_aux","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L156-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_left_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">append_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> (<span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₁</span>) (<span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_left_iff","kind":"theorem","line":151,"name":"FreeAddGroup.Red.Step.append_left_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L151-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.append_left_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">append_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> (<span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₁</span>) (<span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.append_left_iff","kind":"theorem","line":151,"name":"FreeGroup.Red.Step.append_left_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L151-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_cons_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_cons_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>) (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_cons_iff","kind":"theorem","line":147,"name":"FreeAddGroup.Red.Step.cons_cons_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L147-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_cons_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_cons_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>) (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_cons_iff","kind":"theorem","line":147,"name":"FreeGroup.Red.Step.cons_cons_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L147-L149"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.not_step_singleton\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">not_step_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">p</span><a href=\"./Init/Prelude.html#List.cons\">]</a> <span class=\"fn\">L</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.not_step_singleton","kind":"theorem","line":143,"name":"FreeAddGroup.Red.not_step_singleton","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L143-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.not_step_singleton\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">not_step_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">p</span><a href=\"./Init/Prelude.html#List.cons\">]</a> <span class=\"fn\">L</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.not_step_singleton","kind":"theorem","line":143,"name":"FreeGroup.Red.not_step_singleton","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L143-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_left_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> (<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>) <span class=\"fn\">L₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(∃ (<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>), <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_left_iff","kind":"theorem","line":133,"name":"FreeAddGroup.Red.Step.cons_left_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L133-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_left_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> (<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>) <span class=\"fn\">L₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(∃ (<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>), <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_left_iff","kind":"theorem","line":133,"name":"FreeGroup.Red.Step.cons_left_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L133-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.not_step_nil\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">not_step_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">L</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.not_step_nil","kind":"theorem","line":126,"name":"FreeAddGroup.Red.not_step_nil","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L126-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.not_step_nil\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">not_step_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">L</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.not_step_nil","kind":"theorem","line":126,"name":"FreeGroup.Red.not_step_nil","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L126-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_right\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">append_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂ </span><span class=\"fn\">L₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₃</span>) (<span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₃</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_right","kind":"theorem","line":122,"name":"FreeAddGroup.Red.Step.append_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L122-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.append_right\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">append_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂ </span><span class=\"fn\">L₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₃</span>) (<span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₃</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.append_right","kind":"theorem","line":122,"name":"FreeGroup.Red.Step.append_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L122-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>) (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons","kind":"theorem","line":118,"name":"FreeAddGroup.Red.Step.cons","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L118-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span>) (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons","kind":"theorem","line":118,"name":"FreeGroup.Red.Step.cons","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L118-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_left\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">append_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂ </span><span class=\"fn\">L₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₃</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>) (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₃</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_left","kind":"theorem","line":114,"name":"FreeAddGroup.Red.Step.append_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L114-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.append_left\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">append_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂ </span><span class=\"fn\">L₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₃</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>) (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₃</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.append_left","kind":"theorem","line":114,"name":"FreeGroup.Red.Step.append_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L114-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_not_rev\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_not_rev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> (<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span>) <span class=\"fn\">L</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_not_rev","kind":"theorem","line":110,"name":"FreeAddGroup.Red.Step.cons_not_rev","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_not_rev\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_not_rev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> (<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span>) <span class=\"fn\">L</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_not_rev","kind":"theorem","line":110,"name":"FreeGroup.Red.Step.cons_not_rev","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L110-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_not\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> (<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span>) <span class=\"fn\">L</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_not","kind":"theorem","line":106,"name":"FreeAddGroup.Red.Step.cons_not","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L106-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_not\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> (<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span>) <span class=\"fn\">L</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_not","kind":"theorem","line":106,"name":"FreeGroup.Red.Step.cons_not","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L106-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.not_rev\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">not_rev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>) (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.not_rev","kind":"theorem","line":102,"name":"FreeAddGroup.Red.Step.not_rev","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L102-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.not_rev\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">not_rev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>) (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.not_rev","kind":"theorem","line":102,"name":"FreeGroup.Red.Step.not_rev","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L102-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.length\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\">L₂</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></span></div></div>","info":{"doc":"Predicate asserting that the word `w₁` can be reduced to `w₂` in one step, i.e.\nthere are words `w₃ w₄` and letter `x` such that `w₁ = w₃ + x + (-x) + w₄` and `w₂ = w₃w₄` ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.length","kind":"theorem","line":97,"name":"FreeAddGroup.Red.Step.length","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L97-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.length\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\">L₂</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₁</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></span></div></div>","info":{"doc":"Predicate asserting that the word `w₁` can be reduced to `w₂` in one step, i.e. there are words\n`w₃ w₄` and letter `x` such that `w₁ = w₃xx⁻¹w₄` and `w₂ = w₃w₄` ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.length","kind":"theorem","line":95,"name":"FreeGroup.Red.Step.length","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L95-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.trans\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂ </span><span class=\"fn\">L₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₃</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.trans","kind":"theorem","line":89,"name":"FreeAddGroup.Red.trans","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L89-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.trans\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂ </span><span class=\"fn\">L₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₃</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.trans","kind":"theorem","line":89,"name":"FreeGroup.Red.trans","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L89-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.refl\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">Red</a> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.refl","kind":"theorem","line":85,"name":"FreeAddGroup.Red.refl","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L85-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.refl\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">Red</a> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.refl","kind":"theorem","line":85,"name":"FreeGroup.Red.refl","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L85-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"Reflexive-transitive closure of `Red.Step` ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red","kind":"def","line":81,"name":"FreeAddGroup.Red","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"Reflexive-transitive closure of `Red.Step` ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red","kind":"def","line":80,"name":"FreeGroup.Red","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L80-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.not\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">Step</a> (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>) (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.not","kind":"ctor","line":72,"name":"FreeGroup.Red.Step.not","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L72-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"Reduction step for the multiplicative free group relation: `w * x * x⁻¹ * v ~> w * v` ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step","kind":"inductive","line":69,"name":"FreeGroup.Red.Step","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L69-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.not\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L₁ </span><span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">Step</a> (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span>) (<span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.not","kind":"ctor","line":65,"name":"FreeAddGroup.Red.Step.not","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L65-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"Reduction step for the additive free group relation: `w + x + (-x) + v ~> w + v` ","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step","kind":"inductive","line":63,"name":"FreeAddGroup.Red.Step","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/GroupTheory/FreeGroup/Basic.lean#L63-L65"}}],"imports":["Init","Mathlib.Algebra.BigOperators.Group.List.Basic","Mathlib.Algebra.Group.Pi.Basic","Mathlib.Algebra.Group.Subgroup.Ker","Mathlib.Data.List.Chain"],"instances":[{"className":"One","name":"FreeGroup.instOne","typeNames":["FreeGroup"]},{"className":"Zero","name":"FreeAddGroup.instZero","typeNames":["FreeAddGroup"]},{"className":"Inhabited","name":"FreeGroup.instInhabited","typeNames":["FreeGroup"]},{"className":"Inhabited","name":"FreeAddGroup.instInhabited","typeNames":["FreeAddGroup"]},{"className":"Unique","name":"FreeGroup.instUniqueOfIsEmpty","typeNames":["FreeGroup"]},{"className":"Unique","name":"FreeAddGroup.instUniqueOfIsEmpty","typeNames":["FreeAddGroup"]},{"className":"Mul","name":"FreeGroup.instMul","typeNames":["FreeGroup"]},{"className":"Add","name":"FreeAddGroup.instAdd","typeNames":["FreeAddGroup"]},{"className":"Inv","name":"FreeGroup.instInv","typeNames":["FreeGroup"]},{"className":"Neg","name":"FreeAddGroup.instNeg","typeNames":["FreeAddGroup"]},{"className":"Group","name":"FreeGroup.instGroup","typeNames":["FreeGroup"]},{"className":"AddGroup","name":"FreeAddGroup.instAddGroup","typeNames":["FreeAddGroup"]},{"className":"Monad","name":"FreeGroup.instMonad","typeNames":["FreeGroup"]},{"className":"Monad","name":"FreeAddGroup.instMonad","typeNames":["FreeAddGroup"]},{"className":"LawfulMonad","name":"FreeGroup.instLawfulMonad","typeNames":["FreeGroup"]},{"className":"LawfulMonad","name":"FreeAddGroup.instLawfulMonad","typeNames":["FreeAddGroup"]}],"name":"Mathlib.GroupTheory.FreeGroup.Basic"}