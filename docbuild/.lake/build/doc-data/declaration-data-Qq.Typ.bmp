{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.QuotedLevelDefEq.check\"><span class=\"name\">Qq</span>.<span class=\"name\">QuotedLevelDefEq</span>.<span class=\"name\">check</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.QuotedLevelDefEq\">QuotedLevelDefEq</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Check that the claim `$u =QL $v` is actually true; that the two levels are defeq. ","docLink":"./Qq/Typ.html#Qq.QuotedLevelDefEq.check","kind":"def","line":70,"name":"Qq.QuotedLevelDefEq.check","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Typ.lean#L70-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.QuotedDefEq.check\"><span class=\"name\">Qq</span>.<span class=\"name\">QuotedDefEq</span>.<span class=\"name\">check</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr.sort\">Lean.Expr.sort</a> <span class=\"fn\">u</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.QuotedDefEq\">QuotedDefEq</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Check that the claim `$lhs =Q $rhs` is actually true; that the two terms are defeq. ","docLink":"./Qq/Typ.html#Qq.QuotedDefEq.check","kind":"def","line":61,"name":"Qq.QuotedDefEq.check","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Typ.lean#L61-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.Quoted.check\"><span class=\"name\">Qq</span>.<span class=\"name\">Quoted</span>.<span class=\"name\">check</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Check that a term `e : Q(α)` really has type `α`. ","docLink":"./Qq/Typ.html#Qq.Quoted.check","kind":"def","line":54,"name":"Qq.Quoted.check","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Typ.lean#L54-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.QuotedLevelDefEq.unsafeIntro\"><span class=\"name\">Qq</span>.<span class=\"name\">QuotedLevelDefEq</span>.<span class=\"name\">unsafeIntro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.QuotedLevelDefEq\">QuotedLevelDefEq</a> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"For a safer constructor, see `Qq.assertLevelDefEqQ`. ","docLink":"./Qq/Typ.html#Qq.QuotedLevelDefEq.unsafeIntro","kind":"ctor","line":51,"name":"Qq.QuotedLevelDefEq.unsafeIntro","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Typ.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.QuotedLevelDefEq\"><span class=\"name\">Qq</span>.<span class=\"name\">QuotedLevelDefEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"`QuotedLevelDefEq u v` says that the levels `u` and `v` are definitionally equal.\n\nYou should usually write this using the notation `$u =QL $v`.\n","docLink":"./Qq/Typ.html#Qq.QuotedLevelDefEq","kind":"structure","line":44,"name":"Qq.QuotedLevelDefEq","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Typ.lean#L44-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.QuotedDefEq.unsafeIntro\"><span class=\"name\">Qq</span>.<span class=\"name\">QuotedDefEq</span>.<span class=\"name\">unsafeIntro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr.sort\">Lean.Expr.sort</a> <span class=\"fn\">u</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.QuotedDefEq\">QuotedDefEq</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span></span></div></div>","info":{"doc":"For a safer constructor, see `Qq.assertDefEqQ`. ","docLink":"./Qq/Typ.html#Qq.QuotedDefEq.unsafeIntro","kind":"ctor","line":42,"name":"Qq.QuotedDefEq.unsafeIntro","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Typ.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.QuotedDefEq\"><span class=\"name\">Qq</span>.<span class=\"name\">QuotedDefEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr.sort\">Lean.Expr.sort</a> <span class=\"fn\">u</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"`QuotedDefEq lhs rhs` says that the expressions `lhs` and `rhs` are definitionally equal.\n\nYou should usually write this using the notation `$lhs =Q $rhs`.\n","docLink":"./Qq/Typ.html#Qq.QuotedDefEq","kind":"structure","line":35,"name":"Qq.QuotedDefEq","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Typ.lean#L35-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.Quoted.ty\"><span class=\"name\">Qq</span>.<span class=\"name\">Quoted</span>.<span class=\"name\">ty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>","info":{"doc":"Gets the type of a quoted expression.  ","docLink":"./Qq/Typ.html#Qq.Quoted.ty","kind":"def","line":32,"name":"Qq.Quoted.ty","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Typ.lean#L32-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.instToMessageDataQuoted\"><span class=\"name\">Qq</span>.<span class=\"name\">instToMessageDataQuoted</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <span class=\"fn\">(<a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Qq/Typ.html#Qq.instToMessageDataQuoted","kind":"instance","line":30,"name":"Qq.instToMessageDataQuoted","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Typ.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.instCoeOutQuotedMessageData\"><span class=\"name\">Qq</span>.<span class=\"name\">instCoeOutQuotedMessageData</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeOut\">CoeOut</a> <span class=\"fn\">(<a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span>)</span> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Typ.html#Qq.instCoeOutQuotedMessageData","kind":"instance","line":29,"name":"Qq.instCoeOutQuotedMessageData","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Typ.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.instCoeOutQuotedExpr\"><span class=\"name\">Qq</span>.<span class=\"name\">instCoeOutQuotedExpr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeOut\">CoeOut</a> <span class=\"fn\">(<a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span>)</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"","docLink":"./Qq/Typ.html#Qq.instCoeOutQuotedExpr","kind":"instance","line":28,"name":"Qq.instCoeOutQuotedExpr","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Typ.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.instReprQuoted\"><span class=\"name\">Qq</span>.<span class=\"name\">instReprQuoted</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Qq/Typ.html#Qq.instReprQuoted","kind":"instance","line":26,"name":"Qq.instReprQuoted","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Typ.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.instToStringQuoted\"><span class=\"name\">Qq</span>.<span class=\"name\">instToStringQuoted</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">(<a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Qq/Typ.html#Qq.instToStringQuoted","kind":"instance","line":25,"name":"Qq.instToStringQuoted","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Typ.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.instInhabitedQuoted\"><span class=\"name\">Qq</span>.<span class=\"name\">instInhabitedQuoted</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Qq/Typ.html#Qq.instInhabitedQuoted","kind":"instance","line":24,"name":"Qq.instInhabitedQuoted","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Typ.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.instHashableQuoted\"><span class=\"name\">Qq</span>.<span class=\"name\">instHashableQuoted</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">(<a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Qq/Typ.html#Qq.instHashableQuoted","kind":"instance","line":23,"name":"Qq.instHashableQuoted","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Typ.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.instBEqQuoted\"><span class=\"name\">Qq</span>.<span class=\"name\">instBEqQuoted</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Qq/Typ.html#Qq.instBEqQuoted","kind":"instance","line":22,"name":"Qq.instBEqQuoted","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Typ.lean#L22-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.Quoted.unsafeMk\"><span class=\"name\">Qq</span>.<span class=\"name\">Quoted</span>.<span class=\"name\">unsafeMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Typ.html#Qq.Quoted\">Quoted</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Creates a quoted expression.  Requires that `e` has type `α`.\n\nYou should usually write this using the notation `q($e)`.\n","docLink":"./Qq/Typ.html#Qq.Quoted.unsafeMk","kind":"def","line":15,"name":"Qq.Quoted.unsafeMk","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Typ.lean#L15-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Typ.html#Qq.Quoted\"><span class=\"name\">Qq</span>.<span class=\"name\">Quoted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`Quoted α` is the type of Lean expressions having type `α`.\n\nYou should usually write this using the notation `Q($α)`.\n","docLink":"./Qq/Typ.html#Qq.Quoted","kind":"def","line":8,"name":"Qq.Quoted","sourceLink":"https://github.com/leanprover-community/quote4/blob/2e582a44b0150db152bff1c8484eb557fb5340da/Qq/Typ.lean#L8-L13"}}],"imports":["Init","Lean"],"instances":[{"className":"BEq","name":"Qq.instBEqQuoted","typeNames":["Qq.Quoted"]},{"className":"Hashable","name":"Qq.instHashableQuoted","typeNames":["Qq.Quoted"]},{"className":"Inhabited","name":"Qq.instInhabitedQuoted","typeNames":["Qq.Quoted"]},{"className":"ToString","name":"Qq.instToStringQuoted","typeNames":["Qq.Quoted"]},{"className":"Repr","name":"Qq.instReprQuoted","typeNames":["Qq.Quoted"]},{"className":"CoeOut","name":"Qq.instCoeOutQuotedExpr","typeNames":["Qq.Quoted","Lean.Expr"]},{"className":"CoeOut","name":"Qq.instCoeOutQuotedMessageData","typeNames":["Qq.Quoted","Lean.MessageData"]},{"className":"Lean.ToMessageData","name":"Qq.instToMessageDataQuoted","typeNames":["Qq.Quoted"]}],"name":"Qq.Typ"}