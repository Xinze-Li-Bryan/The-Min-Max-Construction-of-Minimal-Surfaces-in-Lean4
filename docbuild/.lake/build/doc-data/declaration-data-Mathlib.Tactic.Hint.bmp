{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.hintStx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Hint</span>.<span class=\"name\">hintStx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"The `hint` tactic tries every tactic registered using `register_hint tac`,\nand reports any that succeed.\n","docLink":"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.hintStx","kind":"def","line":155,"name":"Mathlib.Tactic.Hint.hintStx","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Hint.lean#L155-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.hint\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Hint</span>.<span class=\"name\">hint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Run all tactics registered using `register_hint`.\nPrint a \"Try these:\" suggestion for each of the successful tactics.\n\nIf one tactic succeeds and closes the goal, we don't look at subsequent tactics.\n","docLink":"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.hint","kind":"def","line":126,"name":"Mathlib.Tactic.Hint.hint","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Hint.lean#L126-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.withoutInfoTrees\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Hint</span>.<span class=\"name\">withoutInfoTrees</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Run a tactic, but revert any changes to info trees.\nWe use this to inhibit the creation of widgets by subsidiary tactics.\n","docLink":"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.withoutInfoTrees","kind":"def","line":117,"name":"Mathlib.Tactic.Hint.withoutInfoTrees","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Hint.lean#L117-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.withMessageLog\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Hint</span>.<span class=\"name\">withMessageLog</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a></span></div></div>","info":{"doc":"Run a tactic, returning any new messages rather than adding them to the message log. ","docLink":"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.withMessageLog","kind":"def","line":111,"name":"Mathlib.Tactic.Hint.withMessageLog","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Hint.lean#L111-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.suggestion\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Hint</span>.<span class=\"name\">suggestion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tac</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msgs</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a> := <a href=\"./Lean/Message.html#Lean.MessageLog.mk\">{</a> <a href=\"./Lean/Message.html#Lean.MessageLog.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Lean/Meta/TryThis.html#Lean.Meta.Tactic.TryThis.Suggestion\">Lean.Meta.Tactic.TryThis.Suggestion</a></span></div></div>","info":{"doc":"Construct a suggestion for a tactic.\n* Check the passed `MessageLog` for an info message beginning with \"Try this: \".\n* If found, use that as the suggestion.\n* Otherwise use the provided syntax.\n* Also, look for remaining goals and pretty print them after the suggestion.\n","docLink":"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.suggestion","kind":"def","line":81,"name":"Mathlib.Tactic.Hint.suggestion","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Hint.lean#L81-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.registerHintStx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Hint</span>.<span class=\"name\">registerHintStx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Register a tactic for use with the `hint` tactic, e.g. `register_hint simp_all`.\nAn optional priority can be provided with `register_hint (priority := n) tac`.\nTactics with larger priorities run before those with smaller priorities. The default\npriority is `1000`.\n","docLink":"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.registerHintStx","kind":"def","line":45,"name":"Mathlib.Tactic.Hint.registerHintStx","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Hint.lean#L45-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.getHints\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Hint</span>.<span class=\"name\">getHints</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span>))</span></span></div></div>","info":{"doc":"Return the list of registered hint tactics. ","docLink":"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.getHints","kind":"def","line":40,"name":"Mathlib.Tactic.Hint.getHints","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Hint.lean#L40-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.addHint\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Hint</span>.<span class=\"name\">addHint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Register a new hint tactic. ","docLink":"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.addHint","kind":"def","line":36,"name":"Mathlib.Tactic.Hint.addHint","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Hint.lean#L36-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.hintExtension\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Hint</span>.<span class=\"name\">hintExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension\">Lean.SimplePersistentEnvExtension</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span>) <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span>))</span></span></div></div>","info":{"doc":"An environment extension for registering hint tactics with priorities. ","docLink":"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.hintExtension","kind":"opaque","line":28,"name":"Mathlib.Tactic.Hint.hintExtension","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Hint.lean#L28-L34"}}],"imports":["Init","Lean.Meta.Tactic.TryThis","Batteries.Linter.UnreachableTactic","Batteries.Control.Nondet.Basic","Mathlib.Init"],"instances":[],"name":"Mathlib.Tactic.Hint"}