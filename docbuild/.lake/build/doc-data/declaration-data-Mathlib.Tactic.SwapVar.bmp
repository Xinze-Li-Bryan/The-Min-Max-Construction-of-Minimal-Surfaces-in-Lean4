{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/SwapVar.html#Mathlib.Tactic.«tacticSwap_var__,,»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">«tacticSwap_var__,,»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`swap_var swap_rule₁, swap_rule₂, ⋯` applies `swap_rule₁` then `swap_rule₂` then `⋯`.\n\nA *swap_rule* is of the form `x y` or `x ↔ y`, and \"applying it\" means swapping the variable name\n`x` by `y` and vice-versa on all hypotheses and the goal.\n\n```lean\nexample {P Q : Prop} (q : P) (p : Q) : P ∧ Q := by\n  swap_var p ↔ q\n  exact ⟨p, q⟩\n```\n","docLink":"./Mathlib/Tactic/SwapVar.html#Mathlib.Tactic.«tacticSwap_var__,,»","kind":"def","line":22,"name":"Mathlib.Tactic.«tacticSwap_var__,,»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/SwapVar.lean#L22-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/SwapVar.html#Mathlib.Tactic.swapRule\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">swapRule</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"The parser for swap rules ","docLink":"./Mathlib/Tactic/SwapVar.html#Mathlib.Tactic.swapRule","kind":"def","line":19,"name":"Mathlib.Tactic.swapRule","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/SwapVar.lean#L19-L20"}}],"imports":["Init","Lean.Elab.ElabRules","Mathlib.Util.Tactic"],"instances":[],"name":"Mathlib.Tactic.SwapVar"}