{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.tacticNth_grw_____\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticNth_grw_____</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`nth_grw` is just like `nth_rw`, but for `grw`. ","docLink":"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.tacticNth_grw_____","kind":"def","line":130,"name":"Mathlib.Tactic.tacticNth_grw_____","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/GRewrite/Elab.lean#L130-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.tacticNth_grewrite_____\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticNth_grewrite_____</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`nth_grewrite` is just like `nth_rewrite`, but for `grewrite`. ","docLink":"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.tacticNth_grewrite_____","kind":"def","line":126,"name":"Mathlib.Tactic.tacticNth_grewrite_____","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/GRewrite/Elab.lean#L126-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.applyRwSeq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">applyRwSeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`apply_rw [rules]` is a shorthand for `grw +implicationHyp [rules]`. ","docLink":"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.applyRwSeq","kind":"def","line":122,"name":"Mathlib.Tactic.applyRwSeq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/GRewrite/Elab.lean#L122-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.tacticApply_rewrite___\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticApply_rewrite___</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`apply_rewrite [rules]` is a shorthand for `grewrite +implicationHyp [rules]`. ","docLink":"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.tacticApply_rewrite___","kind":"def","line":118,"name":"Mathlib.Tactic.tacticApply_rewrite___","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/GRewrite/Elab.lean#L118-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.grwSeq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">grwSeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`grw [e]` works just like `rw [e]`, but `e` can be a relation other than `=` or `↔`.\n\nFor example,\n```lean\nvariable {a b c d n : ℤ}\n\nexample (h₁ : a < b) (h₂ : b ≤ c) : a + d ≤ c + d := by\n  grw [h₁, h₂]\n\nexample (h : a ≡ b [ZMOD n]) : a ^ 2 ≡ b ^ 2 [ZMOD n] := by\n  grw [h]\n\nexample (h₁ : a ∣ b) (h₂ : b ∣ a ^ 2 * c) : a ∣ b ^ 2 * c := by\n  grw [h₁] at *\n  exact h₂\n```\nTo be able to use `grw`, the relevant lemmas need to be tagged with `@[gcongr]`.\nTo rewrite inside a transitive relation, you can also give it an `IsTrans` instance.\n","docLink":"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.grwSeq","kind":"def","line":109,"name":"Mathlib.Tactic.grwSeq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/GRewrite/Elab.lean#L109-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.evalGRewriteSeq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">evalGRewriteSeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>","info":{"doc":"`grewrite [e]` works just like `rewrite [e]`, but `e` can be a relation other than `=` or `↔`.\n\nFor example,\n```lean\nvariable {a b c d n : ℤ}\n\nexample (h₁ : a < b) (h₂ : b ≤ c) : a + d ≤ c + d := by\n  grewrite [h₁, h₂]; rfl\n\nexample (h : a ≡ b [ZMOD n]) : a ^ 2 ≡ b ^ 2 [ZMOD n] := by\n  grewrite [h]; rfl\n\nexample (h₁ : a ∣ b) (h₂ : b ∣ a ^ 2 * c) : a ∣ b ^ 2 * c := by\n  grewrite [h₁] at *\n  exact h₂\n```\nTo be able to use `grewrite`, the relevant lemmas need to be tagged with `@[gcongr]`.\nTo rewrite inside a transitive relation, you can also give it an `IsTrans` instance.\n","docLink":"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.evalGRewriteSeq","kind":"def","line":80,"name":"Mathlib.Tactic.evalGRewriteSeq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/GRewrite/Elab.lean#L80-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.grewriteSeq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">grewriteSeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`grewrite [e]` works just like `rewrite [e]`, but `e` can be a relation other than `=` or `↔`.\n\nFor example,\n```lean\nvariable {a b c d n : ℤ}\n\nexample (h₁ : a < b) (h₂ : b ≤ c) : a + d ≤ c + d := by\n  grewrite [h₁, h₂]; rfl\n\nexample (h : a ≡ b [ZMOD n]) : a ^ 2 ≡ b ^ 2 [ZMOD n] := by\n  grewrite [h]; rfl\n\nexample (h₁ : a ∣ b) (h₂ : b ∣ a ^ 2 * c) : a ∣ b ^ 2 * c := by\n  grewrite [h₁] at *\n  exact h₂\n```\nTo be able to use `grewrite`, the relevant lemmas need to be tagged with `@[gcongr]`.\nTo rewrite inside a transitive relation, you can also give it an `IsTrans` instance.\n","docLink":"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.grewriteSeq","kind":"def","line":58,"name":"Mathlib.Tactic.grewriteSeq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/GRewrite/Elab.lean#L58-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.elabGRewriteConfig\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabGRewriteConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewrite.Config\">GRewrite.Config</a></span></span></div></div>","info":{"doc":"Function elaborating `GRewrite.Config`. ","docLink":"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.elabGRewriteConfig","kind":"def","line":55,"name":"Mathlib.Tactic.elabGRewriteConfig","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/GRewrite/Elab.lean#L55-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.grewriteLocalDecl\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">grewriteLocalDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">symm</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewrite.Config\">GRewrite.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Apply the `grewrite` tactic to a local hypothesis. ","docLink":"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.grewriteLocalDecl","kind":"def","line":39,"name":"Mathlib.Tactic.grewriteLocalDecl","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/GRewrite/Elab.lean#L39-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.grewriteTarget\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">grewriteTarget</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">symm</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/GRewrite/Core.html#Mathlib.Tactic.GRewrite.Config\">GRewrite.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Apply the `grewrite` tactic to the current goal. ","docLink":"./Mathlib/Tactic/GRewrite/Elab.html#Mathlib.Tactic.grewriteTarget","kind":"def","line":25,"name":"Mathlib.Tactic.grewriteTarget","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/GRewrite/Elab.lean#L25-L37"}}],"imports":["Init","Mathlib.Tactic.GRewrite.Core"],"instances":[],"name":"Mathlib.Tactic.GRewrite.Elab"}