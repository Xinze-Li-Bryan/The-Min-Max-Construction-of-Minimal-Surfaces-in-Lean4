{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Substitution.html#Aesop.openRuleType\"><span class=\"name\">Aesop</span>.<span class=\"name\">openRuleType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></div></div>","info":{"doc":"Open the type of a rule `e`. If a substitution `σ` is given, this function\nacts like `Substitution.openRuleType σ`. Otherwise it acts like\n`forallMetaTelescope`. ","docLink":"./Aesop/Forward/Substitution.html#Aesop.openRuleType","kind":"def","line":152,"name":"Aesop.openRuleType","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/Substitution.lean#L152-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution.specializeRule\"><span class=\"name\">Aesop</span>.<span class=\"name\">Substitution</span>.<span class=\"name\">specializeRule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rule</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"Given `rule` of type `∀ (x₁ : T₁) ... (xₙ : Tₙ), U` and a substitution `σ` for\nthe arguments `xᵢ`, specialise `rule` with the arguments given by `σ`. That is,\nconstruct `U t₁ ... tₙ` where `tⱼ` is `σ(xⱼ)` if `xⱼ ∈ dom(σ)` and is otherwise\na fresh fvar, then λ-abstract the fresh fvars. ","docLink":"./Aesop/Forward/Substitution.html#Aesop.Substitution.specializeRule","kind":"def","line":127,"name":"Aesop.Substitution.specializeRule","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/Substitution.lean#L127-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution.openRuleType\"><span class=\"name\">Aesop</span>.<span class=\"name\">Substitution</span>.<span class=\"name\">openRuleType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></div></div>","info":{"doc":"Given `e` with type `∀ (x₁ : T₁) ... (xₙ : Tₙ), U` and a substitution `σ`\nfor the arguments `xᵢ`, replace occurrences of `xᵢ` in the body `U` with fresh\nmetavariables (like `forallMetaTelescope`). Then, for each mapping `xᵢ ↦ tᵢ` in\n`σ`, assign `tᵢ` to the metavariable corresponding to `xᵢ`. Returns the newly\ncreated metavariables (which may be assigned!), their binder infos and the\nupdated body. ","docLink":"./Aesop/Forward/Substitution.html#Aesop.Substitution.openRuleType","kind":"def","line":103,"name":"Aesop.Substitution.openRuleType","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/Substitution.lean#L103-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution.containsHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">Substitution</span>.<span class=\"name\">containsHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` if any expression in the codomain of `s` contains `hyp`. ","docLink":"./Aesop/Forward/Substitution.html#Aesop.Substitution.containsHyp","kind":"def","line":97,"name":"Aesop.Substitution.containsHyp","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/Substitution.lean#L97-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution.mergeCompatible\"><span class=\"name\">Aesop</span>.<span class=\"name\">Substitution</span>.<span class=\"name\">mergeCompatible</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a></div></div>","info":{"doc":"Merge two substitutions. Precondition: the substitutions are compatible, so\nthey must have the same size and if `s₁[x]` and `s₂[x]` are both defined, they\nmust be the same value. ","docLink":"./Aesop/Forward/Substitution.html#Aesop.Substitution.mergeCompatible","kind":"def","line":79,"name":"Aesop.Substitution.mergeCompatible","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/Substitution.lean#L79-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution.instToMessageData\"><span class=\"name\">Aesop</span>.<span class=\"name\">Substitution</span>.<span class=\"name\">instToMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/Substitution.html#Aesop.Substitution.instToMessageData","kind":"instance","line":73,"name":"Aesop.Substitution.instToMessageData","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/Substitution.lean#L73-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution.findLevel?\"><span class=\"name\">Aesop</span>.<span class=\"name\">Substitution</span>.<span class=\"name\">findLevel?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">li</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span></div></div>","info":{"doc":"Get the instantiation associated with level `li` in `s`. Precondition:\n`li` is in the domain of `s`. ","docLink":"./Aesop/Forward/Substitution.html#Aesop.Substitution.findLevel?","kind":"def","line":68,"name":"Aesop.Substitution.findLevel?","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/Substitution.lean#L68-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution.insertLevel\"><span class=\"name\">Aesop</span>.<span class=\"name\">Substitution</span>.<span class=\"name\">insertLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">li</span> : <a href=\"./Aesop/Forward/LevelIndex.html#Aesop.LevelIndex\">LevelIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a></div></div>","info":{"doc":"Insert the mapping `li ↦ inst` into the substitution `s`. Precondition: `li`\nis in the domain of `s` and `inst` is normalised. ","docLink":"./Aesop/Forward/Substitution.html#Aesop.Substitution.insertLevel","kind":"def","line":62,"name":"Aesop.Substitution.insertLevel","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/Substitution.lean#L62-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution.find?\"><span class=\"name\">Aesop</span>.<span class=\"name\">Substitution</span>.<span class=\"name\">find?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pi</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a></span></div></div>","info":{"doc":"Get the instantiation associated with premise `pi` in `s`. Precondition:\n`pi` is in the domain of `s`. ","docLink":"./Aesop/Forward/Substitution.html#Aesop.Substitution.find?","kind":"def","line":57,"name":"Aesop.Substitution.find?","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/Substitution.lean#L57-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution.insert\"><span class=\"name\">Aesop</span>.<span class=\"name\">Substitution</span>.<span class=\"name\">insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pi</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a></div></div>","info":{"doc":"Insert the mapping `pi ↦ inst` into the substitution `s`. Precondition: `pi`\nis in the domain of `s`. ","docLink":"./Aesop/Forward/Substitution.html#Aesop.Substitution.insert","kind":"def","line":51,"name":"Aesop.Substitution.insert","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/Substitution.lean#L51-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution.empty\"><span class=\"name\">Aesop</span>.<span class=\"name\">Substitution</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numPremises </span><span class=\"fn\">numLevels</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a></div></div>","info":{"doc":"The empty substitution for a rule with the given number of premise\nindexes. ","docLink":"./Aesop/Forward/Substitution.html#Aesop.Substitution.empty","kind":"def","line":45,"name":"Aesop.Substitution.empty","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/Substitution.lean#L45-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution.instOrd\"><span class=\"name\">Aesop</span>.<span class=\"name\">Substitution</span>.<span class=\"name\">instOrd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/Substitution.html#Aesop.Substitution.instOrd","kind":"instance","line":40,"name":"Aesop.Substitution.instOrd","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/Substitution.lean#L40-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution.instHashable\"><span class=\"name\">Aesop</span>.<span class=\"name\">Substitution</span>.<span class=\"name\">instHashable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/Substitution.html#Aesop.Substitution.instHashable","kind":"instance","line":37,"name":"Aesop.Substitution.instHashable","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/Substitution.lean#L37-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution.instBEq\"><span class=\"name\">Aesop</span>.<span class=\"name\">Substitution</span>.<span class=\"name\">instBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/Substitution.html#Aesop.Substitution.instBEq","kind":"instance","line":34,"name":"Aesop.Substitution.instBEq","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/Substitution.lean#L34-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Substitution.html#Aesop.instInhabitedSubstitution\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedSubstitution</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/Substitution.html#Aesop.instInhabitedSubstitution","kind":"instance","line":30,"name":"Aesop.instInhabitedSubstitution","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/Substitution.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Substitution.html#Aesop.instInhabitedSubstitution.default\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedSubstitution</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/Substitution.html#Aesop.instInhabitedSubstitution.default","kind":"def","line":30,"name":"Aesop.instInhabitedSubstitution.default","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/Substitution.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution.levels\"><span class=\"name\">Aesop</span>.<span class=\"name\">Substitution</span>.<span class=\"name\">levels</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span></div></div>","info":{"doc":"The level substitution implied by the premise substitution. If `e` is the\nelaborated rule expression (with level params replaced by level mvars), and\n`collectLevelMVars (← instantiateMVars e) = [?m₁, ..., ?mₙ]`, then `levels[i]`\nis the level assigned to `?mᵢ`. ","docLink":"./Aesop/Forward/Substitution.html#Aesop.Substitution.levels","kind":"def","line":29,"name":"Aesop.Substitution.levels","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/Substitution.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution.premises\"><span class=\"name\">Aesop</span>.<span class=\"name\">Substitution</span>.<span class=\"name\">premises</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a>)</span></span></div></div>","info":{"doc":"The substitution. ","docLink":"./Aesop/Forward/Substitution.html#Aesop.Substitution.premises","kind":"def","line":24,"name":"Aesop.Substitution.premises","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/Substitution.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">Substitution</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">premises</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levels</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a></div></div>","info":{"doc":"","docLink":"./Aesop/Forward/Substitution.html#Aesop.Substitution.mk","kind":"ctor","line":22,"name":"Aesop.Substitution.mk","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/Substitution.lean#L22-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\"><span class=\"name\">Aesop</span>.<span class=\"name\">Substitution</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A substitution for the premises of a rule. Given a rule with type\n`∀ (x₁ : T₁) ... (xₙ : Tₙ), U` a substitution is a finite partial map with\ndomain `{1, ..., n}` that associates an expression with some or all of the\npremises. ","docLink":"./Aesop/Forward/Substitution.html#Aesop.Substitution","kind":"structure","line":18,"name":"Aesop.Substitution","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/Forward/Substitution.lean#L18-L30"}}],"imports":["Init","Aesop.Forward.LevelIndex","Aesop.Forward.PremiseIndex","Aesop.RPINF.Basic","Aesop.Util.Basic"],"instances":[{"className":"Inhabited","name":"Aesop.instInhabitedSubstitution","typeNames":["Aesop.Substitution"]},{"className":"BEq","name":"Aesop.Substitution.instBEq","typeNames":["Aesop.Substitution"]},{"className":"Hashable","name":"Aesop.Substitution.instHashable","typeNames":["Aesop.Substitution"]},{"className":"Ord","name":"Aesop.Substitution.instOrd","typeNames":["Aesop.Substitution"]},{"className":"Lean.ToMessageData","name":"Aesop.Substitution.instToMessageData","typeNames":["Aesop.Substitution"]}],"name":"Aesop.Forward.Substitution"}