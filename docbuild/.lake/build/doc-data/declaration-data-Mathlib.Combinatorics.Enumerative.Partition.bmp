{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.oddDistincts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">oddDistincts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></span></div></div>","info":{"doc":"The finset of those partitions in which every part is odd and used at most once. ","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.oddDistincts","kind":"def","line":173,"name":"Nat.Partition.oddDistincts","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L173-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.distincts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">distincts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></span></div></div>","info":{"doc":"The finset of those partitions in which each part is used at most once. ","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.distincts","kind":"def","line":169,"name":"Nat.Partition.distincts","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L169-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.odds\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">odds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></span></div></div>","info":{"doc":"The finset of those partitions in which every part is odd. ","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.odds","kind":"def","line":165,"name":"Nat.Partition.odds","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L165-L167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.instFintype\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">instFintype</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></span></div></div>","info":{"doc":"Show there are finitely many partitions by considering the surjection from compositions to\npartitions.\n","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.instFintype","kind":"instance","line":159,"name":"Nat.Partition.instFintype","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L159-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.count_ofSums_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">count_ofSums_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Defs.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/Multiset/Defs.html#Multiset.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Count.html#Multiset.count\">Multiset.count</a> <span class=\"fn\">0</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSums\">ofSums</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span> <span class=\"fn\">hl</span>)</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.count_ofSums_zero","kind":"theorem","line":155,"name":"Nat.Partition.count_ofSums_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L155-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.count_ofSums_of_ne_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">count_ofSums_of_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Defs.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/Multiset/Defs.html#Multiset.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Count.html#Multiset.count\">Multiset.count</a> <span class=\"fn\">i</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSums\">ofSums</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span> <span class=\"fn\">hl</span>)</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Count.html#Multiset.count\">Multiset.count</a> <span class=\"fn\">i</span> <span class=\"fn\">l</span></span></div></div>","info":{"doc":"The number of times a positive integer `i` appears in the partition `ofSums n l hl` is the same\nas the number of times it appears in the multiset `l`.\n(For `i = 0`, `Partition.non_zero` combined with `Multiset.count_eq_zero_of_notMem` gives that\nthis is `0` instead.)\n","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.count_ofSums_of_ne_zero","kind":"theorem","line":146,"name":"Nat.Partition.count_ofSums_of_ne_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L146-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym_one\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofSym_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Basic.html#Sym\">Sym</a> <span class=\"fn\">σ</span> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym\">ofSym</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.indiscrete\">indiscrete</a> <span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym_one","kind":"theorem","line":143,"name":"Nat.Partition.ofSym_one","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L143-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.UniquePartitionOne\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">UniquePartitionOne</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a> <span class=\"fn\">1</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.UniquePartitionOne","kind":"instance","line":140,"name":"Nat.Partition.UniquePartitionOne","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L140-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.partition_one_parts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">partition_one_parts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">1</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.partition_one_parts","kind":"theorem","line":134,"name":"Nat.Partition.partition_one_parts","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L134-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.UniquePartitionZero\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">UniquePartitionZero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a> <span class=\"fn\">0</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.UniquePartitionZero","kind":"instance","line":131,"name":"Nat.Partition.UniquePartitionZero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L131-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.partition_zero_parts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">partition_zero_parts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.partition_zero_parts","kind":"theorem","line":128,"name":"Nat.Partition.partition_zero_parts","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L128-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.indiscrete_parts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">indiscrete_parts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.indiscrete\">indiscrete</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">n</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.indiscrete_parts","kind":"theorem","line":125,"name":"Nat.Partition.indiscrete_parts","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L125-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.instInhabited\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.instInhabited","kind":"instance","line":123,"name":"Nat.Partition.instInhabited","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L123-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.indiscrete\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">indiscrete</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></div></div>","info":{"doc":"The partition of exactly one part. ","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.indiscrete","kind":"def","line":120,"name":"Nat.Partition.indiscrete","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L120-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSymShapeEquiv\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofSymShapeEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">τ</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">σ</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Basic.html#Sym\">Sym</a> <span class=\"fn\">σ</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym\">ofSym</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#Subtype\">}</a> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Basic.html#Sym\">Sym</a> <span class=\"fn\">τ</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym\">ofSym</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#Subtype\">}</a></div></div>","info":{"doc":"An equivalence between `σ` and `τ` induces an equivalence between the subtypes of `Sym σ n` and\n`Sym τ n` corresponding to a given partition. ","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSymShapeEquiv","kind":"def","line":111,"name":"Nat.Partition.ofSymShapeEquiv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L111-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym_map\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofSym_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">τ</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">σ</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Basic.html#Sym\">Sym</a> <span class=\"fn\">σ</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym\">ofSym</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sym/Basic.html#Sym.map\">Sym.map</a> <span class=\"fn\">(⇑<span class=\"fn\">e</span>)</span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym\">ofSym</a> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym_map","kind":"theorem","line":103,"name":"Nat.Partition.ofSym_map","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L103-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofSym</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Basic.html#Sym\">Sym</a> <span class=\"fn\">σ</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></div></div>","info":{"doc":"An element `s` of `Sym σ n` induces a partition given by its multiplicities. ","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym","kind":"def","line":92,"name":"Nat.Partition.ofSym","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L92-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofMultiset_parts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofMultiset_parts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Defs.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofMultiset\">ofMultiset</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Filter.html#Multiset.filter\">Multiset.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span> <span class=\"fn\">l</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofMultiset_parts","kind":"theorem","line":89,"name":"Nat.Partition.ofMultiset_parts","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L89-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofMultiset\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofMultiset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Defs.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/Multiset/Defs.html#Multiset.sum\">sum</a></span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></div></div>","info":{"doc":"A `Multiset ℕ` induces a partition on its sum. ","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofMultiset","kind":"def","line":88,"name":"Nat.Partition.ofMultiset","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L88-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSums_parts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofSums_parts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Defs.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/Multiset/Defs.html#Multiset.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSums\">ofSums</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span> <span class=\"fn\">hl</span>)</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Filter.html#Multiset.filter\">Multiset.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span> <span class=\"fn\">l</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSums_parts","kind":"theorem","line":80,"name":"Nat.Partition.ofSums_parts","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L80-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSums\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofSums</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Defs.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/Multiset/Defs.html#Multiset.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></div></div>","info":{"doc":"Given a multiset which sums to `n`, construct a partition of `n` with the same multiset, but\nwithout the zeros.\n","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSums","kind":"def","line":77,"name":"Nat.Partition.ofSums","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L77-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition_surj\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofComposition_surj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Function.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition\">ofComposition</a> <span class=\"fn\">n</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition_surj","kind":"theorem","line":70,"name":"Nat.Partition.ofComposition_surj","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L70-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition_parts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofComposition_parts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Composition.html#Composition\">Composition</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition\">ofComposition</a> <span class=\"fn\">n</span> <span class=\"fn\">c</span>)</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Composition.html#Composition.blocks\">blocks</a></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition_parts","kind":"theorem","line":64,"name":"Nat.Partition.ofComposition_parts","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L64-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofComposition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Composition.html#Composition\">Composition</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></div></div>","info":{"doc":"A composition induces a partition (just convert the list to a multiset). ","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition","kind":"def","line":63,"name":"Nat.Partition.ofComposition","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L63-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.instDecidableEqPartition\"><span class=\"name\">Nat</span>.<span class=\"name\">instDecidableEqPartition</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n✝</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">n✝</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.instDecidableEqPartition","kind":"instance","line":59,"name":"Nat.instDecidableEqPartition","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L59-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.instDecidableEqPartition.decEq\"><span class=\"name\">Nat</span>.<span class=\"name\">instDecidableEqPartition</span>.<span class=\"name\">decEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n✝</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x✝ </span><span class=\"fn\">x✝¹</span> : <span class=\"fn\"><span class=\"fn\">n✝</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x✝</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x✝¹</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.instDecidableEqPartition.decEq","kind":"def","line":59,"name":"Nat.instDecidableEqPartition.decEq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L59-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts_sum\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">parts_sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/Multiset/Defs.html#Multiset.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"proof that the `parts` sum to `n` ","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts_sum","kind":"theorem","line":58,"name":"Nat.Partition.parts_sum","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L58-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts_pos\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">parts_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span> → <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"proof that the `parts` are positive ","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts_pos","kind":"theorem","line":56,"name":"Nat.Partition.parts_pos","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L56-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">parts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Defs.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>","info":{"doc":"positive integers summing to `n` ","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts","kind":"def","line":54,"name":"Nat.Partition.parts","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L54-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.mk\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parts</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Defs.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parts_pos</span> : <span class=\"fn\">∀ {<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}, <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">parts</span> → <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parts_sum</span> : <span class=\"fn\"><span class=\"fn\">parts</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/Multiset/Defs.html#Multiset.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.mk","kind":"ctor","line":52,"name":"Nat.Partition.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L52-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ext\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parts</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ext","kind":"theorem","line":51,"name":"Nat.Partition.ext","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ext_iff\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ext_iff","kind":"theorem","line":51,"name":"Nat.Partition.ext_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A partition of `n` is a multiset of positive integers summing to `n`. ","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition","kind":"structure","line":50,"name":"Nat.Partition","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Combinatorics/Enumerative/Partition.lean#L50-L59"}}],"imports":["Init","Mathlib.Combinatorics.Enumerative.Composition","Mathlib.Tactic.ApplyFun"],"instances":[{"className":"Decidable","name":"Nat.instDecidableEqPartition","typeNames":["Eq"]},{"className":"Inhabited","name":"Nat.Partition.instInhabited","typeNames":["Nat.Partition"]},{"className":"Unique","name":"Nat.Partition.UniquePartitionZero","typeNames":["Nat.Partition"]},{"className":"Unique","name":"Nat.Partition.UniquePartitionOne","typeNames":["Nat.Partition"]},{"className":"Fintype","name":"Nat.Partition.instFintype","typeNames":["Nat.Partition"]}],"name":"Mathlib.Combinatorics.Enumerative.Partition"}