{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/KAbstractPositions.html#Lean.Meta.kabstractIsTypeCorrect\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">kabstractIsTypeCorrect</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e </span><span class=\"fn\">subExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Lean/SubExpr.html#Lean.SubExpr.Pos\">SubExpr.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Determine whether the result of abstracting `subExpr` from `e` at position `pos` results\nin a well-typed expression. This is important if you want to rewrite at this position.\n\nHere is an example of what goes wrong with an ill-typed kabstract result:\n\n```\nexample (h : [5] ≠ []) : List.getLast [5] h = 5 := by\n  rw [show [5] = [5] from rfl] -- tactic 'rewrite' failed, motive is not type correct\n```\n","docLink":"./Mathlib/Lean/Meta/KAbstractPositions.html#Lean.Meta.kabstractIsTypeCorrect","kind":"def","line":77,"name":"Lean.Meta.kabstractIsTypeCorrect","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Meta/KAbstractPositions.lean#L77-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/KAbstractPositions.html#Lean.Meta.viewKAbstractSubExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">viewKAbstractSubExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Lean/SubExpr.html#Lean.SubExpr.Pos\">SubExpr.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>))</span></span></div></div>","info":{"doc":"Return the subexpression at position `pos` in `e` together with an occurrence number\nthat allows the expression to be found by `kabstract`.\nReturn `none` when the subexpression contains loose bound variables. ","docLink":"./Mathlib/Lean/Meta/KAbstractPositions.html#Lean.Meta.viewKAbstractSubExpr","kind":"def","line":66,"name":"Lean.Meta.viewKAbstractSubExpr","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Meta/KAbstractPositions.lean#L66-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/KAbstractPositions.html#Lean.Meta.kabstractPositions.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">kabstractPositions</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pHeadIdx</span> : <a href=\"./Lean/HeadIndex.html#Lean.HeadIndex\">HeadIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pNumArgs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Lean/SubExpr.html#Lean.SubExpr.Pos\">SubExpr.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">positions</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/SubExpr.html#Lean.SubExpr.Pos\">SubExpr.Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/SubExpr.html#Lean.SubExpr.Pos\">SubExpr.Pos</a>)</span></span></div></div>","info":{"doc":"The main loop that loops through all subexpressions ","docLink":"./Mathlib/Lean/Meta/KAbstractPositions.html#Lean.Meta.kabstractPositions.visit","kind":"def","line":38,"name":"Lean.Meta.kabstractPositions.visit","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Meta/KAbstractPositions.lean#L38-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Meta/KAbstractPositions.html#Lean.Meta.kabstractPositions\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">kabstractPositions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/SubExpr.html#Lean.SubExpr.Pos\">SubExpr.Pos</a>)</span></span></div></div>","info":{"doc":"Return the positions that `kabstract` would abstract for pattern `p` in expression `e`.\ni.e. the positions that unify with `p`. ","docLink":"./Mathlib/Lean/Meta/KAbstractPositions.html#Lean.Meta.kabstractPositions","kind":"def","line":29,"name":"Lean.Meta.kabstractPositions","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Meta/KAbstractPositions.lean#L29-L64"}}],"imports":["Init","Mathlib.Init","Lean.HeadIndex","Lean.Meta.ExprLens","Lean.Meta.Check"],"instances":[],"name":"Mathlib.Lean.Meta.KAbstractPositions"}