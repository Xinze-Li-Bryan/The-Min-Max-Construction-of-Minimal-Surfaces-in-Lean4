{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.test\"><span class=\"name\">Plausible</span>.<span class=\"name\">test</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Plausible/Gen.html#Plausible.test","kind":"def","line":178,"name":"Plausible.test","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L178-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.runUntil.decr\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">runUntil</span>.<span class=\"name\">decr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Gen.html#Plausible.Gen.runUntil.decr","kind":"def","line":173,"name":"Plausible.Gen.runUntil.decr","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L173-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.runUntil.repeatGen\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">runUntil</span>.<span class=\"name\">repeatGen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attempts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Gen.html#Plausible.Gen.runUntil.repeatGen","kind":"opaque","line":165,"name":"Plausible.Gen.runUntil.repeatGen","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L165-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.runUntil\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">runUntil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attempts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">size</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Execute a `Gen` until it actually produces an output. May diverge for bad generators! ","docLink":"./Plausible/Gen.html#Plausible.Gen.runUntil","kind":"def","line":161,"name":"Plausible.Gen.runUntil","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L161-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.printSamples\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">printSamples</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"Print (at most) 10 samples of a given type to stdout for debugging. Sadly specialized to `Type 0`\n","docLink":"./Plausible/Gen.html#Plausible.Gen.printSamples","kind":"def","line":152,"name":"Plausible.Gen.printSamples","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L152-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.run\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">size</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Execute a `Gen` inside the `IO` monad using `size` as the example size ","docLink":"./Plausible/Gen.html#Plausible.Gen.run","kind":"def","line":147,"name":"Plausible.Gen.run","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L147-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.instMonadLiftStateIOGen\"><span class=\"name\">Plausible</span>.<span class=\"name\">instMonadLiftStateIOGen</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Plausible/Gen.html#Plausible.GenError\">GenError</a>)</span>)</span> <a href=\"./Init/System/IO.html#IO\">IO</a></span></div></div>","info":{"doc":"","docLink":"./Plausible/Gen.html#Plausible.instMonadLiftStateIOGen","kind":"instance","line":144,"name":"Plausible.instMonadLiftStateIOGen","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L144-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.prodOf\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">prodOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>","info":{"doc":"Given two generators produces a tuple consisting out of the result of both ","docLink":"./Plausible/Gen.html#Plausible.Gen.prodOf","kind":"def","line":130,"name":"Plausible.Gen.prodOf","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L130-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.permutationOf\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">permutationOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></div></div>","info":{"doc":"Generate a random permutation of a given list. ","docLink":"./Plausible/Gen.html#Plausible.Gen.permutationOf","kind":"def","line":122,"name":"Plausible.Gen.permutationOf","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L122-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.elements\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">elements</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Given a list of examples, choose one to create an example. ","docLink":"./Plausible/Gen.html#Plausible.Gen.elements","kind":"def","line":115,"name":"Plausible.Gen.elements","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L115-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.oneOf\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">oneOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> := by decide)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Given a list of example generators, choose one to create an example. ","docLink":"./Plausible/Gen.html#Plausible.Gen.oneOf","kind":"def","line":110,"name":"Plausible.Gen.oneOf","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L110-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.listOf\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">listOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Create a `List` of examples using `x`. The size is controlled\nby the size parameter of `Gen`. ","docLink":"./Plausible/Gen.html#Plausible.Gen.listOf","kind":"def","line":105,"name":"Plausible.Gen.listOf","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L105-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.arrayOf\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">arrayOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Create an `Array` of examples using `x`. The size is controlled\nby the size parameter of `Gen`. ","docLink":"./Plausible/Gen.html#Plausible.Gen.arrayOf","kind":"def","line":96,"name":"Plausible.Gen.arrayOf","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L96-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.chooseNat\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">chooseNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Choose a `Nat` between `0` and `getSize`.\n","docLink":"./Plausible/Gen.html#Plausible.Gen.chooseNat","kind":"def","line":89,"name":"Plausible.Gen.chooseNat","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L89-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.resize\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">resize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Apply a function to the size parameter. ","docLink":"./Plausible/Gen.html#Plausible.Gen.resize","kind":"def","line":85,"name":"Plausible.Gen.resize","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L85-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.getSize\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">getSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Get access to the size parameter of the `Gen` monad. ","docLink":"./Plausible/Gen.html#Plausible.Gen.getSize","kind":"def","line":81,"name":"Plausible.Gen.getSize","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L81-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.chooseNatLt\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">chooseNatLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">hi</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></div></div>","info":{"doc":"Generate a `Nat` example between `lo` and `hi` (exclusively). ","docLink":"./Plausible/Gen.html#Plausible.Gen.chooseNatLt","kind":"def","line":76,"name":"Plausible.Gen.chooseNatLt","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L76-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.choose\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">choose</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.BoundedRandom\">BoundedRandom</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></div></div>","info":{"doc":"Lift `BoundedRandom.randomR` to the `Gen` monad. ","docLink":"./Plausible/Gen.html#Plausible.Gen.choose","kind":"def","line":70,"name":"Plausible.Gen.choose","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L70-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.chooseAny\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">chooseAny</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.Random\">Random</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Lift `Random.random` to the `Gen` monad. ","docLink":"./Plausible/Gen.html#Plausible.Gen.chooseAny","kind":"def","line":66,"name":"Plausible.Gen.chooseAny","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L66-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.down\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">down</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Gen.html#Plausible.Gen.down","kind":"def","line":59,"name":"Plausible.Gen.down","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L59-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.up\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">up</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Plausible/Gen.html#Plausible.Gen.up","kind":"def","line":50,"name":"Plausible.Gen.up","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L50-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen.genFailure\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span>.<span class=\"name\">genFailure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Plausible/Gen.html#Plausible.GenError\">GenError</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IOError.html#IO.Error\">IO.Error</a></div></div>","info":{"doc":"","docLink":"./Plausible/Gen.html#Plausible.Gen.genFailure","kind":"def","line":44,"name":"Plausible.Gen.genFailure","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L44-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.instMonadErrorGen\"><span class=\"name\">Plausible</span>.<span class=\"name\">instMonadErrorGen</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept\">MonadExcept</a> <a href=\"./Plausible/Gen.html#Plausible.GenError\">GenError</a> <a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a></span></div></div>","info":{"doc":"","docLink":"./Plausible/Gen.html#Plausible.instMonadErrorGen","kind":"instance","line":42,"name":"Plausible.instMonadErrorGen","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.instMonadLiftGen\"><span class=\"name\">Plausible</span>.<span class=\"name\">instMonadLiftGen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Plausible/Gen.html#Plausible.GenError\">GenError</a>)</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Plausible/Random.html#Plausible.RandGT\">RandGT</a> <a href=\"./Init/Data/Random.html#StdGen\">StdGen</a> <span class=\"fn\">m</span>)</span> <a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a></span></div></div>","info":{"doc":"","docLink":"./Plausible/Gen.html#Plausible.instMonadLiftGen","kind":"instance","line":39,"name":"Plausible.instMonadLiftGen","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L39-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.Gen\"><span class=\"name\">Plausible</span>.<span class=\"name\">Gen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"Monad to generate random examples to test properties with.\nIt has a `Nat` parameter so that the caller can decide on the\nsize of the examples. It allows failure to generate via the `ExceptT` transformer ","docLink":"./Plausible/Gen.html#Plausible.Gen","kind":"def","line":34,"name":"Plausible.Gen","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L34-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.instInhabitedGenError.default\"><span class=\"name\">Plausible</span>.<span class=\"name\">instInhabitedGenError</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Plausible/Gen.html#Plausible.GenError\">GenError</a></div></div>","info":{"doc":"","docLink":"./Plausible/Gen.html#Plausible.instInhabitedGenError.default","kind":"def","line":32,"name":"Plausible.instInhabitedGenError.default","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.instInhabitedGenError\"><span class=\"name\">Plausible</span>.<span class=\"name\">instInhabitedGenError</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Plausible/Gen.html#Plausible.GenError\">GenError</a></span></div></div>","info":{"doc":"","docLink":"./Plausible/Gen.html#Plausible.instInhabitedGenError","kind":"instance","line":32,"name":"Plausible.instInhabitedGenError","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.GenError.genError\"><span class=\"name\">Plausible</span>.<span class=\"name\">GenError</span>.<span class=\"name\">genError</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Plausible/Gen.html#Plausible.GenError\">GenError</a></span></div></div>","info":{"doc":"","docLink":"./Plausible/Gen.html#Plausible.GenError.genError","kind":"ctor","line":31,"name":"Plausible.GenError.genError","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Gen.html#Plausible.GenError\"><span class=\"name\">Plausible</span>.<span class=\"name\">GenError</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Error thrown on generation failure, e.g. because you've run out of resources. ","docLink":"./Plausible/Gen.html#Plausible.GenError","kind":"inductive","line":29,"name":"Plausible.GenError","sourceLink":"https://github.com/leanprover-community/plausible/blob/9f492660e9837df43fd885a2ad05c520da9ff9f5/Plausible/Gen.lean#L29-L32"}}],"imports":["Init","Plausible.Random"],"instances":[{"className":"Inhabited","name":"Plausible.instInhabitedGenError","typeNames":["Plausible.GenError"]},{"className":"MonadLiftT","name":"Plausible.instMonadLiftGen","typeNames":["Plausible.RandGT","Plausible.Gen"]},{"className":"MonadExcept","name":"Plausible.instMonadErrorGen","typeNames":["Plausible.GenError","Plausible.Gen"]},{"className":"MonadLift","name":"Plausible.instMonadLiftStateIOGen","typeNames":["ReaderT","IO"]}],"name":"Plausible.Gen"}