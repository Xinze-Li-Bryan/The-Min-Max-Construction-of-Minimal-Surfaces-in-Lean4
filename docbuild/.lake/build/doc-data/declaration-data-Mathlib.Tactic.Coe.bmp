{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Coe.html#Lean.Elab.Term.CoeImpl.«term(↥)»\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">CoeImpl</span>.<span class=\"name\">«term(↥)»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Partially applied type coercion.  Equivalent to the η-reduction of `(↥ ·)` ","docLink":"./Mathlib/Tactic/Coe.html#Lean.Elab.Term.CoeImpl.«term(↥)»","kind":"def","line":57,"name":"Lean.Elab.Term.CoeImpl.«term(↥)»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Coe.lean#L57-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Coe.html#Lean.Elab.Term.CoeImpl.«term(⇑)»\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">CoeImpl</span>.<span class=\"name\">«term(⇑)»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Partially applied function coercion.  Equivalent to the η-reduction of `(⇑ ·)` ","docLink":"./Mathlib/Tactic/Coe.html#Lean.Elab.Term.CoeImpl.«term(⇑)»","kind":"def","line":49,"name":"Lean.Elab.Term.CoeImpl.«term(⇑)»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Coe.lean#L49-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Coe.html#Lean.Elab.Term.CoeImpl.«term(↑)»\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">CoeImpl</span>.<span class=\"name\">«term(↑)»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Partially applied coercion.  Equivalent to the η-reduction of `(↑ ·)` ","docLink":"./Mathlib/Tactic/Coe.html#Lean.Elab.Term.CoeImpl.«term(↑)»","kind":"def","line":40,"name":"Lean.Elab.Term.CoeImpl.«term(↑)»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Coe.lean#L40-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Coe.html#Lean.Elab.Term.CoeImpl.elabPartiallyAppliedCoe\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">CoeImpl</span>.<span class=\"name\">elabPartiallyAppliedCoe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sym</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkCoe</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Elaborator for the `(↑)`, `(⇑)`, and `(↥)` notations. ","docLink":"./Mathlib/Tactic/Coe.html#Lean.Elab.Term.CoeImpl.elabPartiallyAppliedCoe","kind":"def","line":25,"name":"Lean.Elab.Term.CoeImpl.elabPartiallyAppliedCoe","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/Coe.lean#L25-L38"}}],"imports":["Init","Mathlib.Init","Lean.Elab.ElabRules"],"instances":[],"name":"Mathlib.Tactic.Coe"}