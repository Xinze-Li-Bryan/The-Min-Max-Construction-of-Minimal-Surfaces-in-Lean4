{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.justLoogleTacticImpl\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">justLoogleTacticImpl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.justLoogleTacticImpl","kind":"def","line":324,"name":"LeanSearchClient.justLoogleTacticImpl","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L324-L326"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.just_loogle_tactic\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">just_loogle_tactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.just_loogle_tactic","kind":"def","line":323,"name":"LeanSearchClient.just_loogle_tactic","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L323-L323"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.loogleTacticImpl\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">loogleTacticImpl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.loogleTacticImpl","kind":"def","line":283,"name":"LeanSearchClient.loogleTacticImpl","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L283-L321"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.loogle_tactic\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">loogle_tactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Search [Loogle](https://loogle.lean-lang.org/json) from within Lean. This can be used as a command, term or tactic as in the following examples. In the case of a tactic, only valid tactics are displayed.\n\n\n```lean\n#loogle List ?a ‚Üí ?a\n\nexample := #loogle List ?a ‚Üí ?a\n\nexample : 3 ‚â§ 5 := by\n  #loogle Nat.succ_le_succ\n  sorry\n\n```\n\n## Loogle Usage\n\nLoogle finds definitions and lemmas in various ways:\n\nBy constant:\nüîç Real.sin\nfinds all lemmas whose statement somehow mentions the sine function.\n\nBy lemma name substring:\nüîç \\\"differ\\\"\nfinds all lemmas that have \\\"differ\\\" somewhere in their lemma name.\n\nBy subexpression:\nüîç _ * (_ ^ _)\nfinds all lemmas whose statements somewhere include a product where the second argument is raised to some power.\n\nThe pattern can also be non-linear, as in\nüîç Real.sqrt ?a * Real.sqrt ?a\n\nIf the pattern has parameters, they are matched in any order. Both of these will find List.map:\nüîç (?a -> ?b) -> List ?a -> List ?b\nüîç List ?a -> (?a -> ?b) -> List ?b\n\nBy main conclusion:\nüîç |- tsum _ = _ * tsum _\nfinds all lemmas where the conclusion (the subexpression to the right of all ‚Üí and ‚àÄ) has the given shape.\n\nAs before, if the pattern has parameters, they are matched against the hypotheses of the lemma in any order; for example,\nüîç |- _ < _ ‚Üí tsum _ < tsum _\nwill find tsum_lt_tsum even though the hypothesis f i < g i is not the last.\n\nIf you pass more than one such search filter, separated by commas Loogle will return lemmas which match all of them. The search\nüîç Real.sin, \\\"two\\\", tsum, _ * _, _ ^ _, |- _ < _ ‚Üí _\nwoould find all lemmas which mention the constants Real.sin and tsum, have \\\"two\\\" as a substring of the lemma name, include a product and a power somewhere in the type, and have a hypothesis of the form _ < _ (if there were any such lemmas). Metavariables (?a) are assigned independently in each filter.\n\nYou can modify the Loogle server URL by setting the `LEANSEARCHCLIENT_LOOGLE_API_URL` environment variable.\n","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.loogle_tactic","kind":"def","line":280,"name":"LeanSearchClient.loogle_tactic","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L280-L282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.loogleTermImpl\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">loogleTermImpl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.loogleTermImpl","kind":"def","line":248,"name":"LeanSearchClient.loogleTermImpl","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L248-L278"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.loogle_term\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">loogle_term</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Search [Loogle](https://loogle.lean-lang.org/json) from within Lean. This can be used as a command, term or tactic as in the following examples. In the case of a tactic, only valid tactics are displayed.\n\n\n```lean\n#loogle List ?a ‚Üí ?a\n\nexample := #loogle List ?a ‚Üí ?a\n\nexample : 3 ‚â§ 5 := by\n  #loogle Nat.succ_le_succ\n  sorry\n\n```\n\n## Loogle Usage\n\nLoogle finds definitions and lemmas in various ways:\n\nBy constant:\nüîç Real.sin\nfinds all lemmas whose statement somehow mentions the sine function.\n\nBy lemma name substring:\nüîç \\\"differ\\\"\nfinds all lemmas that have \\\"differ\\\" somewhere in their lemma name.\n\nBy subexpression:\nüîç _ * (_ ^ _)\nfinds all lemmas whose statements somewhere include a product where the second argument is raised to some power.\n\nThe pattern can also be non-linear, as in\nüîç Real.sqrt ?a * Real.sqrt ?a\n\nIf the pattern has parameters, they are matched in any order. Both of these will find List.map:\nüîç (?a -> ?b) -> List ?a -> List ?b\nüîç List ?a -> (?a -> ?b) -> List ?b\n\nBy main conclusion:\nüîç |- tsum _ = _ * tsum _\nfinds all lemmas where the conclusion (the subexpression to the right of all ‚Üí and ‚àÄ) has the given shape.\n\nAs before, if the pattern has parameters, they are matched against the hypotheses of the lemma in any order; for example,\nüîç |- _ < _ ‚Üí tsum _ < tsum _\nwill find tsum_lt_tsum even though the hypothesis f i < g i is not the last.\n\nIf you pass more than one such search filter, separated by commas Loogle will return lemmas which match all of them. The search\nüîç Real.sin, \\\"two\\\", tsum, _ * _, _ ^ _, |- _ < _ ‚Üí _\nwoould find all lemmas which mention the constants Real.sin and tsum, have \\\"two\\\" as a substring of the lemma name, include a product and a power somewhere in the type, and have a hypothesis of the form _ < _ (if there were any such lemmas). Metavariables (?a) are assigned independently in each filter.\n\nYou can modify the Loogle server URL by setting the `LEANSEARCHCLIENT_LOOGLE_API_URL` environment variable.\n","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.loogle_term","kind":"def","line":246,"name":"LeanSearchClient.loogle_term","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L246-L247"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.justLoogleCmdImpl\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">justLoogleCmdImpl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">Lean.Elab.Command.CommandElab</a></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.justLoogleCmdImpl","kind":"def","line":243,"name":"LeanSearchClient.justLoogleCmdImpl","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L243-L243"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.just_loogle_cmd\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">just_loogle_cmd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Search [Loogle](https://loogle.lean-lang.org/json) from within Lean. This can be used as a command, term or tactic as in the following examples. In the case of a tactic, only valid tactics are displayed.\n\n\n```lean\n#loogle List ?a ‚Üí ?a\n\nexample := #loogle List ?a ‚Üí ?a\n\nexample : 3 ‚â§ 5 := by\n  #loogle Nat.succ_le_succ\n  sorry\n\n```\n\n## Loogle Usage\n\nLoogle finds definitions and lemmas in various ways:\n\nBy constant:\nüîç Real.sin\nfinds all lemmas whose statement somehow mentions the sine function.\n\nBy lemma name substring:\nüîç \\\"differ\\\"\nfinds all lemmas that have \\\"differ\\\" somewhere in their lemma name.\n\nBy subexpression:\nüîç _ * (_ ^ _)\nfinds all lemmas whose statements somewhere include a product where the second argument is raised to some power.\n\nThe pattern can also be non-linear, as in\nüîç Real.sqrt ?a * Real.sqrt ?a\n\nIf the pattern has parameters, they are matched in any order. Both of these will find List.map:\nüîç (?a -> ?b) -> List ?a -> List ?b\nüîç List ?a -> (?a -> ?b) -> List ?b\n\nBy main conclusion:\nüîç |- tsum _ = _ * tsum _\nfinds all lemmas where the conclusion (the subexpression to the right of all ‚Üí and ‚àÄ) has the given shape.\n\nAs before, if the pattern has parameters, they are matched against the hypotheses of the lemma in any order; for example,\nüîç |- _ < _ ‚Üí tsum _ < tsum _\nwill find tsum_lt_tsum even though the hypothesis f i < g i is not the last.\n\nIf you pass more than one such search filter, separated by commas Loogle will return lemmas which match all of them. The search\nüîç Real.sin, \\\"two\\\", tsum, _ * _, _ ^ _, |- _ < _ ‚Üí _\nwoould find all lemmas which mention the constants Real.sin and tsum, have \\\"two\\\" as a substring of the lemma name, include a product and a power somewhere in the type, and have a hypothesis of the form _ < _ (if there were any such lemmas). Metavariables (?a) are assigned independently in each filter.\n\nYou can modify the Loogle server URL by setting the `LEANSEARCHCLIENT_LOOGLE_API_URL` environment variable.\n","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.just_loogle_cmd","kind":"def","line":241,"name":"LeanSearchClient.just_loogle_cmd","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L241-L242"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.loogleCmdImpl\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">loogleCmdImpl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">Lean.Elab.Command.CommandElab</a></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.loogleCmdImpl","kind":"def","line":212,"name":"LeanSearchClient.loogleCmdImpl","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L212-L239"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.loogle_cmd\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">loogle_cmd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Search [Loogle](https://loogle.lean-lang.org/json) from within Lean. This can be used as a command, term or tactic as in the following examples. In the case of a tactic, only valid tactics are displayed.\n\n\n```lean\n#loogle List ?a ‚Üí ?a\n\nexample := #loogle List ?a ‚Üí ?a\n\nexample : 3 ‚â§ 5 := by\n  #loogle Nat.succ_le_succ\n  sorry\n\n```\n\n## Loogle Usage\n\nLoogle finds definitions and lemmas in various ways:\n\nBy constant:\nüîç Real.sin\nfinds all lemmas whose statement somehow mentions the sine function.\n\nBy lemma name substring:\nüîç \\\"differ\\\"\nfinds all lemmas that have \\\"differ\\\" somewhere in their lemma name.\n\nBy subexpression:\nüîç _ * (_ ^ _)\nfinds all lemmas whose statements somewhere include a product where the second argument is raised to some power.\n\nThe pattern can also be non-linear, as in\nüîç Real.sqrt ?a * Real.sqrt ?a\n\nIf the pattern has parameters, they are matched in any order. Both of these will find List.map:\nüîç (?a -> ?b) -> List ?a -> List ?b\nüîç List ?a -> (?a -> ?b) -> List ?b\n\nBy main conclusion:\nüîç |- tsum _ = _ * tsum _\nfinds all lemmas where the conclusion (the subexpression to the right of all ‚Üí and ‚àÄ) has the given shape.\n\nAs before, if the pattern has parameters, they are matched against the hypotheses of the lemma in any order; for example,\nüîç |- _ < _ ‚Üí tsum _ < tsum _\nwill find tsum_lt_tsum even though the hypothesis f i < g i is not the last.\n\nIf you pass more than one such search filter, separated by commas Loogle will return lemmas which match all of them. The search\nüîç Real.sin, \\\"two\\\", tsum, _ * _, _ ^ _, |- _ < _ ‚Üí _\nwoould find all lemmas which mention the constants Real.sin and tsum, have \\\"two\\\" as a substring of the lemma name, include a product and a power somewhere in the type, and have a hypothesis of the form _ < _ (if there were any such lemmas). Metavariables (?a) are assigned independently in each filter.\n\nYou can modify the Loogle server URL by setting the `LEANSEARCHCLIENT_LOOGLE_API_URL` environment variable.\n","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.loogle_cmd","kind":"def","line":159,"name":"LeanSearchClient.loogle_cmd","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L159-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.loogle_filters\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">loogle_filters</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"The argument to `#find`, a list of filters ","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.loogle_filters","kind":"def","line":155,"name":"LeanSearchClient.loogle_filters","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L155-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.loogle_filter\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">loogle_filter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"a single `#find` filter. The `term` can also be an ident or a strlit,\nthese are distinguished in `parseFindFilters` ","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.loogle_filter","kind":"def","line":151,"name":"LeanSearchClient.loogle_filter","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L151-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.turnstyle\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">turnstyle</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"The turnstyle uesd bin `#find`, unicode or ascii allowed ","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.turnstyle","kind":"def","line":148,"name":"LeanSearchClient.turnstyle","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L148-L149"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.loogleUsage\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">loogleUsage</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.loogleUsage","kind":"def","line":108,"name":"LeanSearchClient.loogleUsage","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L108-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.getLoogleQueryJson\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">getLoogleQueryJson</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num_results</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">6</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleResult\">LoogleResult</a></span></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.getLoogleQueryJson","kind":"def","line":57,"name":"LeanSearchClient.getLoogleQueryJson","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L57-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.loogleCache\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">loogleCache</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> (<a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>) <a href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleResult\">LoogleResult</a>)</span></span></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.loogleCache","kind":"opaque","line":54,"name":"LeanSearchClient.loogleCache","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L54-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.instReprLoogleResult\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">instReprLoogleResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleResult\">LoogleResult</a></span></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.instReprLoogleResult","kind":"instance","line":52,"name":"LeanSearchClient.instReprLoogleResult","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L52-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.instReprLoogleResult.repr\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">instReprLoogleResult</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleResult\">LoogleResult</a> ‚Üí <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> ‚Üí <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.instReprLoogleResult.repr","kind":"def","line":52,"name":"LeanSearchClient.instReprLoogleResult.repr","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L52-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.instInhabitedLoogleResult.default\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">instInhabitedLoogleResult</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleResult\">LoogleResult</a></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.instInhabitedLoogleResult.default","kind":"def","line":52,"name":"LeanSearchClient.instInhabitedLoogleResult.default","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L52-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.instInhabitedLoogleResult\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">instInhabitedLoogleResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleResult\">LoogleResult</a></span></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.instInhabitedLoogleResult","kind":"instance","line":52,"name":"LeanSearchClient.instInhabitedLoogleResult","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L52-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleResult.failure\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">LoogleResult</span>.<span class=\"name\">failure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">error</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suggestions</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleResult\">LoogleResult</a></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleResult.failure","kind":"ctor","line":51,"name":"LeanSearchClient.LoogleResult.failure","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleResult.success\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">LoogleResult</span>.<span class=\"name\">success</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./LeanSearchClient/Syntax.html#LeanSearchClient.SearchResult\">SearchResult</a></span> ‚Üí <a href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleResult\">LoogleResult</a></span></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleResult.success","kind":"ctor","line":50,"name":"LeanSearchClient.LoogleResult.success","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleResult.empty\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">LoogleResult</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleResult\">LoogleResult</a></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleResult.empty","kind":"ctor","line":49,"name":"LeanSearchClient.LoogleResult.empty","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleResult\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">LoogleResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleResult","kind":"inductive","line":48,"name":"LeanSearchClient.LoogleResult","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L48-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.instReprLoogleMatch.repr\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">instReprLoogleMatch</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleMatch\">LoogleMatch</a> ‚Üí <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> ‚Üí <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.instReprLoogleMatch.repr","kind":"def","line":46,"name":"LeanSearchClient.instReprLoogleMatch.repr","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.instReprLoogleMatch\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">instReprLoogleMatch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleMatch\">LoogleMatch</a></span></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.instReprLoogleMatch","kind":"instance","line":46,"name":"LeanSearchClient.instReprLoogleMatch","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.instInhabitedLoogleMatch\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">instInhabitedLoogleMatch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleMatch\">LoogleMatch</a></span></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.instInhabitedLoogleMatch","kind":"instance","line":46,"name":"LeanSearchClient.instInhabitedLoogleMatch","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.instInhabitedLoogleMatch.default\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">instInhabitedLoogleMatch</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleMatch\">LoogleMatch</a></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.instInhabitedLoogleMatch.default","kind":"def","line":46,"name":"LeanSearchClient.instInhabitedLoogleMatch.default","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleMatch.doc?\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">LoogleMatch</span>.<span class=\"name\">doc?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleMatch\">LoogleMatch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleMatch.doc?","kind":"def","line":45,"name":"LeanSearchClient.LoogleMatch.doc?","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleMatch.type\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">LoogleMatch</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleMatch\">LoogleMatch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleMatch.type","kind":"def","line":44,"name":"LeanSearchClient.LoogleMatch.type","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleMatch.name\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">LoogleMatch</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleMatch\">LoogleMatch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleMatch.name","kind":"def","line":43,"name":"LeanSearchClient.LoogleMatch.name","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleMatch.mk\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">LoogleMatch</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name </span><span class=\"fn\">type</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doc?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleMatch\">LoogleMatch</a></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleMatch.mk","kind":"ctor","line":42,"name":"LeanSearchClient.LoogleMatch.mk","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleMatch\"><span class=\"name\">LeanSearchClient</span>.<span class=\"name\">LoogleMatch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./LeanSearchClient/LoogleSyntax.html#LeanSearchClient.LoogleMatch","kind":"structure","line":42,"name":"LeanSearchClient.LoogleMatch","sourceLink":"https://github.com/leanprover-community/LeanSearchClient/blob/99657ad92e23804e279f77ea6dbdeebaa1317b98/LeanSearchClient/LoogleSyntax.lean#L42-L46"}}],"imports":["Init","Lean.Elab.Tactic.Meta","Lean.Parser.Basic","Lean.Meta.Tactic.TryThis","LeanSearchClient.Basic","LeanSearchClient.Syntax"],"instances":[{"className":"Inhabited","name":"LeanSearchClient.instInhabitedLoogleMatch","typeNames":["LeanSearchClient.LoogleMatch"]},{"className":"Repr","name":"LeanSearchClient.instReprLoogleMatch","typeNames":["LeanSearchClient.LoogleMatch"]},{"className":"Inhabited","name":"LeanSearchClient.instInhabitedLoogleResult","typeNames":["LeanSearchClient.LoogleResult"]},{"className":"Repr","name":"LeanSearchClient.instReprLoogleResult","typeNames":["LeanSearchClient.LoogleResult"]}],"name":"LeanSearchClient.LoogleSyntax"}