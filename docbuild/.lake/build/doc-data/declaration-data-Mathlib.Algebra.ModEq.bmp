{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.mul_modEq_mul_left\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">mul_modEq_mul_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">p</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">c</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.mul_modEq_mul_left","kind":"theorem","line":319,"name":"AddCommGroup.mul_modEq_mul_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L319-L320"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.mul_modEq_mul_right\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">mul_modEq_mul_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">p</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">c</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.mul_modEq_mul_right","kind":"theorem","line":311,"name":"AddCommGroup.mul_modEq_mul_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L311-L312"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.div_modEq_div\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">div_modEq_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">p</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.div_modEq_div","kind":"theorem","line":308,"name":"AddCommGroup.div_modEq_div","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L308-L309"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.natCast\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">natCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Int/Cast/Defs.html#AddCommGroupWithOne\">AddCommGroupWithOne</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">[MOD</a> <span class=\"fn\">n</span><a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">]</a> → <span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>","info":{"doc":"**Alias** of the reverse direction of `AddCommGroup.natCast_modEq_natCast`.","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.natCast","kind":"theorem","line":301,"name":"AddCommGroup.ModEq.natCast","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L301-L301"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#Nat.ModEq.of_natCast\"><span class=\"name\">Nat</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">of_natCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Int/Cast/Defs.html#AddCommGroupWithOne\">AddCommGroupWithOne</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">[MOD</a> <span class=\"fn\">n</span><a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">]</a></span></div></div>","info":{"doc":"**Alias** of the forward direction of `AddCommGroup.natCast_modEq_natCast`.","docLink":"./Mathlib/Algebra/ModEq.html#Nat.ModEq.of_natCast","kind":"theorem","line":301,"name":"Nat.ModEq.of_natCast","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L301-L301"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.intCast\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">intCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Int/Cast/Defs.html#AddCommGroupWithOne\">AddCommGroupWithOne</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">z</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">z</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">↑<span class=\"fn\">z</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>","info":{"doc":"**Alias** of the reverse direction of `AddCommGroup.intCast_modEq_intCast`.","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.intCast","kind":"theorem","line":299,"name":"AddCommGroup.ModEq.intCast","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L299-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.of_intCast\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">of_intCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Int/Cast/Defs.html#AddCommGroupWithOne\">AddCommGroupWithOne</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">z</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">↑<span class=\"fn\">z</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">z</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>","info":{"doc":"**Alias** of the forward direction of `AddCommGroup.intCast_modEq_intCast`.","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.of_intCast","kind":"theorem","line":299,"name":"AddCommGroup.ModEq.of_intCast","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L299-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.natCast_modEq_natCast\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">natCast_modEq_natCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Int/Cast/Defs.html#AddCommGroupWithOne\">AddCommGroupWithOne</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">[MOD</a> <span class=\"fn\">n</span><a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.natCast_modEq_natCast","kind":"theorem","line":294,"name":"AddCommGroup.natCast_modEq_natCast","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L294-L297"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.intCast_modEq_intCast'\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">intCast_modEq_intCast'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Int/Cast/Defs.html#AddCommGroupWithOne\">AddCommGroupWithOne</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.intCast_modEq_intCast'","kind":"theorem","line":290,"name":"AddCommGroup.intCast_modEq_intCast'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L290-L292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.intCast_modEq_intCast\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">intCast_modEq_intCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Int/Cast/Defs.html#AddCommGroupWithOne\">AddCommGroupWithOne</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">z</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">↑<span class=\"fn\">z</span></span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">z</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.intCast_modEq_intCast","kind":"theorem","line":285,"name":"AddCommGroup.intCast_modEq_intCast","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L285-L288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_iff_int_modEq\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_iff_int_modEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">z</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">z</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">[ZMOD</a> <span class=\"fn\">z</span><a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_iff_int_modEq","kind":"theorem","line":277,"name":"AddCommGroup.modEq_iff_int_modEq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L277-L279"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.nsmul_cases\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">nsmul_cases</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">∃ <span class=\"fn\">i</span> &lt; <span class=\"fn\">n</span>, <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>","info":{"doc":"**Alias** of the forward direction of `AddCommGroup.modEq_nsmul_cases`.\n\n---\n\nIf `a ≡ b [PMOD p]`, then mod `n • p` there are `n` cases. ","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.nsmul_cases","kind":"theorem","line":273,"name":"AddCommGroup.ModEq.nsmul_cases","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L273-L273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_nsmul_cases\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_nsmul_cases</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">i</span> &lt; <span class=\"fn\">n</span>, <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>","info":{"doc":"If `a ≡ b [PMOD p]`, then mod `n • p` there are `n` cases. ","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_nsmul_cases","kind":"theorem","line":255,"name":"AddCommGroup.modEq_nsmul_cases","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L255-L271"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.not_modEq_iff_ne_mod_zmultiples\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">not_modEq_iff_ne_mod_zmultiples</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.not_modEq_iff_ne_mod_zmultiples","kind":"theorem","line":251,"name":"AddCommGroup.not_modEq_iff_ne_mod_zmultiples","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L251-L253"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_iff_eq_mod_zmultiples\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_iff_eq_mod_zmultiples</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_iff_eq_mod_zmultiples","kind":"theorem","line":246,"name":"AddCommGroup.modEq_iff_eq_mod_zmultiples","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L246-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.not_modEq_iff_ne_add_zsmul\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">not_modEq_iff_ne_add_zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">z</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.not_modEq_iff_ne_add_zsmul","kind":"theorem","line":243,"name":"AddCommGroup.not_modEq_iff_ne_add_zsmul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L243-L244"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_zero_iff_eq_zsmul\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_zero_iff_eq_zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">0</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">z</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_zero_iff_eq_zsmul","kind":"theorem","line":239,"name":"AddCommGroup.modEq_zero_iff_eq_zsmul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L239-L241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_iff_eq_add_zsmul\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_iff_eq_add_zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">z</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_iff_eq_add_zsmul","kind":"theorem","line":235,"name":"AddCommGroup.modEq_iff_eq_add_zsmul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L235-L236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.add_modEq_right\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">add_modEq_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">0</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.add_modEq_right","kind":"theorem","line":231,"name":"AddCommGroup.add_modEq_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L231-L232"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.add_modEq_left\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">add_modEq_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">0</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.add_modEq_left","kind":"theorem","line":228,"name":"AddCommGroup.add_modEq_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L228-L229"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.sub_modEq_zero\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">sub_modEq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">0</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.sub_modEq_zero","kind":"theorem","line":225,"name":"AddCommGroup.sub_modEq_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L225-L226"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.sub_modEq_iff_modEq_add\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">sub_modEq_iff_modEq_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.sub_modEq_iff_modEq_add","kind":"theorem","line":222,"name":"AddCommGroup.sub_modEq_iff_modEq_add","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L222-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.sub_modEq_iff_modEq_add'\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">sub_modEq_iff_modEq_add'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.sub_modEq_iff_modEq_add'","kind":"theorem","line":219,"name":"AddCommGroup.sub_modEq_iff_modEq_add'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L219-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_sub_iff_add_modEq\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_sub_iff_add_modEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_sub_iff_add_modEq","kind":"theorem","line":216,"name":"AddCommGroup.modEq_sub_iff_add_modEq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L216-L217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_sub_iff_add_modEq'\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_sub_iff_add_modEq'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_sub_iff_add_modEq'","kind":"theorem","line":213,"name":"AddCommGroup.modEq_sub_iff_add_modEq'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L213-L214"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_right_cancel'\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">sub_right_cancel'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_right_cancel'","kind":"theorem","line":208,"name":"AddCommGroup.ModEq.sub_right_cancel'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L208-L209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_left_cancel'\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">sub_left_cancel'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_left_cancel'","kind":"theorem","line":205,"name":"AddCommGroup.ModEq.sub_left_cancel'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L205-L206"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_right_cancel'\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">add_right_cancel'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_right_cancel'","kind":"theorem","line":202,"name":"AddCommGroup.ModEq.add_right_cancel'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L202-L203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_left_cancel'\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">add_left_cancel'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_left_cancel'","kind":"theorem","line":199,"name":"AddCommGroup.ModEq.add_left_cancel'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L199-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_right\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">sub_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_right","kind":"theorem","line":196,"name":"AddCommGroup.ModEq.sub_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L196-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_right\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">add_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_right","kind":"theorem","line":193,"name":"AddCommGroup.ModEq.add_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L193-L194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_left\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">sub_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_left","kind":"theorem","line":190,"name":"AddCommGroup.ModEq.sub_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L190-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_left\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">add_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_left","kind":"theorem","line":187,"name":"AddCommGroup.ModEq.add_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L187-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_right_cancel\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">sub_right_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">a₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>","info":{"doc":"**Alias** of the forward direction of `AddCommGroup.ModEq.sub_iff_right`.","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_right_cancel","kind":"theorem","line":185,"name":"AddCommGroup.ModEq.sub_right_cancel","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L185-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_left_cancel\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">sub_left_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>","info":{"doc":"**Alias** of the forward direction of `AddCommGroup.ModEq.sub_iff_left`.","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_left_cancel","kind":"theorem","line":183,"name":"AddCommGroup.ModEq.sub_left_cancel","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L183-L183"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\"><span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>","info":{"doc":"**Alias** of the reverse direction of `AddCommGroup.ModEq.sub_iff_left`.","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub","kind":"theorem","line":183,"name":"AddCommGroup.ModEq.sub","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L183-L183"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_right_cancel\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">add_right_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">a₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>","info":{"doc":"**Alias** of the forward direction of `AddCommGroup.ModEq.add_iff_right`.","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_right_cancel","kind":"theorem","line":181,"name":"AddCommGroup.ModEq.add_right_cancel","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L181-L181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\"><span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>","info":{"doc":"**Alias** of the reverse direction of `AddCommGroup.ModEq.add_iff_left`.","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add","kind":"theorem","line":179,"name":"AddCommGroup.ModEq.add","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L179-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_left_cancel\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">add_left_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>","info":{"doc":"**Alias** of the forward direction of `AddCommGroup.ModEq.add_iff_left`.","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_left_cancel","kind":"theorem","line":179,"name":"AddCommGroup.ModEq.add_left_cancel","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L179-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_iff_right\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">sub_iff_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → (<span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_iff_right","kind":"theorem","line":174,"name":"AddCommGroup.ModEq.sub_iff_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L174-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_iff_left\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">sub_iff_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → (<span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.sub_iff_left","kind":"theorem","line":169,"name":"AddCommGroup.ModEq.sub_iff_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L169-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_iff_right\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">add_iff_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → (<span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_iff_right","kind":"theorem","line":164,"name":"AddCommGroup.ModEq.add_iff_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L164-L167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_iff_left\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">add_iff_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → (<span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b₂</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_iff_left","kind":"theorem","line":159,"name":"AddCommGroup.ModEq.add_iff_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L159-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.nsmul_cancel\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">nsmul_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NoZeroSMulDivisors/Defs.html#NoZeroSMulDivisors\">NoZeroSMulDivisors</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>","info":{"doc":"**Alias** of the forward direction of `AddCommGroup.nsmul_modEq_nsmul`.","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.nsmul_cancel","kind":"theorem","line":155,"name":"AddCommGroup.ModEq.nsmul_cancel","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L155-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.zsmul_cancel\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">zsmul_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">z</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NoZeroSMulDivisors/Defs.html#NoZeroSMulDivisors\">NoZeroSMulDivisors</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">z</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>","info":{"doc":"**Alias** of the forward direction of `AddCommGroup.zsmul_modEq_zsmul`.","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.zsmul_cancel","kind":"theorem","line":153,"name":"AddCommGroup.ModEq.zsmul_cancel","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L153-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.nsmul_modEq_nsmul\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">nsmul_modEq_nsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NoZeroSMulDivisors/Defs.html#NoZeroSMulDivisors\">NoZeroSMulDivisors</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.nsmul_modEq_nsmul","kind":"theorem","line":148,"name":"AddCommGroup.nsmul_modEq_nsmul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L148-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.zsmul_modEq_zsmul\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">zsmul_modEq_zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">z</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NoZeroSMulDivisors/Defs.html#NoZeroSMulDivisors\">NoZeroSMulDivisors</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">z</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.zsmul_modEq_zsmul","kind":"theorem","line":143,"name":"AddCommGroup.zsmul_modEq_zsmul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L143-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.nsmul\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">nsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.nsmul","kind":"theorem","line":138,"name":"AddCommGroup.ModEq.nsmul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L138-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.zsmul\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">z</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.zsmul","kind":"theorem","line":135,"name":"AddCommGroup.ModEq.zsmul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L135-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.of_nsmul\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">of_nsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.of_nsmul","kind":"theorem","line":132,"name":"AddCommGroup.ModEq.of_nsmul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L132-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.of_zsmul\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">of_zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">z</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.of_zsmul","kind":"theorem","line":129,"name":"AddCommGroup.ModEq.of_zsmul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L129-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.nsmul_add\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">nsmul_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.nsmul_add","kind":"theorem","line":126,"name":"AddCommGroup.ModEq.nsmul_add","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L126-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_nsmul\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">add_nsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_nsmul","kind":"theorem","line":123,"name":"AddCommGroup.ModEq.add_nsmul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L123-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.zsmul_add\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">zsmul_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">z</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.zsmul_add","kind":"theorem","line":120,"name":"AddCommGroup.ModEq.zsmul_add","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L120-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_zsmul\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">add_zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">z</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.add_zsmul","kind":"theorem","line":117,"name":"AddCommGroup.ModEq.add_zsmul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L117-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.nsmul_add_modEq\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">nsmul_add_modEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.nsmul_add_modEq","kind":"theorem","line":112,"name":"AddCommGroup.nsmul_add_modEq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L112-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.add_nsmul_modEq\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">add_nsmul_modEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.add_nsmul_modEq","kind":"theorem","line":109,"name":"AddCommGroup.add_nsmul_modEq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L109-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.zsmul_add_modEq\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">zsmul_add_modEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">z</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.zsmul_add_modEq","kind":"theorem","line":106,"name":"AddCommGroup.zsmul_add_modEq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L106-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.add_zsmul_modEq\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">add_zsmul_modEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">z</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.add_zsmul_modEq","kind":"theorem","line":103,"name":"AddCommGroup.add_zsmul_modEq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L103-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.zsmul_modEq_zero\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">zsmul_modEq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">z</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">0</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.zsmul_modEq_zero","kind":"theorem","line":99,"name":"AddCommGroup.zsmul_modEq_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L99-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.self_modEq_zero\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">self_modEq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">0</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.self_modEq_zero","kind":"theorem","line":95,"name":"AddCommGroup.self_modEq_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L95-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_zero\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">0</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_zero","kind":"theorem","line":92,"name":"AddCommGroup.modEq_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L92-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_sub\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_sub","kind":"theorem","line":89,"name":"AddCommGroup.modEq_sub","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L89-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.of_neg'\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">of_neg'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>","info":{"doc":"**Alias** of the forward direction of `AddCommGroup.modEq_neg`.","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.of_neg'","kind":"theorem","line":87,"name":"AddCommGroup.ModEq.of_neg'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L87-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.neg'\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">neg'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>","info":{"doc":"**Alias** of the reverse direction of `AddCommGroup.modEq_neg`.","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.neg'","kind":"theorem","line":87,"name":"AddCommGroup.ModEq.neg'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L87-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_neg\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_neg","kind":"theorem","line":83,"name":"AddCommGroup.modEq_neg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L83-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.neg\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>","info":{"doc":"**Alias** of the reverse direction of `AddCommGroup.neg_modEq_neg`.","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.neg","kind":"theorem","line":81,"name":"AddCommGroup.ModEq.neg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.of_neg\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">of_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>","info":{"doc":"**Alias** of the forward direction of `AddCommGroup.neg_modEq_neg`.","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.of_neg","kind":"theorem","line":81,"name":"AddCommGroup.ModEq.of_neg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.neg_modEq_neg\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">neg_modEq_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.neg_modEq_neg","kind":"theorem","line":77,"name":"AddCommGroup.neg_modEq_neg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L77-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.instIsReflModEq\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">instIsReflModEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsRefl\">IsRefl</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">ModEq</a> <span class=\"fn\">p</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.instIsReflModEq","kind":"instance","line":74,"name":"AddCommGroup.instIsReflModEq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L74-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.instIsTransModEq\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">instIsTransModEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsTrans\">IsTrans</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">ModEq</a> <span class=\"fn\">p</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.instIsTransModEq","kind":"instance","line":71,"name":"AddCommGroup.instIsTransModEq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L71-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.trans\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.trans","kind":"theorem","line":67,"name":"AddCommGroup.ModEq.trans","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L67-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.symm\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> → <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></span></div></div>","info":{"doc":"**Alias** of the forward direction of `AddCommGroup.modEq_comm`.","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq.symm","kind":"theorem","line":63,"name":"AddCommGroup.ModEq.symm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_comm\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_comm","kind":"theorem","line":60,"name":"AddCommGroup.modEq_comm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L60-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_rfl\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_rfl","kind":"theorem","line":57,"name":"AddCommGroup.modEq_rfl","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L57-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_refl\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">modEq_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">≡</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">[PMOD</a> <span class=\"fn\">p</span><a href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\">]</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.modEq_refl","kind":"theorem","line":53,"name":"AddCommGroup.modEq_refl","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L53-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.«term_≡_[PMOD_]»\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">«term_≡_[PMOD_]»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>","info":{"doc":"`a ≡ b [PMOD p]` means that `b` is congruent to `a` modulo `p`.\n\nEquivalently (as shown in `Algebra.Order.ToIntervalMod`), `b` does not lie in the open interval\n`(a, a + p)` modulo `p`, or `toIcoMod hp a` disagrees with `toIocMod hp a` at `b`, or\n`toIcoDiv hp a` disagrees with `toIocDiv hp a` at `b`. ","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.«term_≡_[PMOD_]»","kind":"def","line":50,"name":"AddCommGroup.«term_≡_[PMOD_]»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L50-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">ModEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"`a ≡ b [PMOD p]` means that `b` is congruent to `a` modulo `p`.\n\nEquivalently (as shown in `Algebra.Order.ToIntervalMod`), `b` does not lie in the open interval\n`(a, a + p)` modulo `p`, or `toIcoMod hp a` disagrees with `toIocMod hp a` at `b`, or\n`toIcoDiv hp a` disagrees with `toIocDiv hp a` at `b`. ","docLink":"./Mathlib/Algebra/ModEq.html#AddCommGroup.ModEq","kind":"def","line":42,"name":"AddCommGroup.ModEq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/ModEq.lean#L42-L48"}}],"imports":["Init","Mathlib.Algebra.Field.Basic","Mathlib.Algebra.NoZeroSMulDivisors.Basic","Mathlib.Data.Int.ModEq","Mathlib.GroupTheory.QuotientGroup.Defs","Mathlib.Algebra.Group.Subgroup.ZPowers.Basic"],"instances":[{"className":"IsTrans","name":"AddCommGroup.instIsTransModEq","typeNames":["AddCommGroup.ModEq"]},{"className":"IsRefl","name":"AddCommGroup.instIsReflModEq","typeNames":["AddCommGroup.ModEq"]}],"name":"Mathlib.Algebra.ModEq"}