{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.getFieldsToParents\"><span class=\"name\">Lean</span>.<span class=\"name\">getFieldsToParents</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Get the projections that are projections to parent structures. Similar to `getParentStructures`,\nexcept that this returns the (last component of the) projection names instead of the parent names.\n","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.getFieldsToParents","kind":"def","line":485,"name":"Lean.getFieldsToParents","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L485-L490"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.forallNot_of_notExists.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">forallNot_of_notExists</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lvl</span> : <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A </span><span class=\"fn\">p </span><span class=\"fn\">hNotEx</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>","info":{"doc":"Given `(hNotEx : Not (@Exists.{lvl} A p))`,\nreturn a `forall x, Not (p x)` and a proof for it.\n\nThis function handles nested existentials. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.forallNot_of_notExists.go","kind":"opaque","line":465,"name":"Lean.Expr.forallNot_of_notExists.go","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L465-L481"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.forallNot_of_notExists\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">forallNot_of_notExists</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ex </span><span class=\"fn\">hNotEx</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>","info":{"doc":"Given `(hNotEx : Not ex)` where `ex` is of the form `Exists x, p x`,\nreturn a `forall x, Not (p x)` and a proof for it.\n\nThis function handles nested existentials. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.forallNot_of_notExists","kind":"def","line":453,"name":"Lean.Expr.forallNot_of_notExists","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L453-L481"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.rewriteType\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">rewriteType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e </span><span class=\"fn\">eq</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Rewrites the type of `e` via some `eq`, then moves `e` into the new type via `Eq.mp`.\n\nRewrites with a fresh metavariable as the ambient goal.\nFails if the rewrite produces any subgoals.\n","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.rewriteType","kind":"def","line":444,"name":"Lean.Expr.rewriteType","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L444-L451"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.rewrite\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">rewrite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e </span><span class=\"fn\">eq</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Rewrites `e` via some `eq`, producing a proof `e = e'` for some `e'`.\n\nRewrites with a fresh metavariable as the ambient goal.\nFails if the rewrite produces any subgoals.\n","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.rewrite","kind":"def","line":433,"name":"Lean.Expr.rewrite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L433-L442"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.containsConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">containsConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns true if `e` contains a name `n` where `p n` is true. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.containsConst","kind":"def","line":428,"name":"Lean.Expr.containsConst","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L428-L431"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.reduceProjStruct?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">reduceProjStruct?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"If `e` is a projection of the structure constructor, reduce the projection.\nOtherwise returns `none`. If this function detects that expression is ill-typed, throws an error.\nFor example, given `Prod.fst (x, y)`, returns `some x`. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.reduceProjStruct?","kind":"def","line":404,"name":"Lean.Expr.reduceProjStruct?","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L404-L426"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.mkProjection\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">mkProjection</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fieldName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"If `e` has a structure as type with field `fieldName` (either directly or in a parent\nstructure), `mkProjection e fieldName` creates the projection expression `e.fieldName` ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.mkProjection","kind":"def","line":390,"name":"Lean.Expr.mkProjection","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L390-L402"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.mkDirectProjection\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">mkDirectProjection</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fieldName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"If `e` has a structure as type with field `fieldName`, `mkDirectProjection e fieldName` creates\nthe projection expression `e.fieldName` ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.mkDirectProjection","kind":"def","line":381,"name":"Lean.Expr.mkDirectProjection","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L381-L388"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.addLocalVarInfoForBinderIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">addLocalVarInfoForBinderIdent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tk</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.binderIdent</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Annotates a `binderIdent` with the binder information from an `fvar`. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.addLocalVarInfoForBinderIdent","kind":"def","line":372,"name":"Lean.Expr.addLocalVarInfoForBinderIdent","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L372-L379"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.mapForallBinderNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">mapForallBinderNames</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></div></div>","info":{"doc":"Map binder names in a nested forall `(a₁ : α₁) → ... → (aₙ : αₙ) → _` ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.mapForallBinderNames","kind":"def","line":366,"name":"Lean.Expr.mapForallBinderNames","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L366-L369"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.getBinderName\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getBinderName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"`getBinderName e` returns `some n` if `e` is an expression of the form `∀ n, ...`\nand `none` otherwise. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.getBinderName","kind":"def","line":359,"name":"Lean.Expr.getBinderName","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L359-L364"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.renameBVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">renameBVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">old </span><span class=\"fn\">new</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"Traverses an expression `e` and renames bound variables named `old` to `new`. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.renameBVar","kind":"def","line":347,"name":"Lean.Expr.renameBVar","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L347-L356"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.modifyArgM\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">modifyArgM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifier</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Lean/Expr.html#Lean.Expr.getAppNumArgs\">getAppNumArgs</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given `f a₀ a₁ ... aₙ₋₁`, runs `modifier` on the `i`th argument.\nAn argument `n` may be provided which says how many arguments we are expecting `e` to have. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.modifyArgM","kind":"def","line":339,"name":"Lean.Expr.modifyArgM","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L339-L345"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.getArg?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getArg?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Lean/Expr.html#Lean.Expr.getAppNumArgs\">getAppNumArgs</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given `f a₀ a₁ ... aₙ₋₁`, returns the `i`th argument or none if out of bounds. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.getArg?","kind":"def","line":335,"name":"Lean.Expr.getArg?","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L335-L337"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.getRevArg?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getRevArg?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.getRevArg?","kind":"def","line":330,"name":"Lean.Expr.getRevArg?","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L330-L333"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.setArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">setArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Lean/Expr.html#Lean.Expr.getAppNumArgs\">getAppNumArgs</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"Given `f a₀ a₁ ... aₙ₋₁`, sets the argument on the `i`th argument to `x` or\nreturns the original expression if out of bounds. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.setArg","kind":"def","line":325,"name":"Lean.Expr.setArg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L325-L328"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.modifyArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">modifyArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifier</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Lean/Expr.html#Lean.Expr.getAppNumArgs\">getAppNumArgs</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"Given `f a₀ a₁ ... aₙ₋₁`, runs `modifier` on the `i`th argument or\nreturns the original expression if out of bounds. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.modifyArg","kind":"def","line":320,"name":"Lean.Expr.modifyArg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L320-L323"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.modifyRevArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">modifyRevArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifier</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.modifyRevArg","kind":"def","line":315,"name":"Lean.Expr.modifyRevArg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L315-L318"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.modifyAppArgM\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">modifyAppArgM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifier</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.modifyAppArgM","kind":"def","line":310,"name":"Lean.Expr.modifyAppArgM","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L310-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.sides?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">sides?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>","info":{"doc":"Given a proposition `ty` that is an `Eq`, `Iff`, or `HEq`, returns `(tyLhs, lhs, tyRhs, rhs)`,\nwhere `lhs : tyLhs` and `rhs : tyRhs`,\nand where `lhs` is related to `rhs` by the respective relation.\n\nSee also `Lean.Expr.iff?`, `Lean.Expr.eq?`, and `Lean.Expr.heq?`. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.sides?","kind":"def","line":293,"name":"Lean.Expr.sides?","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L293-L304"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.lt?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">lt?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>","info":{"doc":"`Lean.Expr.lt? e` takes `e : Expr` as input.\nIf `e` represents `a < b`, then it returns `some (t, a, b)`, where `t` is the Type of `a`,\notherwise, it returns `none`. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.lt?","kind":"def","line":286,"name":"Lean.Expr.lt?","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L286-L291"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.le?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">le?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>","info":{"doc":"`Lean.Expr.le? e` takes `e : Expr` as input.\nIf `e` represents `a ≤ b`, then it returns `some (t, a, b)`, where `t` is the Type of `a`,\notherwise, it returns `none`. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.le?","kind":"def","line":279,"name":"Lean.Expr.le?","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L279-L284"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.ne?'\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">ne?'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>","info":{"doc":"Tests is if an expression matches either `x ≠ y` or `¬ (x = y)`.\nIf it matches, returns `some (type, x, y)`. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.ne?'","kind":"def","line":274,"name":"Lean.Expr.ne?'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L274-L277"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.zero?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">zero?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Test if an expression is either `Nat.zero`, or `OfNat.ofNat 0`. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.zero?","kind":"def","line":268,"name":"Lean.Expr.zero?","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L268-L272"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.numeral?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">numeral?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Return `some n` if `e` is one of the following\n- a nat literal (numeral)\n- `Nat.zero`\n- `Nat.succ x` where `isNumeral x`\n- `OfNat.ofNat _ x _` where `isNumeral x` ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.numeral?","kind":"opaque","line":249,"name":"Lean.Expr.numeral?","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L249-L266"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.ofInt\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></div></div>","info":{"doc":"Construct the term of type `α` for a given integer\n(doing typeclass search for the `OfNat` and `Neg` instances required). ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.ofInt","kind":"def","line":241,"name":"Lean.Expr.ofInt","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L241-L245"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.ofNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Construct the term of type `α` for a given natural number\n(doing typeclass search for the `OfNat` instance required). ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.ofNat","kind":"def","line":236,"name":"Lean.Expr.ofNat","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L236-L239"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.ensureHasNoMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">ensureHasNoMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Check that an expression contains no metavariables (after instantiation). ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.ensureHasNoMVars","kind":"def","line":229,"name":"Lean.Expr.ensureHasNoMVars","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L229-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.letDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">letDepth</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Counts the immediate depth of a nested `let` expression. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.letDepth","kind":"def","line":222,"name":"Lean.Expr.letDepth","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L222-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.isConstantApplication.aux\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isConstantApplication</span>.<span class=\"name\">aux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"`aux depth e n` checks whether the body of the `n`-th lambda of `e` has loose bvar\n`depth - 1`. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.isConstantApplication.aux","kind":"def","line":217,"name":"Lean.Expr.isConstantApplication.aux","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L217-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.isConstantApplication\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isConstantApplication</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"`isConstantApplication e` checks whether `e` is syntactically an application of the form\n`(fun x₁ ⋯ xₙ => H) y₁ ⋯ yₙ` where `H` does not contain the variable `xₙ`. In other words,\nit does a syntactic check that the expression does not depend on `yₙ`. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.isConstantApplication","kind":"def","line":209,"name":"Lean.Expr.isConstantApplication","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L209-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.type?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">type?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span></span></div></div>","info":{"doc":"If an `Expr` has the form `Type u`, then return `some u`, otherwise `none`. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.type?","kind":"def","line":204,"name":"Lean.Expr.type?","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L204-L207"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.eraseProofs\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">eraseProofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Erase proofs in an expression by replacing them with `sorry`s.\n\nThis function replaces all proofs in the expression\nand in the types that appear in the expression\nby `sorryAx`s.\nThe resulting expression has the same type as the old one.\n\nIt is useful, e.g., to verify if the proof-irrelevant part of a definition depends on a variable.\n","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.eraseProofs","kind":"def","line":187,"name":"Lean.Expr.eraseProofs","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L187-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.getAppApps\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getAppApps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given `f a b c`, return `#[f a, f a b, f a b c]`.\nEach entry in the array is an `Expr.app`,\nand this array has the same length as the one returned by `Lean.Expr.getAppArgs`. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.getAppApps","kind":"def","line":178,"name":"Lean.Expr.getAppApps","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L178-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.bvarIdx?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">bvarIdx?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.bvarIdx?","kind":"def","line":169,"name":"Lean.Expr.bvarIdx?","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L169-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.mkConst'\"><span class=\"name\">Lean</span>.<span class=\"name\">mkConst'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Same as `mkConst`, but with fresh level metavariables. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.mkConst'","kind":"def","line":161,"name":"Lean.mkConst'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L161-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.toDeclaration!\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">toDeclaration!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a> → <a href=\"./Lean/Declaration.html#Lean.Declaration\">Declaration</a></span></div></div>","info":{"doc":"Turn a `ConstantInfo` into a declaration. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.toDeclaration!","kind":"def","line":146,"name":"Lean.ConstantInfo.toDeclaration!","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L146-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateValue\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">updateValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a></span></span></div></div>","info":{"doc":"Update the value of a `ConstantInfo`, if it has one. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateValue","kind":"def","line":139,"name":"Lean.ConstantInfo.updateValue","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L139-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateLevelParams\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">updateLevelParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelParams</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a></div></div>","info":{"doc":"Update the level parameters of a `ConstantInfo`. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateLevelParams","kind":"def","line":134,"name":"Lean.ConstantInfo.updateLevelParams","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L134-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateType\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">updateType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a></div></div>","info":{"doc":"Update the type of a `ConstantInfo`. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateType","kind":"def","line":130,"name":"Lean.ConstantInfo.updateType","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L130-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateName\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">updateName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a></div></div>","info":{"doc":"Update the name of a `ConstantInfo`. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateName","kind":"def","line":126,"name":"Lean.ConstantInfo.updateName","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L126-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateConstantVal\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">updateConstantVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantVal\">ConstantVal</a> → <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a></span></span></div></div>","info":{"doc":"Update `ConstantVal` (the data common to all constructors of `ConstantInfo`)\nin a `ConstantInfo`. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateConstantVal","kind":"def","line":114,"name":"Lean.ConstantInfo.updateConstantVal","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L114-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.isThm\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">isThm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether this `ConstantInfo` is a theorem. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.isThm","kind":"def","line":109,"name":"Lean.ConstantInfo.isThm","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L109-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.isDef\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">isDef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether this `ConstantInfo` is a definition. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.isDef","kind":"def","line":104,"name":"Lean.ConstantInfo.isDef","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L104-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Name.isBlackListed\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">isBlackListed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.isBlackListed","kind":"def","line":90,"name":"Lean.Name.isBlackListed","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L90-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Name.isPrefixOf?\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">isPrefixOf?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pre </span><span class=\"fn\">nm</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"`isPrefixOf? pre nm` returns `some post` if `nm = pre ++ post`.\nNote that this includes the case where `nm` has multiple more namespaces.\nIf `pre` is not a prefix of `nm`, it returns `none`. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.isPrefixOf?","kind":"def","line":76,"name":"Lean.Name.isPrefixOf?","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L76-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Name.splitAt\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">splitAt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nm</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"`nm.splitAt n` splits a name `nm` in two parts, such that the *second* part has depth `n`,\ni.e. `(nm.splitAt n).2.getNumParts = n` (assuming `nm.getNumParts ≥ n`).\nExample: ``splitAt `foo.bar.baz.back.bat 1 = (`foo.bar.baz.back, `bat)``. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.splitAt","kind":"def","line":69,"name":"Lean.Name.splitAt","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L69-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Name.lastComponentAsString\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">lastComponentAsString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Get the last field of a name as a string.\nDoesn't raise an error when the last component is a numeric field. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.lastComponentAsString","kind":"def","line":62,"name":"Lean.Name.lastComponentAsString","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L62-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Name.updateLast\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">updateLast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Update the last component of a name. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.updateLast","kind":"def","line":57,"name":"Lean.Name.updateLast","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L57-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Name.fromComponents.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">fromComponents</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></span></div></div>","info":{"doc":"Auxiliary for `Name.fromComponents` ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.fromComponents.go","kind":"def","line":53,"name":"Lean.Name.fromComponents.go","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L53-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Name.fromComponents\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">fromComponents</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Build a name from components.\nFor example, ``from_components [`foo, `bar]`` becomes ``` `foo.bar```.\nIt is the inverse of `Name.components` on list of names that have single components. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.fromComponents","kind":"def","line":48,"name":"Lean.Name.fromComponents","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L48-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Name.mapPrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">mapPrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"Find the largest prefix `n` of a `Name` such that `f n != none`, then replace this prefix\nwith the value of `f n`. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.mapPrefix","kind":"def","line":39,"name":"Lean.Name.mapPrefix","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L39-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.BinderInfo.brackets\"><span class=\"name\">Lean</span>.<span class=\"name\">BinderInfo</span>.<span class=\"name\">brackets</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a> → <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"The brackets corresponding to a given `BinderInfo`. ","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.BinderInfo.brackets","kind":"def","line":26,"name":"Lean.BinderInfo.brackets","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Lean/Expr/Basic.lean#L26-L31"}}],"imports":["Init","Mathlib.Init","Lean.Meta.Tactic.Rewrite","Batteries.Tactic.Alias","Lean.Elab.Binders"],"instances":[],"name":"Mathlib.Lean.Expr.Basic"}