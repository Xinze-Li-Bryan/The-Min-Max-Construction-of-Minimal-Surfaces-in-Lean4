{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instMulDistribMulActionMonoidHom\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instMulDistribMulActionMonoidHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#MulDistribMulAction\">MulDistribMulAction</a> <span class=\"fn\">M</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommMonoid\">CommMonoid</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#MulDistribMulAction\">MulDistribMulAction</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a> (<span class=\"fn\">A</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">B</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instMulDistribMulActionMonoidHom","kind":"instance","line":260,"name":"DomMulAct.instMulDistribMulActionMonoidHom","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L260-L262"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instDistribMulActionAddMonoidHom\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instDistribMulActionAddMonoidHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Action/Defs.html#DistribMulAction\">DistribMulAction</a> <span class=\"fn\">M</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Action/Defs.html#DistribMulAction\">DistribMulAction</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a> (<span class=\"fn\">A</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">B</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instDistribMulActionAddMonoidHom","kind":"instance","line":256,"name":"DomMulAct.instDistribMulActionAddMonoidHom","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L256-L258"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instMulActionAddMonoidHomOfDistribMulAction\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instMulActionAddMonoidHomOfDistribMulAction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Action/Defs.html#DistribMulAction\">DistribMulAction</a> <span class=\"fn\">M</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#MulAction\">MulAction</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a> (<span class=\"fn\">A</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">B</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instMulActionAddMonoidHomOfDistribMulAction","kind":"instance","line":253,"name":"DomMulAct.instMulActionAddMonoidHomOfDistribMulAction","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L253-L254"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.coe_smul_addMonoidHom\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">coe_smul_addMonoidHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Action/Defs.html#DistribSMul\">DistribSMul</a> <span class=\"fn\">M</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑(<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">f</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.coe_smul_addMonoidHom","kind":"theorem","line":246,"name":"DomMulAct.coe_smul_addMonoidHom","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L246-L247"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk_smul_addMonoidHom_apply\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">mk_smul_addMonoidHom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Action/Defs.html#DistribSMul\">DistribSMul</a> <span class=\"fn\">M</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">f</span>) <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk_smul_addMonoidHom_apply","kind":"theorem","line":243,"name":"DomMulAct.mk_smul_addMonoidHom_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L243-L244"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.smul_addMonoidHom_apply\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">smul_addMonoidHom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Action/Defs.html#DistribSMul\">DistribSMul</a> <span class=\"fn\">M</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">f</span>) <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> (<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.smul_addMonoidHom_apply","kind":"theorem","line":240,"name":"DomMulAct.smul_addMonoidHom_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L240-L241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSMulCommClassAddMonoidHom_1\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instSMulCommClassAddMonoidHom_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M'</span> : <a href=\"./foundational_types.html\">Type</a> u_8}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Action/Defs.html#DistribSMul\">DistribSMul</a> <span class=\"fn\">M</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Action/Defs.html#DistribSMul\">DistribSMul</a> <span class=\"fn\">M'</span> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a> <span class=\"fn\">M'</span> (<span class=\"fn\">A</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">B</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSMulCommClassAddMonoidHom_1","kind":"instance","line":237,"name":"DomMulAct.instSMulCommClassAddMonoidHom_1","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L237-L238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSMulCommClassAddMonoidHom\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instSMulCommClassAddMonoidHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M'</span> : <a href=\"./foundational_types.html\">Type</a> u_8}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Action/Defs.html#DistribSMul\">DistribSMul</a> <span class=\"fn\">M</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Action/Defs.html#DistribSMul\">DistribSMul</a> <span class=\"fn\">M'</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">M</span> <span class=\"fn\">M'</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a> <span class=\"fn\">M'</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a> (<span class=\"fn\">A</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">B</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSMulCommClassAddMonoidHom","kind":"instance","line":234,"name":"DomMulAct.instSMulCommClassAddMonoidHom","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L234-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSMulAddMonoidHom\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instSMulAddMonoidHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Action/Defs.html#DistribSMul\">DistribSMul</a> <span class=\"fn\">M</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#SMul\">SMul</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a> (<span class=\"fn\">A</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">B</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSMulAddMonoidHom","kind":"instance","line":231,"name":"DomMulAct.instSMulAddMonoidHom","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L231-L232"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instMulActionMonoidHom\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instMulActionMonoidHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_8}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#MulDistribMulAction\">MulDistribMulAction</a> <span class=\"fn\">M</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#MulAction\">MulAction</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a> (<span class=\"fn\">A</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">B</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instMulActionMonoidHom","kind":"instance","line":221,"name":"DomMulAct.instMulActionMonoidHom","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L221-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk_smul_monoidHom_apply\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">mk_smul_monoidHom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_8}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#MulDistribMulAction\">MulDistribMulAction</a> <span class=\"fn\">M</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">f</span>) <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk_smul_monoidHom_apply","kind":"theorem","line":218,"name":"DomMulAct.mk_smul_monoidHom_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L218-L219"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.smul_monoidHom_apply\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">smul_monoidHom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_8}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#MulDistribMulAction\">MulDistribMulAction</a> <span class=\"fn\">M</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">f</span>) <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> (<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.smul_monoidHom_apply","kind":"theorem","line":215,"name":"DomMulAct.smul_monoidHom_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L215-L216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSMulCommClassMonoidHom\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instSMulCommClassMonoidHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M'</span> : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_8}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#MulDistribMulAction\">MulDistribMulAction</a> <span class=\"fn\">M</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#MulDistribMulAction\">MulDistribMulAction</a> <span class=\"fn\">M'</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">M</span> <span class=\"fn\">M'</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a> <span class=\"fn\">M'</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a> (<span class=\"fn\">A</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">B</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSMulCommClassMonoidHom","kind":"instance","line":211,"name":"DomMulAct.instSMulCommClassMonoidHom","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L211-L213"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSMulMonoidHom\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instSMulMonoidHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_8}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#MulDistribMulAction\">MulDistribMulAction</a> <span class=\"fn\">M</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#SMul\">SMul</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a> (<span class=\"fn\">A</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">B</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSMulMonoidHom","kind":"instance","line":208,"name":"DomMulAct.instSMulMonoidHom","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L208-L209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instMulDistribMulActionForallOfMulAction\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instMulDistribMulActionForallOfMulAction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#MulAction\">MulAction</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#MulDistribMulAction\">MulDistribMulAction</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">A</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instMulDistribMulActionForallOfMulAction","kind":"instance","line":200,"name":"DomMulAct.instMulDistribMulActionForallOfMulAction","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L200-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instDistribMulActionForallOfMulAction\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instDistribMulActionForallOfMulAction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#MulAction\">MulAction</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Action/Defs.html#DistribMulAction\">DistribMulAction</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">A</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instDistribMulActionForallOfMulAction","kind":"instance","line":196,"name":"DomMulAct.instDistribMulActionForallOfMulAction","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L196-L198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddActionForall\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instAddActionForall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#AddAction\">AddAction</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#AddAction\">AddAction</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddActionForall","kind":"instance","line":191,"name":"DomAddAct.instAddActionForall","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L191-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instMulActionForall\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instMulActionForall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#MulAction\">MulAction</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#MulAction\">MulAction</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instMulActionForall","kind":"instance","line":191,"name":"DomMulAct.instMulActionForall","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L191-L194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instDistribSMulForallOfSMul\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instDistribSMulForallOfSMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#SMul\">SMul</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Action/Defs.html#DistribSMul\">DistribSMul</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">A</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instDistribSMulForallOfSMul","kind":"instance","line":188,"name":"DomMulAct.instDistribSMulForallOfSMul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L188-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSMulZeroClassForallOfSMul\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instSMulZeroClassForallOfSMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#SMul\">SMul</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Action/Defs.html#SMulZeroClass\">SMulZeroClass</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSMulZeroClassForallOfSMul","kind":"instance","line":185,"name":"DomMulAct.instSMulZeroClassForallOfSMul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L185-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instFaithfulVAddForallOfNontrivial\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instFaithfulVAddForallOfNontrivial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#VAdd\">VAdd</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Faithful.html#FaithfulVAdd\">FaithfulVAdd</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Faithful.html#FaithfulVAdd\">FaithfulVAdd</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instFaithfulVAddForallOfNontrivial","kind":"instance","line":176,"name":"DomAddAct.instFaithfulVAddForallOfNontrivial","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L176-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instFaithfulSMulForallOfNontrivial\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instFaithfulSMulForallOfNontrivial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#SMul\">SMul</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Faithful.html#FaithfulSMul\">FaithfulSMul</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Faithful.html#FaithfulSMul\">FaithfulSMul</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instFaithfulSMulForallOfNontrivial","kind":"instance","line":176,"name":"DomMulAct.instFaithfulSMulForallOfNontrivial","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L176-L183"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instVAddCommClassForall_2\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instVAddCommClassForall_2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#VAdd\">VAdd</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#VAdd\">VAdd</a> <span class=\"fn\">N</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#VAddCommClass\">VAddCommClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#VAddCommClass\">VAddCommClass</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a> <span class=\"fn\">N</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instVAddCommClassForall_2","kind":"instance","line":172,"name":"DomAddAct.instVAddCommClassForall_2","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L172-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSMulCommClassForall_2\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instSMulCommClassForall_2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#SMul\">SMul</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#SMul\">SMul</a> <span class=\"fn\">N</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a> <span class=\"fn\">N</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSMulCommClassForall_2","kind":"instance","line":172,"name":"DomMulAct.instSMulCommClassForall_2","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L172-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instVAddCommClassForall_1\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instVAddCommClassForall_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#VAdd\">VAdd</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#VAdd\">VAdd</a> <span class=\"fn\">N</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#VAddCommClass\">VAddCommClass</a> <span class=\"fn\">N</span> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instVAddCommClassForall_1","kind":"instance","line":168,"name":"DomAddAct.instVAddCommClassForall_1","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L168-L168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSMulCommClassForall_1\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instSMulCommClassForall_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#SMul\">SMul</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#SMul\">SMul</a> <span class=\"fn\">N</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">N</span> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSMulCommClassForall_1","kind":"instance","line":168,"name":"DomMulAct.instSMulCommClassForall_1","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L168-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instVAddCommClassForall\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instVAddCommClassForall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#VAdd\">VAdd</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#VAdd\">VAdd</a> <span class=\"fn\">N</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#VAddCommClass\">VAddCommClass</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a> <span class=\"fn\">N</span> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instVAddCommClassForall","kind":"instance","line":164,"name":"DomAddAct.instVAddCommClassForall","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L164-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSMulCommClassForall\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instSMulCommClassForall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#SMul\">SMul</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#SMul\">SMul</a> <span class=\"fn\">N</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Action/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a> <span class=\"fn\">N</span> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSMulCommClassForall","kind":"instance","line":164,"name":"DomMulAct.instSMulCommClassForall","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L164-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.vadd_apply\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">vadd_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#VAdd\">VAdd</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">f</span>) <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> (<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">c</span></span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HVAdd.hVAdd\">+ᵥ</a> <span class=\"fn\">a</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.vadd_apply","kind":"theorem","line":161,"name":"DomAddAct.vadd_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L161-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.smul_apply\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">smul_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#SMul\">SMul</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">f</span>) <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> (<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.smul_apply","kind":"theorem","line":161,"name":"DomMulAct.smul_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L161-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instVAddForall\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instVAddForall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#VAdd\">VAdd</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#VAdd\">VAdd</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instVAddForall","kind":"instance","line":157,"name":"DomAddAct.instVAddForall","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L157-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSMulForall\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instSMulForall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#SMul\">SMul</a> <span class=\"fn\">M</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#SMul\">SMul</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSMulForall","kind":"instance","line":157,"name":"DomMulAct.instSMulForall","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L157-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.symm_mk_zsmul\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">symm_mk_zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SubNegMonoid\">SubNegMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.symm_mk_zsmul","kind":"theorem","line":152,"name":"DomAddAct.symm_mk_zsmul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L152-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.symm_mk_zpow\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">symm_mk_zpow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#DivInvMonoid\">DivInvMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.symm_mk_zpow","kind":"theorem","line":152,"name":"DomMulAct.symm_mk_zpow","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L152-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk_zsmul\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">mk_zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SubNegMonoid\">SubNegMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk\">mk</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk\">mk</a> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk_zsmul","kind":"theorem","line":149,"name":"DomAddAct.mk_zsmul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L149-L149"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk_zpow\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">mk_zpow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#DivInvMonoid\">DivInvMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk_zpow","kind":"theorem","line":149,"name":"DomMulAct.mk_zpow","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L149-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.symm_mk_nsmul\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">symm_mk_nsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.symm_mk_nsmul","kind":"theorem","line":146,"name":"DomAddAct.symm_mk_nsmul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L146-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.symm_mk_pow\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">symm_mk_pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.symm_mk_pow","kind":"theorem","line":146,"name":"DomMulAct.symm_mk_pow","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L146-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk_nsmul\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">mk_nsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk\">mk</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk\">mk</a> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk_nsmul","kind":"theorem","line":143,"name":"DomAddAct.mk_nsmul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L143-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk_pow\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">mk_pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk_pow","kind":"theorem","line":143,"name":"DomMulAct.mk_pow","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L143-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.symm_mk_neg\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">symm_mk_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.symm_mk_neg","kind":"theorem","line":140,"name":"DomAddAct.symm_mk_neg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L140-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.symm_mk_inv\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">symm_mk_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inv\">Inv</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">a</span>)</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.symm_mk_inv","kind":"theorem","line":140,"name":"DomMulAct.symm_mk_inv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L140-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk_neg\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">mk_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk\">mk</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk\">mk</a> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk_neg","kind":"theorem","line":137,"name":"DomAddAct.mk_neg","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L137-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk_inv\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">mk_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inv\">Inv</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a> <span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a> <span class=\"fn\">a</span>)</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk_inv","kind":"theorem","line":137,"name":"DomMulAct.mk_inv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L137-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.symm_mk_add\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">symm_mk_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.symm_mk_add","kind":"theorem","line":134,"name":"DomAddAct.symm_mk_add","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L134-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.symm_mk_mul\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">symm_mk_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.symm_mk_mul","kind":"theorem","line":134,"name":"DomMulAct.symm_mk_mul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L134-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk_add\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">mk_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk\">mk</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk\">mk</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk\">mk</a> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk_add","kind":"theorem","line":131,"name":"DomAddAct.mk_add","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L131-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk_mul\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">mk_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk_mul","kind":"theorem","line":131,"name":"DomMulAct.mk_mul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L131-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.symm_mk_zero\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">symm_mk_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.symm_mk_zero","kind":"theorem","line":128,"name":"DomAddAct.symm_mk_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L128-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.symm_mk_one\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">symm_mk_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#One\">One</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.symm_mk_one","kind":"theorem","line":128,"name":"DomMulAct.symm_mk_one","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L128-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk_zero\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">mk_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk\">mk</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk_zero","kind":"theorem","line":125,"name":"DomAddAct.mk_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L125-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk_one\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">mk_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#One\">One</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\">mk</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk_one","kind":"theorem","line":125,"name":"DomMulAct.mk_one","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L125-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instIsCancelAddOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instIsCancelAddOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCancelAdd\">IsCancelAdd</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCancelAdd\">IsCancelAdd</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instIsCancelAddOfAddOpposite","kind":"instance","line":123,"name":"DomAddAct.instIsCancelAddOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L123-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instIsCancelMulOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instIsCancelMulOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCancelMul\">IsCancelMul</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCancelMul\">IsCancelMul</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instIsCancelMulOfMulOpposite","kind":"instance","line":123,"name":"DomMulAct.instIsCancelMulOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L123-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instIsRightCancelAddOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instIsRightCancelAddOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsRightCancelAdd\">IsRightCancelAdd</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsRightCancelAdd\">IsRightCancelAdd</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instIsRightCancelAddOfAddOpposite","kind":"instance","line":122,"name":"DomAddAct.instIsRightCancelAddOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L122-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instIsRightCancelMulOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instIsRightCancelMulOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsRightCancelMul\">IsRightCancelMul</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsRightCancelMul\">IsRightCancelMul</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instIsRightCancelMulOfMulOpposite","kind":"instance","line":122,"name":"DomMulAct.instIsRightCancelMulOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L122-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instIsLeftCancelAddOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instIsLeftCancelAddOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsLeftCancelAdd\">IsLeftCancelAdd</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsLeftCancelAdd\">IsLeftCancelAdd</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instIsLeftCancelAddOfAddOpposite","kind":"instance","line":121,"name":"DomAddAct.instIsLeftCancelAddOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L121-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instIsLeftCancelMulOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instIsLeftCancelMulOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsLeftCancelMul\">IsLeftCancelMul</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsLeftCancelMul\">IsLeftCancelMul</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instIsLeftCancelMulOfMulOpposite","kind":"instance","line":121,"name":"DomMulAct.instIsLeftCancelMulOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L121-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instMulOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instMulOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instMulOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instMulOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instCommGroupOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instCommGroupOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instCommGroupOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instCommGroupOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instCommMonoidOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instCommMonoidOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommMonoid\">CommMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommMonoid\">CommMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instCommMonoidOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instCommMonoidOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instSubtractionMonoidOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instSubtractionMonoidOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SubtractionMonoid\">SubtractionMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SubtractionMonoid\">SubtractionMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instSubtractionMonoidOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instSubtractionMonoidOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instSemiringOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instSemiringOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instSemiringOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instSemiringOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instDivInvMonoidOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instDivInvMonoidOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#DivInvMonoid\">DivInvMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#DivInvMonoid\">DivInvMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instDivInvMonoidOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instDivInvMonoidOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instLeftCancelSemigroupOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instLeftCancelSemigroupOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#LeftCancelSemigroup\">LeftCancelSemigroup</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#LeftCancelSemigroup\">LeftCancelSemigroup</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instLeftCancelSemigroupOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instLeftCancelSemigroupOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instCommRingOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instCommRingOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instCommRingOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instCommRingOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSemigroupOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instSemigroupOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Semigroup\">Semigroup</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Semigroup\">Semigroup</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSemigroupOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instSemigroupOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instInvOneClassOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instInvOneClassOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#InvOneClass\">InvOneClass</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#InvOneClass\">InvOneClass</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instInvOneClassOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instInvOneClassOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddRightCancelSemigroupOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instAddRightCancelSemigroupOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddRightCancelSemigroup\">AddRightCancelSemigroup</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddRightCancelSemigroup\">AddRightCancelSemigroup</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddRightCancelSemigroupOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instAddRightCancelSemigroupOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddCancelCommMonoidOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instAddCancelCommMonoidOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCancelCommMonoid\">AddCancelCommMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCancelCommMonoid\">AddCancelCommMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddCancelCommMonoidOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instAddCancelCommMonoidOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instRingOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instRingOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instRingOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instRingOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instCommSemigroupOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instCommSemigroupOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommSemigroup\">CommSemigroup</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommSemigroup\">CommSemigroup</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instCommSemigroupOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instCommSemigroupOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instDivisionAddCommMonoidOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instDivisionAddCommMonoidOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SubtractionCommMonoid\">SubtractionCommMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SubtractionCommMonoid\">SubtractionCommMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instDivisionAddCommMonoidOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instDivisionAddCommMonoidOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instSubNegZeroMonoidOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instSubNegZeroMonoidOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SubNegZeroMonoid\">SubNegZeroMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SubNegZeroMonoid\">SubNegZeroMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instSubNegZeroMonoidOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instSubNegZeroMonoidOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddCommMonoidOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instAddCommMonoidOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddCommMonoidOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instAddCommMonoidOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instInvolutiveNegOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instInvolutiveNegOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#InvolutiveNeg\">InvolutiveNeg</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#InvolutiveNeg\">InvolutiveNeg</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instInvolutiveNegOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instInvolutiveNegOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddZeroClassOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instAddZeroClassOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddZeroClassOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instAddZeroClassOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instDivisionCommMonoidOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instDivisionCommMonoidOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#DivisionCommMonoid\">DivisionCommMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#DivisionCommMonoid\">DivisionCommMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instDivisionCommMonoidOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instDivisionCommMonoidOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instNonUnitalSemiringOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instNonUnitalSemiringOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalSemiring\">NonUnitalSemiring</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalSemiring\">NonUnitalSemiring</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instNonUnitalSemiringOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instNonUnitalSemiringOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instMulOneClassOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instMulOneClassOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#MulOneClass\">MulOneClass</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instMulOneClassOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instMulOneClassOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instInvOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instInvOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inv\">Inv</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inv\">Inv</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instInvOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instInvOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instSubNegAddMonoidOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instSubNegAddMonoidOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SubNegMonoid\">SubNegMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SubNegMonoid\">SubNegMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instSubNegAddMonoidOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instSubNegAddMonoidOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddSemigroupOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instAddSemigroupOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddSemigroup\">AddSemigroup</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddSemigroup\">AddSemigroup</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddSemigroupOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instAddSemigroupOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instNegZeroClassOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instNegZeroClassOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#NegZeroClass\">NegZeroClass</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#NegZeroClass\">NegZeroClass</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instNegZeroClassOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instNegZeroClassOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instAddOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instAddOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instRingOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instRingOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instRingOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instRingOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instInvolutiveInvOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instInvolutiveInvOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#InvolutiveInv\">InvolutiveInv</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#InvolutiveInv\">InvolutiveInv</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instInvolutiveInvOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instInvolutiveInvOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instDivisionMonoidOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instDivisionMonoidOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#DivisionMonoid\">DivisionMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#DivisionMonoid\">DivisionMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instDivisionMonoidOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instDivisionMonoidOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSemiringOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instSemiringOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instSemiringOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instSemiringOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instNonAssocSemiringOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instNonAssocSemiringOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonAssocSemiring\">NonAssocSemiring</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonAssocSemiring\">NonAssocSemiring</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instNonAssocSemiringOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instNonAssocSemiringOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instGroupOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instGroupOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instGroupOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instGroupOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instDivInvOneMonoidOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instDivInvOneMonoidOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#DivInvOneMonoid\">DivInvOneMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#DivInvOneMonoid\">DivInvOneMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instDivInvOneMonoidOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instDivInvOneMonoidOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddLeftCancelMonoidOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instAddLeftCancelMonoidOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddLeftCancelMonoid\">AddLeftCancelMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddLeftCancelMonoid\">AddLeftCancelMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddLeftCancelMonoidOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instAddLeftCancelMonoidOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instRightCancelSemigroupOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instRightCancelSemigroupOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#RightCancelSemigroup\">RightCancelSemigroup</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#RightCancelSemigroup\">RightCancelSemigroup</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instRightCancelSemigroupOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instRightCancelSemigroupOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instCancelCommMonoidOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instCancelCommMonoidOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CancelCommMonoid\">CancelCommMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CancelCommMonoid\">CancelCommMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instCancelCommMonoidOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instCancelCommMonoidOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instRightCancelMonoidOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instRightCancelMonoidOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#RightCancelMonoid\">RightCancelMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#RightCancelMonoid\">RightCancelMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instRightCancelMonoidOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instRightCancelMonoidOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instCommRingOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instCommRingOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instCommRingOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instCommRingOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instNonAssocSemiringOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instNonAssocSemiringOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonAssocSemiring\">NonAssocSemiring</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonAssocSemiring\">NonAssocSemiring</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instNonAssocSemiringOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instNonAssocSemiringOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddMonoidOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instAddMonoidOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddMonoidOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instAddMonoidOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instNonUnitalSemiringOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instNonUnitalSemiringOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalSemiring\">NonUnitalSemiring</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#NonUnitalSemiring\">NonUnitalSemiring</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instNonUnitalSemiringOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instNonUnitalSemiringOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddCancelMonoidOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instAddCancelMonoidOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCancelMonoid\">AddCancelMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCancelMonoid\">AddCancelMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddCancelMonoidOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instAddCancelMonoidOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instNegOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instNegOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instNegOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instNegOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instZeroOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instZeroOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instZeroOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instZeroOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instCancelMonoidOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instCancelMonoidOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CancelMonoid\">CancelMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CancelMonoid\">CancelMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instCancelMonoidOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instCancelMonoidOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddRightCancelMonoidOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instAddRightCancelMonoidOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddRightCancelMonoid\">AddRightCancelMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddRightCancelMonoid\">AddRightCancelMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddRightCancelMonoidOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instAddRightCancelMonoidOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instOneOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instOneOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#One\">One</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#One\">One</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instOneOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instOneOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddLeftCancelSemigroupOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instAddLeftCancelSemigroupOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddLeftCancelSemigroup\">AddLeftCancelSemigroup</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddLeftCancelSemigroup\">AddLeftCancelSemigroup</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddLeftCancelSemigroupOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instAddLeftCancelSemigroupOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddGroupOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instAddGroupOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddGroupOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instAddGroupOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instLeftCancelMonoidOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instLeftCancelMonoidOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#LeftCancelMonoid\">LeftCancelMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#LeftCancelMonoid\">LeftCancelMonoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instLeftCancelMonoidOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instLeftCancelMonoidOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddCommSemigroupOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instAddCommSemigroupOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommSemigroup\">AddCommSemigroup</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommSemigroup\">AddCommSemigroup</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddCommSemigroupOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instAddCommSemigroupOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddCommGroupOfAddOpposite\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">instAddCommGroupOfAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.instAddCommGroupOfAddOpposite","kind":"instance","line":110,"name":"DomAddAct.instAddCommGroupOfAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instMonoidOfMulOpposite\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">instMonoidOfMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.instMonoidOfMulOpposite","kind":"instance","line":110,"name":"DomMulAct.instMonoidOfMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk\"><span class=\"name\">DomAddAct</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\">ᵈᵃᵃ</a></div></div>","info":{"doc":"Equivalence between `M` and `Mᵈᵐᵃ`. ","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct.mk","kind":"def","line":102,"name":"DomAddAct.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L102-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk\"><span class=\"name\">DomMulAct</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">M</span><a href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\">ᵈᵐᵃ</a></div></div>","info":{"doc":"Equivalence between `M` and `Mᵈᵐᵃ`. ","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct.mk","kind":"def","line":101,"name":"DomMulAct.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L101-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#«term_ᵈᵃᵃ»\"><span class=\"name\">«term_ᵈᵃᵃ»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>","info":{"doc":"If `M` additively acts on `α`, then `DomAddAct M` acts on `α → β` as\nwell as some bundled maps from `α`. This is a type synonym for `AddOpposite M`, so this corresponds\nto a right action of `M`. ","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#«term_ᵈᵃᵃ»","kind":"def","line":95,"name":"«term_ᵈᵃᵃ»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L95-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#«term_ᵈᵐᵃ»\"><span class=\"name\">«term_ᵈᵐᵃ»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>","info":{"doc":"If `M` multiplicatively acts on `α`, then `DomMulAct M` acts on `α → β` as well as some\nbundled maps from `α`. This is a type synonym for `MulOpposite M`, so this corresponds to a right\naction of `M`. ","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#«term_ᵈᵐᵃ»","kind":"def","line":94,"name":"«term_ᵈᵐᵃ»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L94-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct\"><span class=\"name\">DomAddAct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>","info":{"doc":"If `M` additively acts on `α`, then `DomAddAct M` acts on `α → β` as\nwell as some bundled maps from `α`. This is a type synonym for `AddOpposite M`, so this corresponds\nto a right action of `M`. ","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomAddAct","kind":"def","line":89,"name":"DomAddAct","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L89-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct\"><span class=\"name\">DomMulAct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>","info":{"doc":"If `M` multiplicatively acts on `α`, then `DomMulAct M` acts on `α → β` as well as some\nbundled maps from `α`. This is a type synonym for `MulOpposite M`, so this corresponds to a right\naction of `M`. ","docLink":"./Mathlib/GroupTheory/GroupAction/DomAct/Basic.html#DomMulAct","kind":"def","line":86,"name":"DomMulAct","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/GroupTheory/GroupAction/DomAct/Basic.lean#L86-L92"}}],"imports":["Init","Mathlib.Algebra.Group.Action.Basic","Mathlib.Algebra.Group.Opposite","Mathlib.Algebra.Group.Pi.Lemmas","Mathlib.Algebra.GroupWithZero.Action.Hom","Mathlib.Algebra.Ring.Defs"],"instances":[{"className":"Monoid","name":"DomMulAct.instMonoidOfMulOpposite","typeNames":["DomMulAct"]},{"className":"AddCommGroup","name":"DomAddAct.instAddCommGroupOfAddOpposite","typeNames":["DomAddAct"]},{"className":"AddCommSemigroup","name":"DomAddAct.instAddCommSemigroupOfAddOpposite","typeNames":["DomAddAct"]},{"className":"LeftCancelMonoid","name":"DomMulAct.instLeftCancelMonoidOfMulOpposite","typeNames":["DomMulAct"]},{"className":"AddGroup","name":"DomAddAct.instAddGroupOfAddOpposite","typeNames":["DomAddAct"]},{"className":"AddLeftCancelSemigroup","name":"DomAddAct.instAddLeftCancelSemigroupOfAddOpposite","typeNames":["DomAddAct"]},{"className":"One","name":"DomMulAct.instOneOfMulOpposite","typeNames":["DomMulAct"]},{"className":"AddRightCancelMonoid","name":"DomAddAct.instAddRightCancelMonoidOfAddOpposite","typeNames":["DomAddAct"]},{"className":"CancelMonoid","name":"DomMulAct.instCancelMonoidOfMulOpposite","typeNames":["DomMulAct"]},{"className":"Zero","name":"DomAddAct.instZeroOfAddOpposite","typeNames":["DomAddAct"]},{"className":"Neg","name":"DomAddAct.instNegOfAddOpposite","typeNames":["DomAddAct"]},{"className":"AddCancelMonoid","name":"DomAddAct.instAddCancelMonoidOfAddOpposite","typeNames":["DomAddAct"]},{"className":"NonUnitalSemiring","name":"DomMulAct.instNonUnitalSemiringOfMulOpposite","typeNames":["DomMulAct"]},{"className":"AddMonoid","name":"DomAddAct.instAddMonoidOfAddOpposite","typeNames":["DomAddAct"]},{"className":"NonAssocSemiring","name":"DomMulAct.instNonAssocSemiringOfMulOpposite","typeNames":["DomMulAct"]},{"className":"CommRing","name":"DomMulAct.instCommRingOfMulOpposite","typeNames":["DomMulAct"]},{"className":"RightCancelMonoid","name":"DomMulAct.instRightCancelMonoidOfMulOpposite","typeNames":["DomMulAct"]},{"className":"CancelCommMonoid","name":"DomMulAct.instCancelCommMonoidOfMulOpposite","typeNames":["DomMulAct"]},{"className":"RightCancelSemigroup","name":"DomMulAct.instRightCancelSemigroupOfMulOpposite","typeNames":["DomMulAct"]},{"className":"AddLeftCancelMonoid","name":"DomAddAct.instAddLeftCancelMonoidOfAddOpposite","typeNames":["DomAddAct"]},{"className":"DivInvOneMonoid","name":"DomMulAct.instDivInvOneMonoidOfMulOpposite","typeNames":["DomMulAct"]},{"className":"Group","name":"DomMulAct.instGroupOfMulOpposite","typeNames":["DomMulAct"]},{"className":"NonAssocSemiring","name":"DomAddAct.instNonAssocSemiringOfAddOpposite","typeNames":["DomAddAct"]},{"className":"Semiring","name":"DomMulAct.instSemiringOfMulOpposite","typeNames":["DomMulAct"]},{"className":"DivisionMonoid","name":"DomMulAct.instDivisionMonoidOfMulOpposite","typeNames":["DomMulAct"]},{"className":"InvolutiveInv","name":"DomMulAct.instInvolutiveInvOfMulOpposite","typeNames":["DomMulAct"]},{"className":"Ring","name":"DomAddAct.instRingOfAddOpposite","typeNames":["DomAddAct"]},{"className":"Add","name":"DomAddAct.instAddOfAddOpposite","typeNames":["DomAddAct"]},{"className":"NegZeroClass","name":"DomAddAct.instNegZeroClassOfAddOpposite","typeNames":["DomAddAct"]},{"className":"AddSemigroup","name":"DomAddAct.instAddSemigroupOfAddOpposite","typeNames":["DomAddAct"]},{"className":"SubNegMonoid","name":"DomAddAct.instSubNegAddMonoidOfAddOpposite","typeNames":["DomAddAct"]},{"className":"Inv","name":"DomMulAct.instInvOfMulOpposite","typeNames":["DomMulAct"]},{"className":"MulOneClass","name":"DomMulAct.instMulOneClassOfMulOpposite","typeNames":["DomMulAct"]},{"className":"NonUnitalSemiring","name":"DomAddAct.instNonUnitalSemiringOfAddOpposite","typeNames":["DomAddAct"]},{"className":"DivisionCommMonoid","name":"DomMulAct.instDivisionCommMonoidOfMulOpposite","typeNames":["DomMulAct"]},{"className":"AddZeroClass","name":"DomAddAct.instAddZeroClassOfAddOpposite","typeNames":["DomAddAct"]},{"className":"InvolutiveNeg","name":"DomAddAct.instInvolutiveNegOfAddOpposite","typeNames":["DomAddAct"]},{"className":"AddCommMonoid","name":"DomAddAct.instAddCommMonoidOfAddOpposite","typeNames":["DomAddAct"]},{"className":"SubNegZeroMonoid","name":"DomAddAct.instSubNegZeroMonoidOfAddOpposite","typeNames":["DomAddAct"]},{"className":"SubtractionCommMonoid","name":"DomAddAct.instDivisionAddCommMonoidOfAddOpposite","typeNames":["DomAddAct"]},{"className":"CommSemigroup","name":"DomMulAct.instCommSemigroupOfMulOpposite","typeNames":["DomMulAct"]},{"className":"Ring","name":"DomMulAct.instRingOfMulOpposite","typeNames":["DomMulAct"]},{"className":"AddCancelCommMonoid","name":"DomAddAct.instAddCancelCommMonoidOfAddOpposite","typeNames":["DomAddAct"]},{"className":"AddRightCancelSemigroup","name":"DomAddAct.instAddRightCancelSemigroupOfAddOpposite","typeNames":["DomAddAct"]},{"className":"InvOneClass","name":"DomMulAct.instInvOneClassOfMulOpposite","typeNames":["DomMulAct"]},{"className":"Semigroup","name":"DomMulAct.instSemigroupOfMulOpposite","typeNames":["DomMulAct"]},{"className":"CommRing","name":"DomAddAct.instCommRingOfAddOpposite","typeNames":["DomAddAct"]},{"className":"LeftCancelSemigroup","name":"DomMulAct.instLeftCancelSemigroupOfMulOpposite","typeNames":["DomMulAct"]},{"className":"DivInvMonoid","name":"DomMulAct.instDivInvMonoidOfMulOpposite","typeNames":["DomMulAct"]},{"className":"Semiring","name":"DomAddAct.instSemiringOfAddOpposite","typeNames":["DomAddAct"]},{"className":"SubtractionMonoid","name":"DomAddAct.instSubtractionMonoidOfAddOpposite","typeNames":["DomAddAct"]},{"className":"CommMonoid","name":"DomMulAct.instCommMonoidOfMulOpposite","typeNames":["DomMulAct"]},{"className":"CommGroup","name":"DomMulAct.instCommGroupOfMulOpposite","typeNames":["DomMulAct"]},{"className":"Mul","name":"DomMulAct.instMulOfMulOpposite","typeNames":["DomMulAct"]},{"className":"IsLeftCancelMul","name":"DomMulAct.instIsLeftCancelMulOfMulOpposite","typeNames":["DomMulAct"]},{"className":"IsLeftCancelAdd","name":"DomAddAct.instIsLeftCancelAddOfAddOpposite","typeNames":["DomAddAct"]},{"className":"IsRightCancelMul","name":"DomMulAct.instIsRightCancelMulOfMulOpposite","typeNames":["DomMulAct"]},{"className":"IsRightCancelAdd","name":"DomAddAct.instIsRightCancelAddOfAddOpposite","typeNames":["DomAddAct"]},{"className":"IsCancelMul","name":"DomMulAct.instIsCancelMulOfMulOpposite","typeNames":["DomMulAct"]},{"className":"IsCancelAdd","name":"DomAddAct.instIsCancelAddOfAddOpposite","typeNames":["DomAddAct"]},{"className":"SMul","name":"DomMulAct.instSMulForall","typeNames":["DomMulAct"]},{"className":"VAdd","name":"DomAddAct.instVAddForall","typeNames":["DomAddAct"]},{"className":"SMulCommClass","name":"DomMulAct.instSMulCommClassForall","typeNames":["DomMulAct"]},{"className":"VAddCommClass","name":"DomAddAct.instVAddCommClassForall","typeNames":["DomAddAct"]},{"className":"SMulCommClass","name":"DomMulAct.instSMulCommClassForall_1","typeNames":["DomMulAct"]},{"className":"VAddCommClass","name":"DomAddAct.instVAddCommClassForall_1","typeNames":["DomAddAct"]},{"className":"SMulCommClass","name":"DomMulAct.instSMulCommClassForall_2","typeNames":["DomMulAct","DomMulAct"]},{"className":"VAddCommClass","name":"DomAddAct.instVAddCommClassForall_2","typeNames":["DomAddAct","DomAddAct"]},{"className":"FaithfulSMul","name":"DomMulAct.instFaithfulSMulForallOfNontrivial","typeNames":["DomMulAct"]},{"className":"FaithfulVAdd","name":"DomAddAct.instFaithfulVAddForallOfNontrivial","typeNames":["DomAddAct"]},{"className":"SMulZeroClass","name":"DomMulAct.instSMulZeroClassForallOfSMul","typeNames":["DomMulAct"]},{"className":"DistribSMul","name":"DomMulAct.instDistribSMulForallOfSMul","typeNames":["DomMulAct"]},{"className":"MulAction","name":"DomMulAct.instMulActionForall","typeNames":["DomMulAct"]},{"className":"AddAction","name":"DomAddAct.instAddActionForall","typeNames":["DomAddAct"]},{"className":"DistribMulAction","name":"DomMulAct.instDistribMulActionForallOfMulAction","typeNames":["DomMulAct"]},{"className":"MulDistribMulAction","name":"DomMulAct.instMulDistribMulActionForallOfMulAction","typeNames":["DomMulAct"]},{"className":"SMul","name":"DomMulAct.instSMulMonoidHom","typeNames":["DomMulAct","MonoidHom"]},{"className":"SMulCommClass","name":"DomMulAct.instSMulCommClassMonoidHom","typeNames":["DomMulAct","DomMulAct","MonoidHom"]},{"className":"MulAction","name":"DomMulAct.instMulActionMonoidHom","typeNames":["DomMulAct","MonoidHom"]},{"className":"SMul","name":"DomMulAct.instSMulAddMonoidHom","typeNames":["DomMulAct","AddMonoidHom"]},{"className":"SMulCommClass","name":"DomMulAct.instSMulCommClassAddMonoidHom","typeNames":["DomMulAct","DomMulAct","AddMonoidHom"]},{"className":"SMulCommClass","name":"DomMulAct.instSMulCommClassAddMonoidHom_1","typeNames":["DomMulAct","AddMonoidHom"]},{"className":"MulAction","name":"DomMulAct.instMulActionAddMonoidHomOfDistribMulAction","typeNames":["DomMulAct","AddMonoidHom"]},{"className":"DistribMulAction","name":"DomMulAct.instDistribMulActionAddMonoidHom","typeNames":["DomMulAct","AddMonoidHom"]},{"className":"MulDistribMulAction","name":"DomMulAct.instMulDistribMulActionMonoidHom","typeNames":["DomMulAct","MonoidHom"]}],"name":"Mathlib.GroupTheory.GroupAction.DomAct.Basic"}