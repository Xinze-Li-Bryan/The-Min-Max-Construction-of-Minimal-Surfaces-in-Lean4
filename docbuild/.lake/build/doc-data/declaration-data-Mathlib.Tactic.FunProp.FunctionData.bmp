{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.decompositionOverArgs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">decompositionOverArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fData</span> : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">FunctionData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>))</span></span></div></div>","info":{"doc":"Decompose function `fun x => f y₁ ... yₙ` over specified argument indices `#[i, j, ...]`.\n\nThe result is:\n```\n(fun (yᵢ',yⱼ',...) => f y₁ .. yᵢ' .. yⱼ' .. yₙ) ∘ (fun x => (yᵢ, yⱼ, ...))\n```\n\nThis is not possible if `yₗ` for `l ∉ #[i,j,...]` still contains `x`.\nIn such case `none` is returned.\n","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.decompositionOverArgs","kind":"def","line":261,"name":"Mathlib.Meta.FunProp.FunctionData.decompositionOverArgs","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L261-L294"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.nontrivialDecomposition\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">nontrivialDecomposition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fData</span> : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>))</span></span></div></div>","info":{"doc":"Decompose function `f = (← fData.toExpr)` into composition of two functions.\n\nReturns none if the decomposition would produce composition with identity function. ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.nontrivialDecomposition","kind":"def","line":211,"name":"Mathlib.Meta.FunProp.FunctionData.nontrivialDecomposition","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L211-L258"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.peeloffArgDecomposition\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">peeloffArgDecomposition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fData</span> : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>))</span></span></div></div>","info":{"doc":"Decomposes `fun x => f y₁ ... yₙ` into `(fun g => g yₙ) ∘ (fun x y => f y₁ ... yₙ₋₁ y)`\n\nReturns none if:\n- `n=0`\n- `yₙ` contains `x`\n- `n=1` and `(fun x y => f y)` is identity function i.e. `x=f` ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.peeloffArgDecomposition","kind":"def","line":184,"name":"Mathlib.Meta.FunProp.FunctionData.peeloffArgDecomposition","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L184-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.isMorApplication\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">isMorApplication</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication\">MorApplication</a></span></div></div>","info":{"doc":"Is function body of `f` a morphism application? What kind? ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.isMorApplication","kind":"def","line":163,"name":"Mathlib.Meta.FunProp.FunctionData.isMorApplication","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L163-L181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.instBEqMorApplication\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">instBEqMorApplication</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication\">MorApplication</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.instBEqMorApplication","kind":"instance","line":161,"name":"Mathlib.Meta.FunProp.instBEqMorApplication","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L161-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.instBEqMorApplication.beq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">instBEqMorApplication</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication\">MorApplication</a> → <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication\">MorApplication</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.instBEqMorApplication.beq","kind":"def","line":161,"name":"Mathlib.Meta.FunProp.instBEqMorApplication.beq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L161-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.instInhabitedMorApplication\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">instInhabitedMorApplication</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication\">MorApplication</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.instInhabitedMorApplication","kind":"instance","line":161,"name":"Mathlib.Meta.FunProp.instInhabitedMorApplication","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L161-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.instInhabitedMorApplication.default\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">instInhabitedMorApplication</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication\">MorApplication</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.instInhabitedMorApplication.default","kind":"def","line":161,"name":"Mathlib.Meta.FunProp.instInhabitedMorApplication.default","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L161-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication.none\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">MorApplication</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication\">MorApplication</a></div></div>","info":{"doc":"Not a morphism application. ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication.none","kind":"ctor","line":159,"name":"Mathlib.Meta.FunProp.MorApplication.none","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L159-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication.overApplied\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">MorApplication</span>.<span class=\"name\">overApplied</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication\">MorApplication</a></div></div>","info":{"doc":"Of the form `⇑f x y ...` i.e. additional applied arguments `y ...`. ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication.overApplied","kind":"ctor","line":157,"name":"Mathlib.Meta.FunProp.MorApplication.overApplied","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L157-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication.exact\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">MorApplication</span>.<span class=\"name\">exact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication\">MorApplication</a></div></div>","info":{"doc":"Of the form `⇑f x` i.e. morphism and one argument is provided. ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication.exact","kind":"ctor","line":155,"name":"Mathlib.Meta.FunProp.MorApplication.exact","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L155-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication.underApplied\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">MorApplication</span>.<span class=\"name\">underApplied</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication\">MorApplication</a></div></div>","info":{"doc":"Of the form `⇑f` i.e. missing argument. ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication.underApplied","kind":"ctor","line":153,"name":"Mathlib.Meta.FunProp.MorApplication.underApplied","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L153-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">MorApplication</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Type of morphism application. ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MorApplication","kind":"inductive","line":151,"name":"Mathlib.Meta.FunProp.MorApplication","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L151-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.unfoldHeadFVar?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">unfoldHeadFVar?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fData</span> : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>","info":{"doc":"If head function is a let-fvar unfold it and return resulting function.\nReturn `none` otherwise. ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.unfoldHeadFVar?","kind":"def","line":142,"name":"Mathlib.Meta.FunProp.FunctionData.unfoldHeadFVar?","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L142-L149"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.getFunctionData?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">getFunctionData?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unfoldPred</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData\">MaybeFunctionData</a></span></div></div>","info":{"doc":"Get `FunctionData` for `f`. ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.getFunctionData?","kind":"def","line":119,"name":"Mathlib.Meta.FunProp.getFunctionData?","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L119-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData.get\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">MaybeFunctionData</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fData</span> : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData\">MaybeFunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"Turn `MaybeFunctionData` to the function. ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData.get","kind":"def","line":113,"name":"Mathlib.Meta.FunProp.MaybeFunctionData.get","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L113-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData.data\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">MaybeFunctionData</span>.<span class=\"name\">data</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fData</span> : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData\">MaybeFunctionData</a></div></div>","info":{"doc":"Function data has been successfully generated. ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData.data","kind":"ctor","line":110,"name":"Mathlib.Meta.FunProp.MaybeFunctionData.data","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L110-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData.lam\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">MaybeFunctionData</span>.<span class=\"name\">lam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData\">MaybeFunctionData</a></div></div>","info":{"doc":"Can't generate function data as function body has lambda binder. ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData.lam","kind":"ctor","line":108,"name":"Mathlib.Meta.FunProp.MaybeFunctionData.lam","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L108-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData.letE\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">MaybeFunctionData</span>.<span class=\"name\">letE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData\">MaybeFunctionData</a></div></div>","info":{"doc":"Can't generate function data as function body has let binder. ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData.letE","kind":"ctor","line":106,"name":"Mathlib.Meta.FunProp.MaybeFunctionData.letE","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L106-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">MaybeFunctionData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Result of `getFunctionData?`. It returns function data if the function is in the form\n`fun x => f y₁ ... yₙ`. Two other cases are `fun x => let y := ...` or `fun x y => ...` ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.MaybeFunctionData","kind":"inductive","line":103,"name":"Mathlib.Meta.FunProp.MaybeFunctionData","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L103-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.getFunctionData\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">getFunctionData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">FunctionData</a></span></div></div>","info":{"doc":"Get `FunctionData` for `f`. Throws if `f` can't be put into funProp-normal form. ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.getFunctionData","kind":"def","line":71,"name":"Mathlib.Meta.FunProp.getFunctionData","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L71-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.getFnConstName?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">getFnConstName?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span></div></div>","info":{"doc":"Is head function of `f` a constant?\n\nIf the head of `f` is a projection return the name of corresponding projection function. ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.getFnConstName?","kind":"def","line":57,"name":"Mathlib.Meta.FunProp.FunctionData.getFnConstName?","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L57-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.domainType\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">domainType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"Domain type of `f`. ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.domainType","kind":"def","line":52,"name":"Mathlib.Meta.FunProp.FunctionData.domainType","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L52-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.isConstantFun\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">isConstantFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Is `f` a constant function? ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.isConstantFun","kind":"def","line":48,"name":"Mathlib.Meta.FunProp.FunctionData.isConstantFun","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L48-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.isIdentityFun\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">isIdentityFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Is `f` an identity function? ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.isIdentityFun","kind":"def","line":44,"name":"Mathlib.Meta.FunProp.FunctionData.isIdentityFun","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L44-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.toExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">toExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"Turn function data back to expression. ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.toExpr","kind":"def","line":38,"name":"Mathlib.Meta.FunProp.FunctionData.toExpr","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L38-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.mainArgs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">mainArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"indices of `args` that contain `mainVars` ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.mainArgs","kind":"def","line":36,"name":"Mathlib.Meta.FunProp.FunctionData.mainArgs","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.mainVar\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">mainVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>","info":{"doc":"main variable ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.mainVar","kind":"def","line":34,"name":"Mathlib.Meta.FunProp.FunctionData.mainVar","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.args\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">args</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Mor.Arg</a></span></div></div>","info":{"doc":"applied function arguments ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.args","kind":"def","line":32,"name":"Mathlib.Meta.FunProp.FunctionData.args","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.fn\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">fn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>","info":{"doc":"main function ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.fn","kind":"def","line":30,"name":"Mathlib.Meta.FunProp.FunctionData.fn","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.insts\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">insts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a></div></div>","info":{"doc":"local instances ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.insts","kind":"def","line":28,"name":"Mathlib.Meta.FunProp.FunctionData.insts","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.lctx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">FunctionData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a></div></div>","info":{"doc":"local context where `mainVar` exists ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.lctx","kind":"def","line":26,"name":"Mathlib.Meta.FunProp.FunctionData.lctx","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">insts</span> : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/FunProp/Mor.html#Mathlib.Meta.FunProp.Mor.Arg\">Mor.Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mainVar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mainArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\">FunctionData</a></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData.mk","kind":"ctor","line":24,"name":"Mathlib.Meta.FunProp.FunctionData.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FunProp</span>.<span class=\"name\">FunctionData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Structure storing parts of a function in funProp-normal form. ","docLink":"./Mathlib/Tactic/FunProp/FunctionData.html#Mathlib.Meta.FunProp.FunctionData","kind":"structure","line":23,"name":"Mathlib.Meta.FunProp.FunctionData","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Tactic/FunProp/FunctionData.lean#L23-L36"}}],"imports":["Init","Qq","Mathlib.Tactic.FunProp.Mor","Mathlib.Tactic.FunProp.ToBatteries"],"instances":[{"className":"Inhabited","name":"Mathlib.Meta.FunProp.instInhabitedMorApplication","typeNames":["Mathlib.Meta.FunProp.MorApplication"]},{"className":"BEq","name":"Mathlib.Meta.FunProp.instBEqMorApplication","typeNames":["Mathlib.Meta.FunProp.MorApplication"]}],"name":"Mathlib.Tactic.FunProp.FunctionData"}