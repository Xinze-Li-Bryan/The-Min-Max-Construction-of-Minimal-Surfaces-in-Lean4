{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Instances/AddCircle/Real.html#ZMod.toAddCircle_eq_zero\"><span class=\"name\">ZMod</span>.<span class=\"name\">toAddCircle_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">N</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Instances/AddCircle/Real.html#ZMod.toAddCircle\">toAddCircle</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Topology/Instances/AddCircle/Real.html#ZMod.toAddCircle_eq_zero","kind":"theorem","line":85,"name":"ZMod.toAddCircle_eq_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Instances/AddCircle/Real.lean#L85-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Instances/AddCircle/Real.html#ZMod.toAddCircle_inj\"><span class=\"name\">ZMod</span>.<span class=\"name\">toAddCircle_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j </span><span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">N</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Instances/AddCircle/Real.html#ZMod.toAddCircle\">toAddCircle</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Instances/AddCircle/Real.html#ZMod.toAddCircle\">toAddCircle</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Topology/Instances/AddCircle/Real.html#ZMod.toAddCircle_inj","kind":"theorem","line":82,"name":"ZMod.toAddCircle_inj","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Instances/AddCircle/Real.lean#L82-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Instances/AddCircle/Real.html#ZMod.toAddCircle_injective\"><span class=\"name\">ZMod</span>.<span class=\"name\">toAddCircle_injective</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<a href=\"./Mathlib/Topology/Instances/AddCircle/Real.html#ZMod.toAddCircle\">toAddCircle</a></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Topology/Instances/AddCircle/Real.html#ZMod.toAddCircle_injective","kind":"theorem","line":75,"name":"ZMod.toAddCircle_injective","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Instances/AddCircle/Real.lean#L75-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Instances/AddCircle/Real.html#ZMod.toAddCircle_apply\"><span class=\"name\">ZMod</span>.<span class=\"name\">toAddCircle_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Instances/AddCircle/Real.html#ZMod.toAddCircle\">toAddCircle</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑(<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">j</span>.<a href=\"./Mathlib/Data/ZMod/Basic.html#ZMod.val\">val</a></span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">N</span></span>)</span></div></div>","info":{"doc":"Explicit formula for `toCircle j`. Note that this is \"evil\" because it uses `ZMod.val`. Where\npossible, it is recommended to lift `j` to `ℤ` and use `toAddCircle_intCast` instead.\n","docLink":"./Mathlib/Topology/Instances/AddCircle/Real.html#ZMod.toAddCircle_apply","kind":"theorem","line":66,"name":"ZMod.toAddCircle_apply","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Instances/AddCircle/Real.lean#L66-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Instances/AddCircle/Real.html#ZMod.toAddCircle_natCast\"><span class=\"name\">ZMod</span>.<span class=\"name\">toAddCircle_natCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Instances/AddCircle/Real.html#ZMod.toAddCircle\">toAddCircle</a> <span class=\"fn\">↑<span class=\"fn\">j</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑(<span class=\"fn\">↑<span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">N</span></span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Topology/Instances/AddCircle/Real.html#ZMod.toAddCircle_natCast","kind":"theorem","line":62,"name":"ZMod.toAddCircle_natCast","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Instances/AddCircle/Real.lean#L62-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Instances/AddCircle/Real.html#ZMod.toAddCircle_intCast\"><span class=\"name\">ZMod</span>.<span class=\"name\">toAddCircle_intCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Instances/AddCircle/Real.html#ZMod.toAddCircle\">toAddCircle</a> <span class=\"fn\">↑<span class=\"fn\">j</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑(<span class=\"fn\">↑<span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">N</span></span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Topology/Instances/AddCircle/Real.html#ZMod.toAddCircle_intCast","kind":"theorem","line":58,"name":"ZMod.toAddCircle_intCast","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Instances/AddCircle/Real.lean#L58-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Instances/AddCircle/Real.html#ZMod.toAddCircle\"><span class=\"name\">ZMod</span>.<span class=\"name\">toAddCircle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">N</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <a href=\"./Mathlib/Topology/Instances/AddCircle/Real.html#UnitAddCircle\">UnitAddCircle</a></div></div>","info":{"doc":"The `AddMonoidHom` from `ZMod N` to `ℝ / ℤ` sending `j mod N` to `j / N mod 1`. ","docLink":"./Mathlib/Topology/Instances/AddCircle/Real.html#ZMod.toAddCircle","kind":"def","line":53,"name":"ZMod.toAddCircle","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Instances/AddCircle/Real.lean#L53-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Instances/AddCircle/Real.html#UnitAddCircle\"><span class=\"name\">UnitAddCircle</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The unit circle `ℝ ⧸ ℤ`. ","docLink":"./Mathlib/Topology/Instances/AddCircle/Real.html#UnitAddCircle","kind":"def","line":43,"name":"UnitAddCircle","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Instances/AddCircle/Real.lean#L43-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Instances/AddCircle/Real.html#AddCircle.instProperlyDiscontinuousVAddSubtypeAddOppositeRealMemAddSubgroupOpZmultiples\"><span class=\"name\">AddCircle</span>.<span class=\"name\">instProperlyDiscontinuousVAddSubtypeAddOppositeRealMemAddSubgroupOpZmultiples</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Algebra/ConstMulAction.html#ProperlyDiscontinuousVAdd\">ProperlyDiscontinuousVAdd</a> <span class=\"fn\">↥<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Subgroup/ZPowers/Basic.html#AddSubgroup.zmultiples\">AddSubgroup.zmultiples</a> <span class=\"fn\">p</span>)</span>.<a href=\"./Mathlib/Algebra/Group/Subgroup/MulOpposite.html#AddSubgroup.op\">op</a></span></span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></div></div>","info":{"doc":"The action on `ℝ` by right multiplication of its the subgroup `zmultiples p` (the multiples of\n`p:ℝ`) is properly discontinuous. ","docLink":"./Mathlib/Topology/Instances/AddCircle/Real.html#AddCircle.instProperlyDiscontinuousVAddSubtypeAddOppositeRealMemAddSubgroupOpZmultiples","kind":"instance","line":33,"name":"AddCircle.instProperlyDiscontinuousVAddSubtypeAddOppositeRealMemAddSubgroupOpZmultiples","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Instances/AddCircle/Real.lean#L33-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Instances/AddCircle/Real.html#AddCircle.compactSpace\"><span class=\"name\">AddCircle</span>.<span class=\"name\">compactSpace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> (<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">p</span>)</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Instances/AddCircle/Defs.html#AddCircle\">AddCircle</a> <span class=\"fn\">p</span>)</span></span></div></div>","info":{"doc":"The \"additive circle\" `ℝ ⧸ (ℤ ∙ p)` is compact. ","docLink":"./Mathlib/Topology/Instances/AddCircle/Real.html#AddCircle.compactSpace","kind":"instance","line":28,"name":"AddCircle.compactSpace","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Instances/AddCircle/Real.lean#L28-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Instances/AddCircle/Real.html#AddCircle.pathConnectedSpace\"><span class=\"name\">AddCircle</span>.<span class=\"name\">pathConnectedSpace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Connected/PathConnected.html#PathConnectedSpace\">PathConnectedSpace</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Instances/AddCircle/Defs.html#AddCircle\">AddCircle</a> <span class=\"fn\">p</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Topology/Instances/AddCircle/Real.html#AddCircle.pathConnectedSpace","kind":"instance","line":25,"name":"AddCircle.pathConnectedSpace","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Topology/Instances/AddCircle/Real.lean#L25-L26"}}],"imports":["Init","Mathlib.Topology.Connected.PathConnected","Mathlib.Topology.Instances.AddCircle.Defs","Mathlib.Topology.Instances.ZMultiples"],"instances":[{"className":"PathConnectedSpace","name":"AddCircle.pathConnectedSpace","typeNames":["AddCircle"]},{"className":"CompactSpace","name":"AddCircle.compactSpace","typeNames":["AddCircle"]},{"className":"ProperlyDiscontinuousVAdd","name":"AddCircle.instProperlyDiscontinuousVAddSubtypeAddOppositeRealMemAddSubgroupOpZmultiples","typeNames":["Subtype","Real"]}],"name":"Mathlib.Topology.Instances.AddCircle.Real"}