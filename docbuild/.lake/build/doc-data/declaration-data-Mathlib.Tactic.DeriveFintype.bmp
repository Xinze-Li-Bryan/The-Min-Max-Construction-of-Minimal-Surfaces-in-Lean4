{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveFintype.html#Mathlib.Deriving.Fintype.mkFintypeInstanceHandler\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Fintype</span>.<span class=\"name\">mkFintypeInstanceHandler</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/DeriveFintype.html#Mathlib.Deriving.Fintype.mkFintypeInstanceHandler","kind":"def","line":180,"name":"Mathlib.Deriving.Fintype.mkFintypeInstanceHandler","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/DeriveFintype.lean#L180-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveFintype.html#Mathlib.Deriving.Fintype.mkFintypeEnum\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Fintype</span>.<span class=\"name\">mkFintypeEnum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Derive a `Fintype` instance for enum types. These come with a `ctorIdx` function.\n\nWe generate a more optimized instance than the one produced by `mkFintype`.\nThe strategy is to (1) create a list `enumList` of all the constructors, (2) prove that this\nis in `ctorIdx` order, (3) show that `ctorIdx` maps `enumList` to `List.range numCtors` to show\nthe list has no duplicates, and (4) give the `Fintype` instance, using 2 for completeness.\n\nThe proofs are all linear complexity, and the main computation is that\n`enumList.map ctorIdx = List.range numCtors`, which is true by `refl`. ","docLink":"./Mathlib/Tactic/DeriveFintype.html#Mathlib.Deriving.Fintype.mkFintypeEnum","kind":"def","line":104,"name":"Mathlib.Deriving.Fintype.mkFintypeEnum","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/DeriveFintype.lean#L104-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveFintype.html#Mathlib.Deriving.Fintype.mkFintype\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Fintype</span>.<span class=\"name\">mkFintype</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Tactic/DeriveFintype.html#Mathlib.Deriving.Fintype.mkFintype","kind":"def","line":91,"name":"Mathlib.Deriving.Fintype.mkFintype","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/DeriveFintype.lean#L91-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveFintype.html#Mathlib.Deriving.Fintype.«termDerive_fintype%_»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Fintype</span>.<span class=\"name\">«termDerive_fintype%_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"The term elaborator `derive_fintype% α` tries to synthesize a `Fintype α` instance\nusing all the assumptions in the local context; this can be useful, for example, if one\nneeds an extra `DecidableEq` instance. It works only if `α` is an inductive\ntype that `proxy_equiv% α` can handle. The elaborator makes use of the\nexpected type, so `(derive_fintype% _ : Fintype α)` works.\n\nThis uses `proxy_equiv% α`, so as a side effect it defines `proxyType` and `proxyTypeEquiv` in\nthe namespace associated to the inductive type `α`.\n","docLink":"./Mathlib/Tactic/DeriveFintype.html#Mathlib.Deriving.Fintype.«termDerive_fintype%_»","kind":"def","line":85,"name":"Mathlib.Deriving.Fintype.«termDerive_fintype%_»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/DeriveFintype.lean#L85-L85"}}],"imports":["Init","Mathlib.Tactic.ProxyType","Mathlib.Data.Fintype.Basic","Mathlib.Data.Fintype.Sigma","Mathlib.Data.Fintype.Sum"],"instances":[],"name":"Mathlib.Tactic.DeriveFintype"}