{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#Int.canLiftPNat\"><span class=\"name\">Int</span>.<span class=\"name\">canLiftPNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Lift.html#CanLift\">CanLift</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>) =&gt; <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>) =&gt; <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#Int.canLiftPNat","kind":"instance","line":230,"name":"Int.canLiftPNat","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L230-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#Nat.canLiftPNat\"><span class=\"name\">Nat</span>.<span class=\"name\">canLiftPNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Lift.html#CanLift\">CanLift</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a> <a href=\"./Mathlib/Data/PNat/Notation.html#PNat.val\">PNat.val</a> <span class=\"fn\">fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#Nat.canLiftPNat","kind":"instance","line":227,"name":"Nat.canLiftPNat","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L227-L228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.divExact\"><span class=\"name\">PNat</span>.<span class=\"name\">divExact</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">k</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a></div></div>","info":{"doc":"If `h : k | m`, then `k * (div_exact m k) = m`. Note that this is not equal to `m / k`. ","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.divExact","kind":"def","line":219,"name":"PNat.divExact","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L219-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.div_coe\"><span class=\"name\">PNat</span>.<span class=\"name\">div_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">k</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/PNat/Defs.html#PNat.div\">div</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span>).<a href=\"./Init/Prelude.html#Nat.pred\">pred</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.div_coe","kind":"theorem","line":208,"name":"PNat.div_coe","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L208-L217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.mod_coe\"><span class=\"name\">PNat</span>.<span class=\"name\">mod_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">k</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/PNat/Defs.html#PNat.mod\">mod</a></span> <span class=\"fn\">k</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.mod_coe","kind":"theorem","line":197,"name":"PNat.mod_coe","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L197-L206"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.div\"><span class=\"name\">PNat</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">k</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>","info":{"doc":"We define `m / k` in the same way as for `ℕ` except that when `m = n * k` we take\n`m / k = n - 1`. This ensures that `m = (m % k) + k * (m / k)` in all cases. Later we\ndefine a function `div_exact` which gives the usual `m / k` in the case where `k` divides `m`.\n","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.div","kind":"def","line":190,"name":"PNat.div","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L190-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.mod\"><span class=\"name\">PNat</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">k</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a></div></div>","info":{"doc":"We define `m % k` in the same way as for `ℕ`\nexcept that when `m = n * k` we take `m % k = k` This ensures that `m % k` is always positive.\n","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.mod","kind":"def","line":184,"name":"PNat.mod","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L184-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.modDiv\"><span class=\"name\">PNat</span>.<span class=\"name\">modDiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">k</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>","info":{"doc":"`mod_div m k = (m % k, m / k)`.\nWe define `m % k` and `m / k` in the same way as for `ℕ`\nexcept that when `m = n * k` we take `m % k = k` and\n`m / k = n - 1`.  This ensures that `m % k` is always positive\nand `m = (m % k) + k * (m / k)` in all cases.  Later we\ndefine a function `div_exact` which gives the usual `m / k`\nin the case where `k` divides `m`.\n","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.modDiv","kind":"def","line":173,"name":"PNat.modDiv","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L173-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.modDivAux\"><span class=\"name\">PNat</span>.<span class=\"name\">modDivAux</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span></div></div>","info":{"doc":"We define `m % k` and `m / k` in the same way as for `ℕ`\nexcept that when `m = n * k` we take `m % k = k` and\n`m / k = n - 1`.  This ensures that `m % k` is always positive\nand `m = (m % k) + k * (m / k)` in all cases.  Later we\ndefine a function `div_exact` which gives the usual `m / k`\nin the case where `k` divides `m`.\n","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.modDivAux","kind":"def","line":162,"name":"PNat.modDivAux","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L162-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.strongInductionOn\"><span class=\"name\">PNat</span>.<span class=\"name\">strongInductionOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">((<span class=\"fn\">k</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>) → <span class=\"fn\"><span class=\"fn\">((<span class=\"fn\">m</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>) → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">k</span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">m</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">k</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">n</span></span></span></div></div>","info":{"doc":"Strong induction on `ℕ+`. ","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.strongInductionOn","kind":"def","line":157,"name":"PNat.strongInductionOn","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L157-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.instWellFoundedRelation\"><span class=\"name\">PNat</span>.<span class=\"name\">instWellFoundedRelation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFoundedRelation\">WellFoundedRelation</a> <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.instWellFoundedRelation","kind":"instance","line":154,"name":"PNat.instWellFoundedRelation","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L154-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.coe_eq_one_iff\"><span class=\"name\">PNat</span>.<span class=\"name\">coe_eq_one_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.coe_eq_one_iff","kind":"theorem","line":150,"name":"PNat.coe_eq_one_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L150-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.one_coe\"><span class=\"name\">PNat</span>.<span class=\"name\">one_coe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.one_coe","kind":"theorem","line":146,"name":"PNat.one_coe","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L146-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.mk_one\"><span class=\"name\">PNat</span>.<span class=\"name\">mk_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">1</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\">1</span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.mk_one","kind":"theorem","line":142,"name":"PNat.mk_one","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L142-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.instInhabited\"><span class=\"name\">PNat</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.instInhabited","kind":"instance","line":138,"name":"PNat.instInhabited","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L138-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.not_lt_one\"><span class=\"name\">PNat</span>.<span class=\"name\">not_lt_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.not_lt_one","kind":"theorem","line":134,"name":"PNat.not_lt_one","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L134-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.one_le\"><span class=\"name\">PNat</span>.<span class=\"name\">one_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.one_le","kind":"theorem","line":130,"name":"PNat.one_le","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L130-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.coe_toPNat'\"><span class=\"name\">PNat</span>.<span class=\"name\">coe_toPNat'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Data/PNat/Defs.html#Nat.toPNat'\">toPNat'</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.coe_toPNat'","kind":"theorem","line":126,"name":"PNat.coe_toPNat'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L126-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.toPNat'_coe\"><span class=\"name\">PNat</span>.<span class=\"name\">toPNat'_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> → <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/PNat/Defs.html#Nat.toPNat'\">toPNat'</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.toPNat'_coe","kind":"theorem","line":123,"name":"PNat.toPNat'_coe","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L123-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#NeZero.pnat\"><span class=\"name\">NeZero</span>.<span class=\"name\">pnat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">↑<span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#NeZero.pnat","kind":"instance","line":120,"name":"NeZero.pnat","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L120-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.ne_zero\"><span class=\"name\">PNat</span>.<span class=\"name\">ne_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.ne_zero","kind":"theorem","line":116,"name":"PNat.ne_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L116-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.coe_injective\"><span class=\"name\">PNat</span>.<span class=\"name\">coe_injective</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Function.html#Function.Injective\">Function.Injective</a> <a href=\"./Mathlib/Data/PNat/Notation.html#PNat.val\">val</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.coe_injective","kind":"theorem","line":113,"name":"PNat.coe_injective","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L113-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.eq\"><span class=\"name\">PNat</span>.<span class=\"name\">eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span> → <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.eq","kind":"theorem","line":110,"name":"PNat.eq","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L110-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.pos\"><span class=\"name\">PNat</span>.<span class=\"name\">pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.pos","kind":"theorem","line":106,"name":"PNat.pos","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L106-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.coe_lt_coe\"><span class=\"name\">PNat</span>.<span class=\"name\">coe_lt_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">k</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">k</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.coe_lt_coe","kind":"theorem","line":102,"name":"PNat.coe_lt_coe","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L102-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.coe_le_coe\"><span class=\"name\">PNat</span>.<span class=\"name\">coe_le_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">k</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">k</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.coe_le_coe","kind":"theorem","line":98,"name":"PNat.coe_le_coe","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L98-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.mk_lt_mk\"><span class=\"name\">PNat</span>.<span class=\"name\">mk_lt_mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hk</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">k</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\">n</span>, <span class=\"fn\">hn</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\">k</span>, <span class=\"fn\">hk</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">k</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.mk_lt_mk","kind":"theorem","line":96,"name":"PNat.mk_lt_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L96-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.mk_le_mk\"><span class=\"name\">PNat</span>.<span class=\"name\">mk_le_mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hk</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">k</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\">n</span>, <span class=\"fn\">hn</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\">k</span>, <span class=\"fn\">hk</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">k</span></div></div>","info":{"doc":"We now define a long list of structures on ℕ+ induced by\nsimilar structures on ℕ. Most of these behave in a completely\nobvious way, but there are a few things to be said about\nsubtraction, division and powers.\n","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.mk_le_mk","kind":"theorem","line":89,"name":"PNat.mk_le_mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L89-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#Nat.toPNat'_coe\"><span class=\"name\">Nat</span>.<span class=\"name\">toPNat'_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/PNat/Defs.html#Nat.toPNat'\">toPNat'</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#Nat.toPNat'_coe","kind":"theorem","line":76,"name":"Nat.toPNat'_coe","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L76-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#Nat.toPNat'_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">toPNat'_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PNat/Defs.html#Nat.toPNat'\">toPNat'</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#Nat.toPNat'_zero","kind":"theorem","line":73,"name":"Nat.toPNat'_zero","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L73-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#Nat.toPNat'\"><span class=\"name\">Nat</span>.<span class=\"name\">toPNat'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a></div></div>","info":{"doc":"Convert a natural number to a `PNat`. `n+1` is mapped to itself,\nand `0` becomes `1`. ","docLink":"./Mathlib/Data/PNat/Defs.html#Nat.toPNat'","kind":"def","line":68,"name":"Nat.toPNat'","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L68-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.succPNat_natPred\"><span class=\"name\">PNat</span>.<span class=\"name\">succPNat_natPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/PNat/Defs.html#PNat.natPred\">natPred</a></span>.<a href=\"./Mathlib/Data/PNat/Defs.html#Nat.succPNat\">succPNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.succPNat_natPred","kind":"theorem","line":64,"name":"PNat.succPNat_natPred","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L64-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#Nat.natPred_succPNat\"><span class=\"name\">Nat</span>.<span class=\"name\">natPred_succPNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/PNat/Defs.html#Nat.succPNat\">succPNat</a></span>.<a href=\"./Mathlib/Data/PNat/Defs.html#PNat.natPred\">natPred</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#Nat.natPred_succPNat","kind":"theorem","line":60,"name":"Nat.natPred_succPNat","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L60-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#Nat.succPNat_coe\"><span class=\"name\">Nat</span>.<span class=\"name\">succPNat_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/PNat/Defs.html#Nat.succPNat\">succPNat</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#Nat.succPNat_coe","kind":"theorem","line":56,"name":"Nat.succPNat_coe","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L56-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#Nat.succPNat\"><span class=\"name\">Nat</span>.<span class=\"name\">succPNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a></div></div>","info":{"doc":"Write a successor as an element of `ℕ+`. ","docLink":"./Mathlib/Data/PNat/Defs.html#Nat.succPNat","kind":"def","line":52,"name":"Nat.succPNat","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L52-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#Nat.toPNat\"><span class=\"name\">Nat</span>.<span class=\"name\">toPNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> := by decide)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a></div></div>","info":{"doc":"Convert a natural number to a positive natural number. The\npositivity assumption is inferred by `dec_trivial`. ","docLink":"./Mathlib/Data/PNat/Defs.html#Nat.toPNat","kind":"def","line":47,"name":"Nat.toPNat","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L47-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.natPred_eq_pred\"><span class=\"name\">PNat</span>.<span class=\"name\">natPred_eq_pred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PNat/Defs.html#PNat.natPred\">natPred</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\">n</span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#Nat.pred\">pred</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.natPred_eq_pred","kind":"theorem","line":39,"name":"PNat.natPred_eq_pred","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L39-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.natPred\"><span class=\"name\">PNat</span>.<span class=\"name\">natPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>","info":{"doc":"Predecessor of a `ℕ+`, as a `ℕ`. ","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.natPred","kind":"def","line":35,"name":"PNat.natPred","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L35-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#PNat.mk_coe\"><span class=\"name\">PNat</span>.<span class=\"name\">mk_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\">n</span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#PNat.mk_coe","kind":"theorem","line":31,"name":"PNat.mk_coe","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L31-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#instOfNatPNatOfNeZeroNat\"><span class=\"name\">instOfNatPNatOfNeZeroNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#instOfNatPNatOfNeZeroNat","kind":"instance","line":25,"name":"instOfNatPNatOfNeZeroNat","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L25-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#instOnePNat\"><span class=\"name\">instOnePNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#One\">One</a> <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#instOnePNat","kind":"instance","line":22,"name":"instOnePNat","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L22-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PNat/Defs.html#instLinearOrderPNat\"><span class=\"name\">instLinearOrderPNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Data/PNat/Defs.html#instLinearOrderPNat","kind":"instance","line":20,"name":"instLinearOrderPNat","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Data/PNat/Defs.lean#L20-L20"}}],"imports":["Init","Mathlib.Data.Int.Order.Basic","Mathlib.Data.Nat.Basic","Mathlib.Data.PNat.Notation","Mathlib.Order.Basic","Mathlib.Tactic.Coe","Mathlib.Tactic.Lift"],"instances":[{"className":"LinearOrder","name":"instLinearOrderPNat","typeNames":["PNat"]},{"className":"One","name":"instOnePNat","typeNames":["PNat"]},{"className":"OfNat","name":"instOfNatPNatOfNeZeroNat","typeNames":["PNat"]},{"className":"NeZero","name":"NeZero.pnat","typeNames":["PNat.val"]},{"className":"Inhabited","name":"PNat.instInhabited","typeNames":["PNat"]},{"className":"WellFoundedRelation","name":"PNat.instWellFoundedRelation","typeNames":["PNat"]},{"className":"CanLift","name":"Nat.canLiftPNat","typeNames":["Nat","PNat","PNat.val"]},{"className":"CanLift","name":"Int.canLiftPNat","typeNames":["Int","PNat"]}],"name":"Mathlib.Data.PNat.Defs"}