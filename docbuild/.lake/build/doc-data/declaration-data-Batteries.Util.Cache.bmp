{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Util/Cache.html#Batteries.Tactic.DiscrTreeCache.getMatch\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">DiscrTreeCache</span>.<span class=\"name\">getMatch</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Batteries/Util/Cache.html#Batteries.Tactic.DiscrTreeCache\">DiscrTreeCache</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Get matches from both the discrimination tree for declarations in the current file,\nand for the imports.\n\nNote that if you are calling this multiple times with the same environment,\nit will rebuild the discrimination tree for the current file multiple times,\nand it would be more efficient to call `c.get` once,\nand then call `DiscrTree.getMatch` multiple times.\n","docLink":"./Batteries/Util/Cache.html#Batteries.Tactic.DiscrTreeCache.getMatch","kind":"def","line":157,"name":"Batteries.Tactic.DiscrTreeCache.getMatch","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Util/Cache.lean#L157-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Util/Cache.html#Batteries.Tactic.DiscrTreeCache.mk\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">DiscrTreeCache</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">profilingName</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">processDecl</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>))</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">post?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <span class=\"fn\">α</span>)</span></span> := <a href=\"./Init/Control/Basic.html#Alternative.failure\">failure</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Batteries/Util/Cache.html#Batteries.Tactic.DiscrTreeCache\">DiscrTreeCache</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Build a `DiscrTreeCache`,\nfrom a function that returns a collection of keys and values for each declaration.\n","docLink":"./Batteries/Util/Cache.html#Batteries.Tactic.DiscrTreeCache.mk","kind":"def","line":135,"name":"Batteries.Tactic.DiscrTreeCache.mk","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Util/Cache.lean#L135-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Util/Cache.html#Batteries.Tactic.DiscrTreeCache\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">DiscrTreeCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A type synonym for a `DeclCache` containing a pair of discrimination trees.\nThe first will store declarations in the current file,\nthe second will store declarations from imports (and will hopefully be \"read-only\" after creation).\n","docLink":"./Batteries/Util/Cache.html#Batteries.Tactic.DiscrTreeCache","kind":"def","line":128,"name":"Batteries.Tactic.DiscrTreeCache","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Util/Cache.lean#L128-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Util/Cache.html#Batteries.Tactic.DeclCache.get\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">DeclCache</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <span class=\"fn\"><a href=\"./Batteries/Util/Cache.html#Batteries.Tactic.DeclCache\">DeclCache</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Access the cache. Calling this function for the first time will initialize the cache\nwith the function provided in the constructor.\n","docLink":"./Batteries/Util/Cache.html#Batteries.Tactic.DeclCache.get","kind":"def","line":120,"name":"Batteries.Tactic.DeclCache.get","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Util/Cache.lean#L120-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Util/Cache.html#Batteries.Tactic.DeclCache.mk\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">DeclCache</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">profilingName</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pre</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span> := <a href=\"./Init/Control/Basic.html#Alternative.failure\">failure</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">empty</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addDecl</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addLibraryDecl</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span></span></span> := <span class=\"fn\">addDecl</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">post</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span> := <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Batteries/Util/Cache.html#Batteries.Tactic.DeclCache\">DeclCache</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Creates a `DeclCache`.\n\nFirst, if `pre` is nonempty, run that for a value,\nand if successful populate the cache with that value.\n\nIf `pre` is empty, or it fails,\nthe cached structure `α` is initialized with `empty`,\nand then `addLibraryDecl` is called for every imported constant.\nAfter all imported constants have been added, we run `post`.\nFinally, the result is cached.\n\nWhen `get` is called, `addDecl` is also called for every constant in the current file.\n","docLink":"./Batteries/Util/Cache.html#Batteries.Tactic.DeclCache.mk","kind":"def","line":89,"name":"Batteries.Tactic.DeclCache.mk","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Util/Cache.lean#L89-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Util/Cache.html#Batteries.Tactic.instNonemptyDeclCache\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instNonemptyDeclCache</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Batteries/Util/Cache.html#Batteries.Tactic.DeclCache\">DeclCache</a> <span class=\"fn\">α✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Util/Cache.html#Batteries.Tactic.instNonemptyDeclCache","kind":"instance","line":87,"name":"Batteries.Tactic.instNonemptyDeclCache","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Util/Cache.lean#L87-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Util/Cache.html#Batteries.Tactic.DeclCache.addLibraryDecl\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">DeclCache</span>.<span class=\"name\">addLibraryDecl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Util/Cache.html#Batteries.Tactic.DeclCache\">DeclCache</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span></span></span></div></div>","info":{"doc":"Function for adding a declaration from the library to the cache.\nDefaults to the same behaviour as adding a declaration from the current file. ","docLink":"./Batteries/Util/Cache.html#Batteries.Tactic.DeclCache.addLibraryDecl","kind":"def","line":86,"name":"Batteries.Tactic.DeclCache.addLibraryDecl","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Util/Cache.lean#L86-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Util/Cache.html#Batteries.Tactic.DeclCache.addDecl\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">DeclCache</span>.<span class=\"name\">addDecl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Util/Cache.html#Batteries.Tactic.DeclCache\">DeclCache</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span></span></span></div></div>","info":{"doc":"Function for adding a declaration from the current file to the cache. ","docLink":"./Batteries/Util/Cache.html#Batteries.Tactic.DeclCache.addDecl","kind":"def","line":83,"name":"Batteries.Tactic.DeclCache.addDecl","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Util/Cache.lean#L83-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Util/Cache.html#Batteries.Tactic.DeclCache.cache\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">DeclCache</span>.<span class=\"name\">cache</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Util/Cache.html#Batteries.Tactic.DeclCache\">DeclCache</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Util/Cache.html#Batteries.Tactic.Cache\">Cache</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"The cached data. ","docLink":"./Batteries/Util/Cache.html#Batteries.Tactic.DeclCache.cache","kind":"def","line":81,"name":"Batteries.Tactic.DeclCache.cache","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Util/Cache.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Util/Cache.html#Batteries.Tactic.DeclCache.mk'\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">DeclCache</span>.<span class=\"name\">mk'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <span class=\"fn\"><a href=\"./Batteries/Util/Cache.html#Batteries.Tactic.Cache\">Cache</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addDecl </span><span class=\"fn\">addLibraryDecl</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Util/Cache.html#Batteries.Tactic.DeclCache\">DeclCache</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Util/Cache.html#Batteries.Tactic.DeclCache.mk'","kind":"ctor","line":79,"name":"Batteries.Tactic.DeclCache.mk'","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Util/Cache.lean#L79-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Util/Cache.html#Batteries.Tactic.DeclCache\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">DeclCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Cached fold over the environment's declarations,\nwhere a given function is applied to `α` for every constant.\n","docLink":"./Batteries/Util/Cache.html#Batteries.Tactic.DeclCache","kind":"structure","line":75,"name":"Batteries.Tactic.DeclCache","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Util/Cache.lean#L75-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Util/Cache.html#Batteries.Tactic.Cache.get\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Cache</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Log.html#Lean.MonadLog\">Lean.MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">Lean.MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept\">MonadExcept</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Lean.Exception</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <span class=\"fn\"><a href=\"./Batteries/Util/Cache.html#Batteries.Tactic.Cache\">Cache</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Access the cache. Calling this function for the first time will initialize the cache\nwith the function provided in the constructor.\n","docLink":"./Batteries/Util/Cache.html#Batteries.Tactic.Cache.get","kind":"def","line":49,"name":"Batteries.Tactic.Cache.get","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Util/Cache.lean#L49-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Util/Cache.html#Batteries.Tactic.Cache.mk\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Cache</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Batteries/Util/Cache.html#Batteries.Tactic.Cache\">Cache</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Creates a cache with an initialization function. ","docLink":"./Batteries/Util/Cache.html#Batteries.Tactic.Cache.mk","kind":"def","line":46,"name":"Batteries.Tactic.Cache.mk","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Util/Cache.lean#L46-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Util/Cache.html#Batteries.Tactic.instNonemptyCache\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instNonemptyCache</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Batteries/Util/Cache.html#Batteries.Tactic.Cache\">Cache</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Util/Cache.html#Batteries.Tactic.instNonemptyCache","kind":"instance","line":44,"name":"Batteries.Tactic.instNonemptyCache","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Util/Cache.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Util/Cache.html#Batteries.Tactic.Cache\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Cache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Once-per-file cache. ","docLink":"./Batteries/Util/Cache.html#Batteries.Tactic.Cache","kind":"def","line":38,"name":"Batteries.Tactic.Cache","sourceLink":"https://github.com/leanprover-community/batteries/blob/903b509acff8e83c0dd7820d164968e0cb941b97/Batteries/Util/Cache.lean#L38-L39"}}],"imports":["Init","Lean.Meta.DiscrTree"],"instances":[{"className":"Nonempty","name":"Batteries.Tactic.instNonemptyCache","typeNames":["Batteries.Tactic.Cache"]},{"className":"Nonempty","name":"Batteries.Tactic.instNonemptyDeclCache","typeNames":["Batteries.Tactic.DeclCache"]}],"name":"Batteries.Util.Cache"}