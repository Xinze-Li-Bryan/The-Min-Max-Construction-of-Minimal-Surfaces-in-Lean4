{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Observe.html#Mathlib.Tactic.LibrarySearch.«tacticObserve?__:_Using__,,»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">«tacticObserve?__:_Using__,,»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`observe hp : p` asserts the proposition `p`, and tries to prove it using `exact?`.\nIf no proof is found, the tactic fails.\nIn other words, this tactic is equivalent to `have hp : p := by exact?`.\n\nIf `hp` is omitted, then the placeholder `this` is used.\n\nThe variant `observe? hp : p` will emit a trace message of the form `have hp : p := proof_term`.\nThis may be particularly useful to speed up proofs. ","docLink":"./Mathlib/Tactic/Observe.html#Mathlib.Tactic.LibrarySearch.«tacticObserve?__:_Using__,,»","kind":"def","line":54,"name":"Mathlib.Tactic.LibrarySearch.«tacticObserve?__:_Using__,,»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Observe.lean#L54-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Observe.html#Mathlib.Tactic.LibrarySearch.«tacticObserve?__:_»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">«tacticObserve?__:_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`observe hp : p` asserts the proposition `p`, and tries to prove it using `exact?`.\nIf no proof is found, the tactic fails.\nIn other words, this tactic is equivalent to `have hp : p := by exact?`.\n\nIf `hp` is omitted, then the placeholder `this` is used.\n\nThe variant `observe? hp : p` will emit a trace message of the form `have hp : p := proof_term`.\nThis may be particularly useful to speed up proofs. ","docLink":"./Mathlib/Tactic/Observe.html#Mathlib.Tactic.LibrarySearch.«tacticObserve?__:_»","kind":"def","line":50,"name":"Mathlib.Tactic.LibrarySearch.«tacticObserve?__:_»","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Observe.lean#L50-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Observe.html#Mathlib.Tactic.LibrarySearch.observe\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">observe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`observe hp : p` asserts the proposition `p`, and tries to prove it using `exact?`.\nIf no proof is found, the tactic fails.\nIn other words, this tactic is equivalent to `have hp : p := by exact?`.\n\nIf `hp` is omitted, then the placeholder `this` is used.\n\nThe variant `observe? hp : p` will emit a trace message of the form `have hp : p := proof_term`.\nThis may be particularly useful to speed up proofs. ","docLink":"./Mathlib/Tactic/Observe.html#Mathlib.Tactic.LibrarySearch.observe","kind":"def","line":21,"name":"Mathlib.Tactic.LibrarySearch.observe","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/Observe.lean#L21-L30"}}],"imports":["Init","Mathlib.Init","Lean.Meta.Tactic.TryThis","Lean.Elab.Tactic.ElabTerm","Lean.Meta.Tactic.LibrarySearch"],"instances":[],"name":"Mathlib.Tactic.Observe"}