{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis/Declarations.html#introMerge\"><span class=\"name\">introMerge</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config\">Mathlib.TacticAnalysis.Config</a></div></div>","info":{"doc":"Suggest merging two adjacent `intro` tactics which don't pattern match. ","docLink":"./Mathlib/Tactic/TacticAnalysis/Declarations.html#introMerge","kind":"def","line":272,"name":"introMerge","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis/Declarations.lean#L272-L291"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis/Declarations.html#linter.tacticAnalysis.introMerge\"><span class=\"name\">linter</span>.<span class=\"name\">tacticAnalysis</span>.<span class=\"name\">introMerge</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Suggest merging two adjacent `intro` tactics which don't pattern match. ","docLink":"./Mathlib/Tactic/TacticAnalysis/Declarations.html#linter.tacticAnalysis.introMerge","kind":"opaque","line":267,"name":"linter.tacticAnalysis.introMerge","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis/Declarations.lean#L267-L270"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis/Declarations.html#terminalToGrind\"><span class=\"name\">terminalToGrind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config\">Mathlib.TacticAnalysis.Config</a></div></div>","info":{"doc":"Suggest replacing a sequence of tactics with `grind` if that also solves the goal. ","docLink":"./Mathlib/Tactic/TacticAnalysis/Declarations.html#terminalToGrind","kind":"def","line":211,"name":"terminalToGrind","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis/Declarations.lean#L211-L264"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis/Declarations.html#linter.tacticAnalysis.terminalToGrind\"><span class=\"name\">linter</span>.<span class=\"name\">tacticAnalysis</span>.<span class=\"name\">terminalToGrind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Suggest replacing a sequence of tactics with `grind` if that also solves the goal. ","docLink":"./Mathlib/Tactic/TacticAnalysis/Declarations.html#linter.tacticAnalysis.terminalToGrind","kind":"opaque","line":206,"name":"linter.tacticAnalysis.terminalToGrind","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis/Declarations.lean#L206-L209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis/Declarations.html#mergeWithGrind\"><span class=\"name\">mergeWithGrind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config\">Mathlib.TacticAnalysis.Config</a></div></div>","info":{"doc":"Suggest merging `tac; grind` into just `grind` if that also solves the goal. ","docLink":"./Mathlib/Tactic/TacticAnalysis/Declarations.html#mergeWithGrind","kind":"def","line":192,"name":"mergeWithGrind","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis/Declarations.lean#L192-L204"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis/Declarations.html#linter.tacticAnalysis.mergeWithGrind\"><span class=\"name\">linter</span>.<span class=\"name\">tacticAnalysis</span>.<span class=\"name\">mergeWithGrind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Suggest merging `tac; grind` into just `grind` if that also solves the goal. ","docLink":"./Mathlib/Tactic/TacticAnalysis/Declarations.html#linter.tacticAnalysis.mergeWithGrind","kind":"opaque","line":187,"name":"linter.tacticAnalysis.mergeWithGrind","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis/Declarations.lean#L187-L190"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis/Declarations.html#rwMerge\"><span class=\"name\">rwMerge</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config\">Mathlib.TacticAnalysis.Config</a></div></div>","info":{"doc":"Suggest merging two adjacent `rw` tactics if that also solves the goal. ","docLink":"./Mathlib/Tactic/TacticAnalysis/Declarations.html#rwMerge","kind":"def","line":166,"name":"rwMerge","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis/Declarations.lean#L166-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis/Declarations.html#linter.tacticAnalysis.rwMerge\"><span class=\"name\">linter</span>.<span class=\"name\">tacticAnalysis</span>.<span class=\"name\">rwMerge</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Suggest merging two adjacent `rw` tactics if that also solves the goal. ","docLink":"./Mathlib/Tactic/TacticAnalysis/Declarations.html#linter.tacticAnalysis.rwMerge","kind":"opaque","line":161,"name":"linter.tacticAnalysis.rwMerge","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis/Declarations.lean#L161-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis/Declarations.html#omegaToCutsat\"><span class=\"name\">omegaToCutsat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config\">Mathlib.TacticAnalysis.Config</a></div></div>","info":{"doc":"Report places where `omega` can be replaced by `cutsat`. ","docLink":"./Mathlib/Tactic/TacticAnalysis/Declarations.html#omegaToCutsat","kind":"def","line":155,"name":"omegaToCutsat","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis/Declarations.lean#L155-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis/Declarations.html#linter.tacticAnalysis.omegaToCutsat\"><span class=\"name\">linter</span>.<span class=\"name\">tacticAnalysis</span>.<span class=\"name\">omegaToCutsat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Report places where `omega` can be replaced by `cutsat`. ","docLink":"./Mathlib/Tactic/TacticAnalysis/Declarations.html#linter.tacticAnalysis.omegaToCutsat","kind":"opaque","line":151,"name":"linter.tacticAnalysis.omegaToCutsat","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis/Declarations.lean#L151-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis/Declarations.html#omegaToCutsatRegressions\"><span class=\"name\">omegaToCutsatRegressions</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config\">Mathlib.TacticAnalysis.Config</a></div></div>","info":{"doc":"Debug `cutsat` by identifying places where it does not yet supersede `omega`. ","docLink":"./Mathlib/Tactic/TacticAnalysis/Declarations.html#omegaToCutsatRegressions","kind":"def","line":145,"name":"omegaToCutsatRegressions","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis/Declarations.lean#L145-L149"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis/Declarations.html#linter.tacticAnalysis.regressions.omegaToCutsat\"><span class=\"name\">linter</span>.<span class=\"name\">tacticAnalysis</span>.<span class=\"name\">regressions</span>.<span class=\"name\">omegaToCutsat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Debug `cutsat` by identifying places where it does not yet supersede `omega`. ","docLink":"./Mathlib/Tactic/TacticAnalysis/Declarations.html#linter.tacticAnalysis.regressions.omegaToCutsat","kind":"opaque","line":141,"name":"linter.tacticAnalysis.regressions.omegaToCutsat","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis/Declarations.lean#L141-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis/Declarations.html#ringToGrindRegressions\"><span class=\"name\">ringToGrindRegressions</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config\">Mathlib.TacticAnalysis.Config</a></div></div>","info":{"doc":"Debug `grind` by identifying places where it does not yet supersede `ring`. ","docLink":"./Mathlib/Tactic/TacticAnalysis/Declarations.html#ringToGrindRegressions","kind":"def","line":137,"name":"ringToGrindRegressions","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis/Declarations.lean#L137-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis/Declarations.html#linter.tacticAnalysis.regressions.ringToGrind\"><span class=\"name\">linter</span>.<span class=\"name\">tacticAnalysis</span>.<span class=\"name\">regressions</span>.<span class=\"name\">ringToGrind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Debug `grind` by identifying places where it does not yet supersede `ring`. ","docLink":"./Mathlib/Tactic/TacticAnalysis/Declarations.html#linter.tacticAnalysis.regressions.ringToGrind","kind":"opaque","line":133,"name":"linter.tacticAnalysis.regressions.ringToGrind","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis/Declarations.lean#L133-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis/Declarations.html#linarithToGrindRegressions\"><span class=\"name\">linarithToGrindRegressions</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config\">Mathlib.TacticAnalysis.Config</a></div></div>","info":{"doc":"Debug `grind` by identifying places where it does not yet supersede `linarith`. ","docLink":"./Mathlib/Tactic/TacticAnalysis/Declarations.html#linarithToGrindRegressions","kind":"def","line":129,"name":"linarithToGrindRegressions","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis/Declarations.lean#L129-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis/Declarations.html#linter.tacticAnalysis.regressions.linarithToGrind\"><span class=\"name\">linter</span>.<span class=\"name\">tacticAnalysis</span>.<span class=\"name\">regressions</span>.<span class=\"name\">linarithToGrind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Debug `grind` by identifying places where it does not yet supersede `linarith`. ","docLink":"./Mathlib/Tactic/TacticAnalysis/Declarations.html#linter.tacticAnalysis.regressions.linarithToGrind","kind":"opaque","line":125,"name":"linter.tacticAnalysis.regressions.linarithToGrind","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis/Declarations.lean#L125-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis/Declarations.html#Mathlib.TacticAnalysis.grindReplacementWith\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">grindReplacementWith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacticName</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacticKind</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reportFailure</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reportSuccess </span><span class=\"fn\">reportSlowdown</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxSlowdown</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a> := <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config\">Config</a></div></div>","info":{"doc":"Define a pass that tries replacing a specific tactic with `grind`.\n\n`tacticName` is a human-readable name for the tactic, for example \"linarith\".\nThis can be used to group messages together, so that `ring`, `ring_nf`, `ring1`, ...\nall produce the same message.\n\n`tacticKind` is the `SyntaxNodeKind` for the tactic's main parser,\nfor example `Mathlib.Tactic.linarith`.\n","docLink":"./Mathlib/Tactic/TacticAnalysis/Declarations.html#Mathlib.TacticAnalysis.grindReplacementWith","kind":"def","line":104,"name":"Mathlib.TacticAnalysis.grindReplacementWith","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis/Declarations.lean#L104-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/TacticAnalysis/Declarations.html#Mathlib.TacticAnalysis.terminalReplacement\"><span class=\"name\">Mathlib</span>.<span class=\"name\">TacticAnalysis</span>.<span class=\"name\">terminalReplacement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oldTacticName </span><span class=\"fn\">newTacticName</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oldTacticKind</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newTactic</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reportFailure</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reportSuccess </span><span class=\"fn\">reportSlowdown</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxSlowdown</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a> := <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/TacticAnalysis.html#Mathlib.TacticAnalysis.Config\">Config</a></div></div>","info":{"doc":"Define a pass that tries replacing one terminal tactic with another.\n\n`newTacticName` is a human-readable name for the tactic, for example \"linarith\".\nThis can be used to group messages together, so that `ring`, `ring_nf`, `ring1`, ...\nall produce the same message.\n\n`oldTacticKind` is the `SyntaxNodeKind` for the tactic's main parser,\nfor example `Mathlib.Tactic.linarith`.\n\n`newTactic stx goal` selects the new tactic to try, which may depend on the old tactic invocation\nin `stx` and the current `goal`.\n","docLink":"./Mathlib/Tactic/TacticAnalysis/Declarations.html#Mathlib.TacticAnalysis.terminalReplacement","kind":"def","line":30,"name":"Mathlib.TacticAnalysis.terminalReplacement","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/d3298500e6d853c0856bebdb79d46f430b6a5e5e/Mathlib/Tactic/TacticAnalysis/Declarations.lean#L30-L101"}}],"imports":["Init","Mathlib.Tactic.TacticAnalysis","Mathlib.Tactic.ExtractGoal","Mathlib.Tactic.MinImports","Lean.Elab.Tactic.Meta","Lean.Elab.Command"],"instances":[],"name":"Mathlib.Tactic.TacticAnalysis.Declarations"}