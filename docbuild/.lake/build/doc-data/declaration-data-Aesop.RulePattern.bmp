{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern.elab.abstractMVars'\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span>.<span class=\"name\">elab</span>.<span class=\"name\">abstractMVars'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<a href=\"./Lean/Meta/Basic.html#Lean.Meta.AbstractMVarsResult\">Lean.Meta.AbstractMVarsResult</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></div></div>","info":{"doc":"","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern.elab.abstractMVars'","kind":"def","line":121,"name":"Aesop.RulePattern.elab.abstractMVars'","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/RulePattern.lean#L121-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern.elab.fvarsToMVars\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span>.<span class=\"name\">elab</span>.<span class=\"name\">fvarsToMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></div></div>","info":{"doc":"","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern.elab.fvarsToMVars","kind":"def","line":114,"name":"Aesop.RulePattern.elab.fvarsToMVars","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/RulePattern.lean#L114-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern.elab\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span>.<span class=\"name\">elab</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rule</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Aesop/RulePattern.html#Aesop.RulePattern\">RulePattern</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern.elab","kind":"def","line":96,"name":"Aesop.RulePattern.elab","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/RulePattern.lean#L96-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern.match\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span>.<span class=\"name\">match</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <a href=\"./Aesop/RulePattern.html#Aesop.RulePattern\">RulePattern</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern.match","kind":"def","line":73,"name":"Aesop.RulePattern.match","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/RulePattern.lean#L73-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern.open\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span>.<span class=\"name\">open</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <a href=\"./Aesop/RulePattern.html#Aesop.RulePattern\">RulePattern</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></div></div>","info":{"doc":"","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern.open","kind":"def","line":65,"name":"Aesop.RulePattern.open","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/RulePattern.lean#L65-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern.boundPremises\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span>.<span class=\"name\">boundPremises</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <a href=\"./Aesop/RulePattern.html#Aesop.RulePattern\">RulePattern</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern.boundPremises","kind":"def","line":57,"name":"Aesop.RulePattern.boundPremises","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/RulePattern.lean#L57-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.instInhabitedRulePattern\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedRulePattern</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/RulePattern.html#Aesop.RulePattern\">RulePattern</a></span></div></div>","info":{"doc":"","docLink":"./Aesop/RulePattern.html#Aesop.instInhabitedRulePattern","kind":"instance","line":53,"name":"Aesop.instInhabitedRulePattern","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/RulePattern.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.instInhabitedRulePattern.default\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedRulePattern</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/RulePattern.html#Aesop.RulePattern\">RulePattern</a></div></div>","info":{"doc":"","docLink":"./Aesop/RulePattern.html#Aesop.instInhabitedRulePattern.default","kind":"def","line":53,"name":"Aesop.instInhabitedRulePattern.default","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/RulePattern.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern.discrTreeKeys\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span>.<span class=\"name\">discrTreeKeys</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/RulePattern.html#Aesop.RulePattern\">RulePattern</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a></span></div></div>","info":{"doc":"Discrimination tree keys for `p`.\n","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern.discrTreeKeys","kind":"def","line":52,"name":"Aesop.RulePattern.discrTreeKeys","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/RulePattern.lean#L52-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern.levelArgMap\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span>.<span class=\"name\">levelArgMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/RulePattern.html#Aesop.RulePattern\">RulePattern</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>","info":{"doc":"A partial map from the level metavariables occurring in the rule to the\npattern's level params.\n","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern.levelArgMap","kind":"def","line":48,"name":"Aesop.RulePattern.levelArgMap","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/RulePattern.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern.argMap\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span>.<span class=\"name\">argMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/RulePattern.html#Aesop.RulePattern\">RulePattern</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>","info":{"doc":"A partial map from the index set `{0, ..., n-1}` into `{0, ..., k-1}`. If\n`argMap[i] = j`, this indicates that when matching against the rule type, the\ninstantiation `tⱼ` of `yⱼ` should be substituted for `xᵢ`.\n","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern.argMap","kind":"def","line":43,"name":"Aesop.RulePattern.argMap","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/RulePattern.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern.pattern\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span>.<span class=\"name\">pattern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/RulePattern.html#Aesop.RulePattern\">RulePattern</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.AbstractMVarsResult\">Lean.Meta.AbstractMVarsResult</a></div></div>","info":{"doc":"An expression of the form `λ y₀ ... yₖ, p` representing the\npattern.\n","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern.pattern","kind":"def","line":37,"name":"Aesop.RulePattern.pattern","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/RulePattern.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pattern</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.AbstractMVarsResult\">Lean.Meta.AbstractMVarsResult</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argMap </span><span class=\"fn\">levelArgMap</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discrTreeKeys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/RulePattern.html#Aesop.RulePattern\">RulePattern</a></div></div>","info":{"doc":"","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern.mk","kind":"ctor","line":32,"name":"Aesop.RulePattern.mk","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/RulePattern.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/RulePattern.html#Aesop.RulePattern\"><span class=\"name\">Aesop</span>.<span class=\"name\">RulePattern</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A rule pattern. For a rule of type `∀ (x₀ : T₀) ... (xₙ : Tₙ), U`, a valid rule\npattern is an expression `p` such that `x₀ : T₁, ..., xₙ : Tₙ ⊢ p : P`. Let\n`y₀, ..., yₖ` be those variables `xᵢ` on which `p` depends. When `p` matches an\nexpression `e`, this means that `e` is defeq to `p` (where each `yᵢ` is replaced\nwith a metavariable) and we obtain a substitution\n\n    {y₀ ↦ t₀ : T₀, y₁ ↦ t₁ : T₁[x₀ := t₀], ...}\n\nNow suppose we want to match the above rule type against a type `V` (where `V`\nis the target for an `apply`-like rule and a hypothesis type for a\n`forward`-like rule). To that end, we take `U` and replace each `xᵢ` where\n`xᵢ = yⱼ` with `tⱼ` and each `xᵢ` with `xᵢ ≠ yⱼ ∀ j` with a metavariable. The\nresulting expression `U'` is then matched against `V`.\n","docLink":"./Aesop/RulePattern.html#Aesop.RulePattern","kind":"structure","line":17,"name":"Aesop.RulePattern","sourceLink":"https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/Aesop/RulePattern.lean#L17-L53"}}],"imports":["Init","Aesop.Forward.Substitution","Aesop.RPINF","Aesop.Rule.Name","Aesop.Tracing","Aesop.Index.DiscrTreeConfig"],"instances":[{"className":"Inhabited","name":"Aesop.instInhabitedRulePattern","typeNames":["Aesop.RulePattern"]}],"name":"Aesop.RulePattern"}