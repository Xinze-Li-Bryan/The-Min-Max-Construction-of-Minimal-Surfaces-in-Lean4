{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#instTwoUniqueSumsFinsupp\"><span class=\"name\">instTwoUniqueSumsFinsupp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> (<span class=\"fn\">ι</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">G</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#instTwoUniqueSumsFinsupp","kind":"instance","line":624,"name":"instTwoUniqueSumsFinsupp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L624-L626"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#instTwoUniqueSumsDFinsupp\"><span class=\"name\">instTwoUniqueSumsDFinsupp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#instTwoUniqueSumsDFinsupp","kind":"instance","line":619,"name":"instTwoUniqueSumsDFinsupp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L619-L622"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums.of_covariant_left\"><span class=\"name\">TwoUniqueSums</span>.<span class=\"name\">of_covariant_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsLeftCancelAdd\">IsLeftCancelAdd</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightStrictMono\">AddRightStrictMono</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">G</span></span></div></div>","info":{"doc":"This instance asserts that if `G` has a left-cancellative addition, a linear order, and\naddition is strictly monotone w.r.t. the first argument, then `G` has `TwoUniqueSums`. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums.of_covariant_left","kind":"instance","line":606,"name":"TwoUniqueSums.of_covariant_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L606-L608"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds.of_covariant_left\"><span class=\"name\">TwoUniqueProds</span>.<span class=\"name\">of_covariant_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsLeftCancelMul\">IsLeftCancelMul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightStrictMono\">MulRightStrictMono</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\">TwoUniqueProds</a> <span class=\"fn\">G</span></span></div></div>","info":{"doc":"This instance asserts that if `G` has a left-cancellative multiplication, a linear order, and\nmultiplication is strictly monotone w.r.t. the first argument, then `G` has `TwoUniqueProds`. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds.of_covariant_left","kind":"instance","line":604,"name":"TwoUniqueProds.of_covariant_left","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L604-L615"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums.of_covariant_right\"><span class=\"name\">TwoUniqueSums</span>.<span class=\"name\">of_covariant_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsRightCancelAdd\">IsRightCancelAdd</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftStrictMono\">AddLeftStrictMono</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">G</span></span></div></div>","info":{"doc":"This instance asserts that if `G` has a right-cancellative addition, a linear order,\nand addition is strictly monotone w.r.t. the second argument, then `G` has `TwoUniqueSums`. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums.of_covariant_right","kind":"instance","line":572,"name":"TwoUniqueSums.of_covariant_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L572-L574"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds.of_covariant_right\"><span class=\"name\">TwoUniqueProds</span>.<span class=\"name\">of_covariant_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsRightCancelMul\">IsRightCancelMul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftStrictMono\">MulLeftStrictMono</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\">TwoUniqueProds</a> <span class=\"fn\">G</span></span></div></div>","info":{"doc":"This instance asserts that if `G` has a right-cancellative multiplication, a linear order, and\nmultiplication is strictly monotone w.r.t. the second argument, then `G` has `TwoUniqueProds`. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds.of_covariant_right","kind":"instance","line":570,"name":"TwoUniqueProds.of_covariant_right","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L570-L600"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums.instAddOpposite\"><span class=\"name\">TwoUniqueSums</span>.<span class=\"name\">instAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">G</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums.instAddOpposite","kind":"instance","line":566,"name":"TwoUniqueSums.instAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L566-L566"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds.instMulOpposite\"><span class=\"name\">TwoUniqueProds</span>.<span class=\"name\">instMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\">TwoUniqueProds</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\">TwoUniqueProds</a> <span class=\"fn\">G</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds.instMulOpposite","kind":"instance","line":566,"name":"TwoUniqueProds.instMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L566-L567"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums.of_addOpposite\"><span class=\"name\">TwoUniqueSums</span>.<span class=\"name\">of_addOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">G</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">G</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums.of_addOpposite","kind":"theorem","line":552,"name":"TwoUniqueSums.of_addOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L552-L552"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds.of_mulOpposite\"><span class=\"name\">TwoUniqueProds</span>.<span class=\"name\">of_mulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\">TwoUniqueProds</a> <span class=\"fn\">G</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\">TwoUniqueProds</a> <span class=\"fn\">G</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds.of_mulOpposite","kind":"theorem","line":552,"name":"TwoUniqueProds.of_mulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L552-L564"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#Prod.instTwoUniqueSums\"><span class=\"name\">Prod</span>.<span class=\"name\">instTwoUniqueSums</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> (<span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">H</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#Prod.instTwoUniqueSums","kind":"instance","line":541,"name":"Prod.instTwoUniqueSums","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L541-L541"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#Prod.instTwoUniqueProds\"><span class=\"name\">Prod</span>.<span class=\"name\">instTwoUniqueProds</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\">TwoUniqueProds</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\">TwoUniqueProds</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\">TwoUniqueProds</a> (<span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">H</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#Prod.instTwoUniqueProds","kind":"instance","line":541,"name":"Prod.instTwoUniqueProds","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L541-L549"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums.instForall\"><span class=\"name\">TwoUniqueSums</span>.<span class=\"name\">instForall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">((<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums.instForall","kind":"instance","line":506,"name":"TwoUniqueSums.instForall","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L506-L506"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds.instForall\"><span class=\"name\">TwoUniqueProds</span>.<span class=\"name\">instForall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\">TwoUniqueProds</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\">TwoUniqueProds</a> <span class=\"fn\">((<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds.instForall","kind":"instance","line":506,"name":"TwoUniqueProds.instForall","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L506-L538"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#AddEquiv.twoUniqueSums_iff\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">twoUniqueSums_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">H</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">H</span></span></div></div>","info":{"doc":"`TwoUniqueSums` is preserved under additive equivalences. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#AddEquiv.twoUniqueSums_iff","kind":"theorem","line":502,"name":"AddEquiv.twoUniqueSums_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L502-L502"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#MulEquiv.twoUniqueProds_iff\"><span class=\"name\">MulEquiv</span>.<span class=\"name\">twoUniqueProds_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv\">≃*</a> <span class=\"fn\">H</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\">TwoUniqueProds</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\">TwoUniqueProds</a> <span class=\"fn\">H</span></span></div></div>","info":{"doc":"`TwoUniqueProd` is preserved under multiplicative equivalences. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#MulEquiv.twoUniqueProds_iff","kind":"theorem","line":501,"name":"MulEquiv.twoUniqueProds_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L501-L504"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums.of_injective_addHom\"><span class=\"name\">TwoUniqueSums</span>.<span class=\"name\">of_injective_addHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">H</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Init/Data/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">G</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">H</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums.of_injective_addHom","kind":"theorem","line":496,"name":"TwoUniqueSums.of_injective_addHom","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L496-L496"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds.of_injective_mulHom\"><span class=\"name\">TwoUniqueProds</span>.<span class=\"name\">of_injective_mulHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">H</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MulHom\">→ₙ*</a> <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Init/Data/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\">TwoUniqueProds</a> <span class=\"fn\">G</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\">TwoUniqueProds</a> <span class=\"fn\">H</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds.of_injective_mulHom","kind":"theorem","line":496,"name":"TwoUniqueProds.of_injective_mulHom","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L496-L499"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums.of_addHom\"><span class=\"name\">TwoUniqueSums</span>.<span class=\"name\">of_addHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">H</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ ⦃<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">H</span>⦄, <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">d</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">d</span></span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">H</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums.of_addHom","kind":"theorem","line":476,"name":"TwoUniqueSums.of_addHom","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L476-L476"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds.of_mulHom\"><span class=\"name\">TwoUniqueProds</span>.<span class=\"name\">of_mulHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">H</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MulHom\">→ₙ*</a> <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ ⦃<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">H</span>⦄, <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">d</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">d</span></span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\">TwoUniqueProds</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\">TwoUniqueProds</a> <span class=\"fn\">H</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds.of_mulHom","kind":"theorem","line":476,"name":"TwoUniqueProds.of_mulHom","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L476-L494"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#instUniqueSumsFinsupp\"><span class=\"name\">instUniqueSumsFinsupp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> (<span class=\"fn\">ι</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">G</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#instUniqueSumsFinsupp","kind":"instance","line":468,"name":"instUniqueSumsFinsupp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L468-L470"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#instUniqueSumsDFinsupp\"><span class=\"name\">instUniqueSumsDFinsupp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddZeroClass\">AddZeroClass</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">Π₀</a> (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>)<a href=\"./Mathlib/Data/DFinsupp/Defs.html#DFinsupp\">,</a> <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#instUniqueSumsDFinsupp","kind":"instance","line":463,"name":"instUniqueSumsDFinsupp","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L463-L466"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#Prod.instUniqueSums\"><span class=\"name\">Prod</span>.<span class=\"name\">instUniqueSums</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> (<span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">H</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#Prod.instUniqueSums","kind":"instance","line":452,"name":"Prod.instUniqueSums","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L452-L452"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#Prod.instUniqueProds\"><span class=\"name\">Prod</span>.<span class=\"name\">instUniqueProds</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\">UniqueProds</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\">UniqueProds</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\">UniqueProds</a> (<span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">H</span>)</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#Prod.instUniqueProds","kind":"instance","line":452,"name":"Prod.instUniqueProds","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L452-L459"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums.instForall\"><span class=\"name\">UniqueSums</span>.<span class=\"name\">instForall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">((<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums.instForall","kind":"instance","line":428,"name":"UniqueSums.instForall","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L428-L428"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds.instForall\"><span class=\"name\">UniqueProds</span>.<span class=\"name\">instForall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\">UniqueProds</a> <span class=\"fn\">(<span class=\"fn\">G</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\">UniqueProds</a> <span class=\"fn\">((<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">i</span></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds.instForall","kind":"instance","line":428,"name":"UniqueProds.instForall","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L428-L449"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums.toTwoUniqueSums_of_addGroup\"><span class=\"name\">UniqueSums</span>.<span class=\"name\">toTwoUniqueSums_of_addGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">G</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums.toTwoUniqueSums_of_addGroup","kind":"theorem","line":377,"name":"UniqueSums.toTwoUniqueSums_of_addGroup","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L377-L377"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds.toTwoUniqueProds_of_group\"><span class=\"name\">UniqueProds</span>.<span class=\"name\">toTwoUniqueProds_of_group</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\">UniqueProds</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\">TwoUniqueProds</a> <span class=\"fn\">G</span></span></div></div>","info":{"doc":"If a group has `UniqueProds`, then it actually has `TwoUniqueProds`.\nFor an example of a semigroup `G` embeddable into a group that has `UniqueProds`\nbut not `TwoUniqueProds`, see Example 10.13 in\n[J. Okniński, *Semigroup Algebras*][Okninski1991]. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds.toTwoUniqueProds_of_group","kind":"theorem","line":373,"name":"UniqueProds.toTwoUniqueProds_of_group","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L373-L425"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums.of_same\"><span class=\"name\">UniqueSums</span>.<span class=\"name\">of_same</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddSemigroup\">AddSemigroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCancelAdd\">IsCancelAdd</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ {<span class=\"fn\">A</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span> → <span class=\"fn\">∃ <span class=\"fn\">a1</span> ∈ <span class=\"fn\">A</span>, <span class=\"fn\">∃ <span class=\"fn\">a2</span> ∈ <span class=\"fn\">A</span>, <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">A</span> <span class=\"fn\">a1</span> <span class=\"fn\">a2</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">G</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums.of_same","kind":"theorem","line":360,"name":"UniqueSums.of_same","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L360-L360"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds.of_same\"><span class=\"name\">UniqueProds</span>.<span class=\"name\">of_same</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Semigroup\">Semigroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCancelMul\">IsCancelMul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ {<span class=\"fn\">A</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span> → <span class=\"fn\">∃ <span class=\"fn\">a1</span> ∈ <span class=\"fn\">A</span>, <span class=\"fn\">∃ <span class=\"fn\">a2</span> ∈ <span class=\"fn\">A</span>, <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">A</span> <span class=\"fn\">a1</span> <span class=\"fn\">a2</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\">UniqueProds</a> <span class=\"fn\">G</span></span></div></div>","info":{"doc":"`UniqueProds G` says that for any two nonempty `Finset`s `A` and `B` in `G`, `A × B`\ncontains a unique pair with the `UniqueMul` property. Strojnowski showed that if `G` is\na group, then we only need to check this when `A = B`.\nHere we generalize the result to cancellative semigroups.\nNon-cancellative counterexample: the AddMonoid {0,1} with 1+1=1. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds.of_same","kind":"theorem","line":355,"name":"UniqueProds.of_same","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L355-L371"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums.toIsCancelAdd\"><span class=\"name\">UniqueSums</span>.<span class=\"name\">toIsCancelAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCancelAdd\">IsCancelAdd</a> <span class=\"fn\">G</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums.toIsCancelAdd","kind":"theorem","line":348,"name":"UniqueSums.toIsCancelAdd","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L348-L348"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds.toIsCancelMul\"><span class=\"name\">UniqueProds</span>.<span class=\"name\">toIsCancelMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\">UniqueProds</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsCancelMul\">IsCancelMul</a> <span class=\"fn\">G</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds.toIsCancelMul","kind":"theorem","line":348,"name":"UniqueProds.toIsCancelMul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L348-L351"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums.instAddOpposite\"><span class=\"name\">UniqueSums</span>.<span class=\"name\">instAddOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">G</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums.instAddOpposite","kind":"instance","line":333,"name":"UniqueSums.instAddOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L333-L333"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds.instMulOpposite\"><span class=\"name\">UniqueProds</span>.<span class=\"name\">instMulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\">UniqueProds</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\">UniqueProds</a> <span class=\"fn\">G</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds.instMulOpposite","kind":"instance","line":333,"name":"UniqueProds.instMulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L333-L334"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums.of_addOpposite\"><span class=\"name\">UniqueSums</span>.<span class=\"name\">of_addOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">G</span><a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite\">ᵃᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">G</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums.of_addOpposite","kind":"theorem","line":326,"name":"UniqueSums.of_addOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L326-L326"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds.of_mulOpposite\"><span class=\"name\">UniqueProds</span>.<span class=\"name\">of_mulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\">UniqueProds</a> <span class=\"fn\">G</span><a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite\">ᵐᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\">UniqueProds</a> <span class=\"fn\">G</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds.of_mulOpposite","kind":"theorem","line":326,"name":"UniqueProds.of_mulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L326-L331"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#AddEquiv.uniqueSums_iff\"><span class=\"name\">AddEquiv</span>.<span class=\"name\">uniqueSums_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#AddEquiv\">≃+</a> <span class=\"fn\">H</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">H</span></span></div></div>","info":{"doc":"`UniqueSums` is preserved under additive equivalences. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#AddEquiv.uniqueSums_iff","kind":"theorem","line":321,"name":"AddEquiv.uniqueSums_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L321-L321"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#MulEquiv.uniqueProds_iff\"><span class=\"name\">MulEquiv</span>.<span class=\"name\">uniqueProds_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Equiv/Defs.html#MulEquiv\">≃*</a> <span class=\"fn\">H</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\">UniqueProds</a> <span class=\"fn\">G</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\">UniqueProds</a> <span class=\"fn\">H</span></span></div></div>","info":{"doc":"`UniqueProd` is preserved under multiplicative equivalences. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#MulEquiv.uniqueProds_iff","kind":"theorem","line":320,"name":"MulEquiv.uniqueProds_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L320-L323"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums.of_injective_addHom\"><span class=\"name\">UniqueSums</span>.<span class=\"name\">of_injective_addHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">H</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Init/Data/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">G</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">H</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums.of_injective_addHom","kind":"theorem","line":316,"name":"UniqueSums.of_injective_addHom","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L316-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds.of_injective_mulHom\"><span class=\"name\">UniqueProds</span>.<span class=\"name\">of_injective_mulHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">H</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MulHom\">→ₙ*</a> <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Init/Data/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\">UniqueProds</a> <span class=\"fn\">G</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\">UniqueProds</a> <span class=\"fn\">H</span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds.of_injective_mulHom","kind":"theorem","line":316,"name":"UniqueProds.of_injective_mulHom","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L316-L318"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums.of_addHom\"><span class=\"name\">UniqueSums</span>.<span class=\"name\">of_addHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">H</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ ⦃<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">H</span>⦄, <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">d</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">d</span></span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">H</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums.of_addHom","kind":"theorem","line":306,"name":"UniqueSums.of_addHom","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L306-L306"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds.of_mulHom\"><span class=\"name\">UniqueProds</span>.<span class=\"name\">of_mulHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">H</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MulHom\">→ₙ*</a> <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ ⦃<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">H</span>⦄, <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">d</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">d</span></span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\">UniqueProds</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\">UniqueProds</a> <span class=\"fn\">H</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds.of_mulHom","kind":"theorem","line":306,"name":"UniqueProds.of_mulHom","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L306-L314"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#Additive.instTwoUniqueSumsOfTwoUniqueProds\"><span class=\"name\">Additive</span>.<span class=\"name\">instTwoUniqueSumsOfTwoUniqueProds</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\">TwoUniqueProds</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Additive\">Additive</a> <span class=\"fn\">M</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#Additive.instTwoUniqueSumsOfTwoUniqueProds","kind":"instance","line":286,"name":"Additive.instTwoUniqueSumsOfTwoUniqueProds","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L286-L287"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#Additive.instUniqueSumsOfUniqueProds\"><span class=\"name\">Additive</span>.<span class=\"name\">instUniqueSumsOfUniqueProds</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\">UniqueProds</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Additive\">Additive</a> <span class=\"fn\">M</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#Additive.instUniqueSumsOfUniqueProds","kind":"instance","line":283,"name":"Additive.instUniqueSumsOfUniqueProds","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L283-L284"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#Multiplicative.instTwoUniqueProdsOfTwoUniqueSums\"><span class=\"name\">Multiplicative</span>.<span class=\"name\">instTwoUniqueProdsOfTwoUniqueSums</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\">TwoUniqueProds</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative\">Multiplicative</a> <span class=\"fn\">M</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#Multiplicative.instTwoUniqueProdsOfTwoUniqueSums","kind":"instance","line":276,"name":"Multiplicative.instTwoUniqueProdsOfTwoUniqueSums","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L276-L277"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#Multiplicative.instUniqueProdsOfUniqueSums\"><span class=\"name\">Multiplicative</span>.<span class=\"name\">instUniqueProdsOfUniqueSums</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\">UniqueProds</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/TypeTags/Basic.html#Multiplicative\">Multiplicative</a> <span class=\"fn\">M</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#Multiplicative.instUniqueProdsOfUniqueSums","kind":"instance","line":273,"name":"Multiplicative.instUniqueProdsOfUniqueSums","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L273-L274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums.toUniqueSums\"><span class=\"name\">TwoUniqueSums</span>.<span class=\"name\">toUniqueSums</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">G</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums.toUniqueSums","kind":"instance","line":267,"name":"TwoUniqueSums.toUniqueSums","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L267-L267"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds.toUniqueProds\"><span class=\"name\">TwoUniqueProds</span>.<span class=\"name\">toUniqueProds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\">TwoUniqueProds</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\">UniqueProds</a> <span class=\"fn\">G</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds.toUniqueProds","kind":"instance","line":267,"name":"TwoUniqueProds.toUniqueProds","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L267-L269"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#uniqueAdd_of_twoUniqueAdd\"><span class=\"name\">uniqueAdd_of_twoUniqueAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> → <span class=\"fn\">∃ <span class=\"fn\">p1</span> ∈ <span class=\"fn\">A</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">B</span>, <span class=\"fn\">∃ <span class=\"fn\">p2</span> ∈ <span class=\"fn\">A</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">B</span>, <span class=\"fn\">p1</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">p2</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\"><span class=\"fn\">p1</span>.1</span> <span class=\"fn\"><span class=\"fn\">p1</span>.2</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\"><span class=\"fn\">p2</span>.1</span> <span class=\"fn\"><span class=\"fn\">p2</span>.2</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hA</span> : <span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hB</span> : <span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">a</span> ∈ <span class=\"fn\">A</span>, <span class=\"fn\">∃ <span class=\"fn\">b</span> ∈ <span class=\"fn\">B</span>, <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#uniqueAdd_of_twoUniqueAdd","kind":"theorem","line":255,"name":"uniqueAdd_of_twoUniqueAdd","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L255-L255"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#uniqueMul_of_twoUniqueMul\"><span class=\"name\">uniqueMul_of_twoUniqueMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> → <span class=\"fn\">∃ <span class=\"fn\">p1</span> ∈ <span class=\"fn\">A</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">B</span>, <span class=\"fn\">∃ <span class=\"fn\">p2</span> ∈ <span class=\"fn\">A</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">B</span>, <span class=\"fn\">p1</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">p2</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\"><span class=\"fn\">p1</span>.1</span> <span class=\"fn\"><span class=\"fn\">p1</span>.2</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\"><span class=\"fn\">p2</span>.1</span> <span class=\"fn\"><span class=\"fn\">p2</span>.2</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hA</span> : <span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hB</span> : <span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">a</span> ∈ <span class=\"fn\">A</span>, <span class=\"fn\">∃ <span class=\"fn\">b</span> ∈ <span class=\"fn\">B</span>, <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#uniqueMul_of_twoUniqueMul","kind":"theorem","line":255,"name":"uniqueMul_of_twoUniqueMul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L255-L265"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds.uniqueMul_of_one_lt_card\"><span class=\"name\">TwoUniqueProds</span>.<span class=\"name\">uniqueMul_of_one_lt_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\">TwoUniqueProds</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> → <span class=\"fn\">∃ <span class=\"fn\">p1</span> ∈ <span class=\"fn\">A</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">B</span>, <span class=\"fn\">∃ <span class=\"fn\">p2</span> ∈ <span class=\"fn\">A</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">B</span>, <span class=\"fn\">p1</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">p2</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\"><span class=\"fn\">p1</span>.1</span> <span class=\"fn\"><span class=\"fn\">p1</span>.2</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\"><span class=\"fn\">p2</span>.1</span> <span class=\"fn\"><span class=\"fn\">p2</span>.2</span></span></span></span></span></div></div>","info":{"doc":"For `A B` two finite sets whose product has cardinality at least 2,\nwe can find at least two unique pairs. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds.uniqueMul_of_one_lt_card","kind":"theorem","line":250,"name":"TwoUniqueProds.uniqueMul_of_one_lt_card","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L250-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds.mk\"><span class=\"name\">TwoUniqueProds</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">uniqueMul_of_one_lt_card</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>},\n    <span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> → <span class=\"fn\">∃ <span class=\"fn\">p1</span> ∈ <span class=\"fn\">A</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">B</span>, <span class=\"fn\">∃ <span class=\"fn\">p2</span> ∈ <span class=\"fn\">A</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">B</span>, <span class=\"fn\">p1</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">p2</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\"><span class=\"fn\">p1</span>.1</span> <span class=\"fn\"><span class=\"fn\">p1</span>.2</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\"><span class=\"fn\">p2</span>.1</span> <span class=\"fn\"><span class=\"fn\">p2</span>.2</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\">TwoUniqueProds</a> <span class=\"fn\">G</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds.mk","kind":"ctor","line":247,"name":"TwoUniqueProds.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L247-L247"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds\"><span class=\"name\">TwoUniqueProds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Let `G` be a Type with multiplication. `TwoUniqueProds G` asserts that any two non-empty\nfinite subsets of `G`, at least one of which is not a singleton, possesses at least two pairs\nof elements satisfying the `UniqueMul` property. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueProds","kind":"class","line":244,"name":"TwoUniqueProds","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L244-L251"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums.uniqueAdd_of_one_lt_card\"><span class=\"name\">TwoUniqueSums</span>.<span class=\"name\">uniqueAdd_of_one_lt_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> → <span class=\"fn\">∃ <span class=\"fn\">p1</span> ∈ <span class=\"fn\">A</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">B</span>, <span class=\"fn\">∃ <span class=\"fn\">p2</span> ∈ <span class=\"fn\">A</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">B</span>, <span class=\"fn\">p1</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">p2</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\"><span class=\"fn\">p1</span>.1</span> <span class=\"fn\"><span class=\"fn\">p1</span>.2</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\"><span class=\"fn\">p2</span>.1</span> <span class=\"fn\"><span class=\"fn\">p2</span>.2</span></span></span></span></span></div></div>","info":{"doc":"For `A B` two finite sets whose product has cardinality at least 2,\nwe can find at least two unique pairs. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums.uniqueAdd_of_one_lt_card","kind":"theorem","line":241,"name":"TwoUniqueSums.uniqueAdd_of_one_lt_card","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L241-L241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums.mk\"><span class=\"name\">TwoUniqueSums</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">uniqueAdd_of_one_lt_card</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>},\n    <span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> → <span class=\"fn\">∃ <span class=\"fn\">p1</span> ∈ <span class=\"fn\">A</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">B</span>, <span class=\"fn\">∃ <span class=\"fn\">p2</span> ∈ <span class=\"fn\">A</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">B</span>, <span class=\"fn\">p1</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">p2</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\"><span class=\"fn\">p1</span>.1</span> <span class=\"fn\"><span class=\"fn\">p1</span>.2</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\"><span class=\"fn\">p2</span>.1</span> <span class=\"fn\"><span class=\"fn\">p2</span>.2</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\">TwoUniqueSums</a> <span class=\"fn\">G</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums.mk","kind":"ctor","line":238,"name":"TwoUniqueSums.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L238-L238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums\"><span class=\"name\">TwoUniqueSums</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Let `G` be a Type with addition. `TwoUniqueSums G` asserts that any two non-empty\nfinite subsets of `G`, at least one of which is not a singleton, possesses at least two pairs\nof elements satisfying the `UniqueAdd` property. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#TwoUniqueSums","kind":"class","line":235,"name":"TwoUniqueSums","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L235-L242"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds.uniqueMul_of_nonempty\"><span class=\"name\">UniqueProds</span>.<span class=\"name\">uniqueMul_of_nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\">UniqueProds</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span> → <span class=\"fn\">∃ <span class=\"fn\">a0</span> ∈ <span class=\"fn\">A</span>, <span class=\"fn\">∃ <span class=\"fn\">b0</span> ∈ <span class=\"fn\">B</span>, <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span></span></span></span></span></div></div>","info":{"doc":"For `A B` two nonempty finite sets, there always exist `a0 ∈ A, b0 ∈ B` such that\n`UniqueMul A B a0 b0` ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds.uniqueMul_of_nonempty","kind":"theorem","line":230,"name":"UniqueProds.uniqueMul_of_nonempty","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L230-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds.mk\"><span class=\"name\">UniqueProds</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">uniqueMul_of_nonempty</span> : <span class=\"fn\">∀ {<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span> → <span class=\"fn\">∃ <span class=\"fn\">a0</span> ∈ <span class=\"fn\">A</span>, <span class=\"fn\">∃ <span class=\"fn\">b0</span> ∈ <span class=\"fn\">B</span>, <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\">UniqueProds</a> <span class=\"fn\">G</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds.mk","kind":"ctor","line":227,"name":"UniqueProds.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L227-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds\"><span class=\"name\">UniqueProds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Let `G` be a Type with multiplication.  `UniqueProds G` asserts that any two non-empty\nfinite subsets of `G` have the `UniqueMul` property, with respect to some element of their\nproduct `A * B`. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueProds","kind":"class","line":224,"name":"UniqueProds","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L224-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums.uniqueAdd_of_nonempty\"><span class=\"name\">UniqueSums</span>.<span class=\"name\">uniqueAdd_of_nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span> → <span class=\"fn\">∃ <span class=\"fn\">a0</span> ∈ <span class=\"fn\">A</span>, <span class=\"fn\">∃ <span class=\"fn\">b0</span> ∈ <span class=\"fn\">B</span>, <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span></span></span></span></span></div></div>","info":{"doc":"For `A B` two nonempty finite sets, there always exist `a0 ∈ A, b0 ∈ B` such that\n`UniqueAdd A B a0 b0` ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums.uniqueAdd_of_nonempty","kind":"theorem","line":221,"name":"UniqueSums.uniqueAdd_of_nonempty","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L221-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums.mk\"><span class=\"name\">UniqueSums</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">uniqueAdd_of_nonempty</span> : <span class=\"fn\">∀ {<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span> → <span class=\"fn\">∃ <span class=\"fn\">a0</span> ∈ <span class=\"fn\">A</span>, <span class=\"fn\">∃ <span class=\"fn\">b0</span> ∈ <span class=\"fn\">B</span>, <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\">UniqueSums</a> <span class=\"fn\">G</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums.mk","kind":"ctor","line":218,"name":"UniqueSums.mk","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L218-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums\"><span class=\"name\">UniqueSums</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Let `G` be a Type with addition.  `UniqueSums G` asserts that any two non-empty\nfinite subsets of `G` have the `UniqueAdd` property, with respect to some element of their\nsum `A + B`. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueSums","kind":"class","line":215,"name":"UniqueSums","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L215-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.of_image_filter\"><span class=\"name\">UniqueAdd</span>.<span class=\"name\">of_image_filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">H</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aG </span><span class=\"fn\">bG</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aH </span><span class=\"fn\">bH</span> : <span class=\"fn\">H</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hae</span> : <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">aG</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">aH</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbe</span> : <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">bG</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bH</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">huH</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.image\">Finset.image</a> <span class=\"fn\">(⇑<span class=\"fn\">f</span>)</span> <span class=\"fn\">A</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.image\">Finset.image</a> <span class=\"fn\">(⇑<span class=\"fn\">f</span>)</span> <span class=\"fn\">B</span>)</span> <span class=\"fn\">aH</span> <span class=\"fn\">bH</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">huG</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">({<span class=\"fn\">a</span> ∈ <span class=\"fn\">A</span> | <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">aH</span>})</span> <span class=\"fn\">({<span class=\"fn\">b</span> ∈ <span class=\"fn\">B</span> | <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bH</span>})</span> <span class=\"fn\">aG</span> <span class=\"fn\">bG</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">aG</span> <span class=\"fn\">bG</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.of_image_filter","kind":"theorem","line":202,"name":"UniqueAdd.of_image_filter","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L202-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.of_image_filter\"><span class=\"name\">UniqueMul</span>.<span class=\"name\">of_image_filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MulHom\">→ₙ*</a> <span class=\"fn\">H</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aG </span><span class=\"fn\">bG</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aH </span><span class=\"fn\">bH</span> : <span class=\"fn\">H</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hae</span> : <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">aG</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">aH</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbe</span> : <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">bG</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bH</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">huH</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.image\">Finset.image</a> <span class=\"fn\">(⇑<span class=\"fn\">f</span>)</span> <span class=\"fn\">A</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.image\">Finset.image</a> <span class=\"fn\">(⇑<span class=\"fn\">f</span>)</span> <span class=\"fn\">B</span>)</span> <span class=\"fn\">aH</span> <span class=\"fn\">bH</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">huG</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">({<span class=\"fn\">a</span> ∈ <span class=\"fn\">A</span> | <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">aH</span>})</span> <span class=\"fn\">({<span class=\"fn\">b</span> ∈ <span class=\"fn\">B</span> | <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bH</span>})</span> <span class=\"fn\">aG</span> <span class=\"fn\">bG</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">aG</span> <span class=\"fn\">bG</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.of_image_filter","kind":"theorem","line":202,"name":"UniqueMul.of_image_filter","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L202-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.iff_addOpposite\"><span class=\"name\">UniqueAdd</span>.<span class=\"name\">iff_addOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.map\">Finset.map</a> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">{</a> <span class=\"fn\">toFun</span> := <a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a>, <span class=\"fn\">inj'</span> := <span class=\"fn\">⋯</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">}</a> <span class=\"fn\">B</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.map\">Finset.map</a> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">{</a> <span class=\"fn\">toFun</span> := <a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a>, <span class=\"fn\">inj'</span> := <span class=\"fn\">⋯</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">}</a> <span class=\"fn\">A</span>)</span>\n    <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a> <span class=\"fn\">b0</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a> <span class=\"fn\">a0</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.iff_addOpposite","kind":"theorem","line":193,"name":"UniqueAdd.iff_addOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L193-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.iff_mulOpposite\"><span class=\"name\">UniqueMul</span>.<span class=\"name\">iff_mulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.map\">Finset.map</a> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">{</a> <span class=\"fn\">toFun</span> := <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a>, <span class=\"fn\">inj'</span> := <span class=\"fn\">⋯</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">}</a> <span class=\"fn\">B</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.map\">Finset.map</a> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">{</a> <span class=\"fn\">toFun</span> := <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a>, <span class=\"fn\">inj'</span> := <span class=\"fn\">⋯</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">}</a> <span class=\"fn\">A</span>)</span>\n    <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a> <span class=\"fn\">b0</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a> <span class=\"fn\">a0</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.iff_mulOpposite","kind":"theorem","line":193,"name":"UniqueMul.iff_mulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L193-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.to_addOpposite\"><span class=\"name\">UniqueAdd</span>.<span class=\"name\">to_addOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.map\">Finset.map</a> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">{</a> <span class=\"fn\">toFun</span> := <a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a>, <span class=\"fn\">inj'</span> := <span class=\"fn\">⋯</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">}</a> <span class=\"fn\">B</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.map\">Finset.map</a> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">{</a> <span class=\"fn\">toFun</span> := <a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a>, <span class=\"fn\">inj'</span> := <span class=\"fn\">⋯</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">}</a> <span class=\"fn\">A</span>)</span>\n  <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a> <span class=\"fn\">b0</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a> <span class=\"fn\">a0</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.to_addOpposite","kind":"theorem","line":188,"name":"UniqueAdd.to_addOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L188-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.to_mulOpposite\"><span class=\"name\">UniqueMul</span>.<span class=\"name\">to_mulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.map\">Finset.map</a> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">{</a> <span class=\"fn\">toFun</span> := <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a>, <span class=\"fn\">inj'</span> := <span class=\"fn\">⋯</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">}</a> <span class=\"fn\">B</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.map\">Finset.map</a> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">{</a> <span class=\"fn\">toFun</span> := <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a>, <span class=\"fn\">inj'</span> := <span class=\"fn\">⋯</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">}</a> <span class=\"fn\">A</span>)</span>\n  <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a> <span class=\"fn\">b0</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a> <span class=\"fn\">a0</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.to_mulOpposite","kind":"theorem","line":188,"name":"UniqueMul.to_mulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L188-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.of_addOpposite\"><span class=\"name\">UniqueAdd</span>.<span class=\"name\">of_addOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.map\">Finset.map</a> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">{</a> <span class=\"fn\">toFun</span> := <a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a>, <span class=\"fn\">inj'</span> := <span class=\"fn\">⋯</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">}</a> <span class=\"fn\">B</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.map\">Finset.map</a> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">{</a> <span class=\"fn\">toFun</span> := <a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a>, <span class=\"fn\">inj'</span> := <span class=\"fn\">⋯</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">}</a> <span class=\"fn\">A</span>)</span>\n    <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a> <span class=\"fn\">b0</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#AddOpposite.op\">AddOpposite.op</a> <span class=\"fn\">a0</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.of_addOpposite","kind":"theorem","line":182,"name":"UniqueAdd.of_addOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L182-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.of_mulOpposite\"><span class=\"name\">UniqueMul</span>.<span class=\"name\">of_mulOpposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.map\">Finset.map</a> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">{</a> <span class=\"fn\">toFun</span> := <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a>, <span class=\"fn\">inj'</span> := <span class=\"fn\">⋯</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">}</a> <span class=\"fn\">B</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.map\">Finset.map</a> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">{</a> <span class=\"fn\">toFun</span> := <a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a>, <span class=\"fn\">inj'</span> := <span class=\"fn\">⋯</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding.mk\">}</a> <span class=\"fn\">A</span>)</span>\n    <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a> <span class=\"fn\">b0</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Opposites.html#MulOpposite.op\">MulOpposite.op</a> <span class=\"fn\">a0</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.of_mulOpposite","kind":"theorem","line":182,"name":"UniqueMul.of_mulOpposite","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L182-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.addHom_map_iff\"><span class=\"name\">UniqueAdd</span>.<span class=\"name\">addHom_map_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding\">↪</a> <span class=\"fn\">H</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">add</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">G</span>), <span class=\"fn\"><span class=\"fn\">f</span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.map\">Finset.map</a> <span class=\"fn\">f</span> <span class=\"fn\">A</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.map\">Finset.map</a> <span class=\"fn\">f</span> <span class=\"fn\">B</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a0</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">b0</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span></div></div>","info":{"doc":"`UniqueAdd` is preserved under embeddings that are additive.\n\nSee `UniqueAdd.addHom_image_iff` for a version with swapped bundling. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.addHom_map_iff","kind":"theorem","line":171,"name":"UniqueAdd.addHom_map_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L171-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.mulHom_map_iff\"><span class=\"name\">UniqueMul</span>.<span class=\"name\">mulHom_map_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding\">↪</a> <span class=\"fn\">H</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mul</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">G</span>), <span class=\"fn\"><span class=\"fn\">f</span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.map\">Finset.map</a> <span class=\"fn\">f</span> <span class=\"fn\">A</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.map\">Finset.map</a> <span class=\"fn\">f</span> <span class=\"fn\">B</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a0</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">b0</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span></div></div>","info":{"doc":"`UniqueMul` is preserved under embeddings that are multiplicative.\n\nSee `UniqueMul.mulHom_image_iff` for a version with swapped bundling. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.mulHom_map_iff","kind":"theorem","line":168,"name":"UniqueMul.mulHom_map_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L168-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.addHom_image_iff\"><span class=\"name\">UniqueAdd</span>.<span class=\"name\">addHom_image_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">H</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Init/Data/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.image\">Finset.image</a> <span class=\"fn\">(⇑<span class=\"fn\">f</span>)</span> <span class=\"fn\">A</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.image\">Finset.image</a> <span class=\"fn\">(⇑<span class=\"fn\">f</span>)</span> <span class=\"fn\">B</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a0</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">b0</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span></div></div>","info":{"doc":"`UniqueAdd` is preserved under additive maps that are injective.\n\nSee `UniqueAdd.addHom_map_iff` for a version with swapped bundling. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.addHom_image_iff","kind":"theorem","line":156,"name":"UniqueAdd.addHom_image_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L156-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.mulHom_image_iff\"><span class=\"name\">UniqueMul</span>.<span class=\"name\">mulHom_image_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MulHom\">→ₙ*</a> <span class=\"fn\">H</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Init/Data/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.image\">Finset.image</a> <span class=\"fn\">(⇑<span class=\"fn\">f</span>)</span> <span class=\"fn\">A</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.image\">Finset.image</a> <span class=\"fn\">(⇑<span class=\"fn\">f</span>)</span> <span class=\"fn\">B</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a0</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">b0</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span></div></div>","info":{"doc":"`Unique_Mul` is preserved under multiplicative maps that are injective.\n\nSee `UniqueMul.mulHom_map_iff` for a version with swapped bundling. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.mulHom_image_iff","kind":"theorem","line":153,"name":"UniqueMul.mulHom_image_iff","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L153-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.of_addHom_image\"><span class=\"name\">UniqueAdd</span>.<span class=\"name\">of_addHom_image</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">H</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ ⦃<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">G</span>⦄, <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">d</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">d</span></span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.image\">Finset.image</a> <span class=\"fn\">(⇑<span class=\"fn\">f</span>)</span> <span class=\"fn\">A</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.image\">Finset.image</a> <span class=\"fn\">(⇑<span class=\"fn\">f</span>)</span> <span class=\"fn\">B</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a0</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">b0</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.of_addHom_image","kind":"theorem","line":147,"name":"UniqueAdd.of_addHom_image","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L147-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.of_mulHom_image\"><span class=\"name\">UniqueMul</span>.<span class=\"name\">of_mulHom_image</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MulHom\">→ₙ*</a> <span class=\"fn\">H</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ ⦃<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">G</span>⦄, <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">d</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">d</span></span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.image\">Finset.image</a> <span class=\"fn\">(⇑<span class=\"fn\">f</span>)</span> <span class=\"fn\">A</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Image.html#Finset.image\">Finset.image</a> <span class=\"fn\">(⇑<span class=\"fn\">f</span>)</span> <span class=\"fn\">B</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a0</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">b0</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.of_mulHom_image","kind":"theorem","line":147,"name":"UniqueMul.of_mulHom_image","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L147-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.addHom_preimage\"><span class=\"name\">UniqueAdd</span>.<span class=\"name\">addHom_preimage</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddHom\">→ₙ+</a> <span class=\"fn\">H</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Init/Data/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">H</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a0</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">b0</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/Data/Finset/Preimage.html#Finset.preimage\">preimage</a></span> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/Data/Finset/Preimage.html#Finset.preimage\">preimage</a></span> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span></div></div>","info":{"doc":"`UniqueAdd` is preserved by inverse images under injective, additive maps. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.addHom_preimage","kind":"theorem","line":139,"name":"UniqueAdd.addHom_preimage","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L139-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.mulHom_preimage\"><span class=\"name\">UniqueMul</span>.<span class=\"name\">mulHom_preimage</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MulHom\">→ₙ*</a> <span class=\"fn\">H</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Init/Data/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">H</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a0</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">b0</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/Data/Finset/Preimage.html#Finset.preimage\">preimage</a></span> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/Data/Finset/Preimage.html#Finset.preimage\">preimage</a></span> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span></div></div>","info":{"doc":"`UniqueMul` is preserved by inverse images under injective, multiplicative maps. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.mulHom_preimage","kind":"theorem","line":138,"name":"UniqueMul.mulHom_preimage","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L138-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.exists_iff_exists_existsUnique\"><span class=\"name\">UniqueAdd</span>.<span class=\"name\">exists_iff_exists_existsUnique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∃ (<span class=\"fn\">a0</span> : <span class=\"fn\">G</span>) (<span class=\"fn\">b0</span> : <span class=\"fn\">G</span>), <span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b0</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">B</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">g</span> : <span class=\"fn\">G</span>), <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">∃!</a> <span class=\"fn\">ab</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">G</span><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\">ab</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">B</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">ab</span>.1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">ab</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.exists_iff_exists_existsUnique","kind":"theorem","line":128,"name":"UniqueAdd.exists_iff_exists_existsUnique","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L128-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.exists_iff_exists_existsUnique\"><span class=\"name\">UniqueMul</span>.<span class=\"name\">exists_iff_exists_existsUnique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∃ (<span class=\"fn\">a0</span> : <span class=\"fn\">G</span>) (<span class=\"fn\">b0</span> : <span class=\"fn\">G</span>), <span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b0</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">B</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">g</span> : <span class=\"fn\">G</span>), <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">∃!</a> <span class=\"fn\">ab</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">G</span><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\">ab</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">B</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">ab</span>.1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">ab</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.exists_iff_exists_existsUnique","kind":"theorem","line":128,"name":"UniqueMul.exists_iff_exists_existsUnique","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L128-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.iff_card_le_one\"><span class=\"name\">UniqueAdd</span>.<span class=\"name\">iff_card_le_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha0</span> : <span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb0</span> : <span class=\"fn\">b0</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">p</span> ∈ <span class=\"fn\">A</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">B</span> | <span class=\"fn\"><span class=\"fn\">p</span>.1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">p</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b0</span>}</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.iff_card_le_one","kind":"theorem","line":119,"name":"UniqueAdd.iff_card_le_one","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L119-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.iff_card_le_one\"><span class=\"name\">UniqueMul</span>.<span class=\"name\">iff_card_le_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha0</span> : <span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb0</span> : <span class=\"fn\">b0</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">p</span> ∈ <span class=\"fn\">A</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">B</span> | <span class=\"fn\"><span class=\"fn\">p</span>.1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">p</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b0</span>}</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.iff_card_le_one","kind":"theorem","line":119,"name":"UniqueMul.iff_card_le_one","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L119-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.iff_existsUnique\"><span class=\"name\">UniqueAdd</span>.<span class=\"name\">iff_existsUnique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aA</span> : <span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bB</span> : <span class=\"fn\">b0</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">∃!</a> <span class=\"fn\">ab</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">G</span><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\">ab</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">B</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">ab</span>.1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">ab</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b0</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.iff_existsUnique","kind":"theorem","line":108,"name":"UniqueAdd.iff_existsUnique","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L108-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.iff_existsUnique\"><span class=\"name\">UniqueMul</span>.<span class=\"name\">iff_existsUnique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aA</span> : <span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bB</span> : <span class=\"fn\">b0</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">∃!</a> <span class=\"fn\">ab</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">G</span><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\">ab</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">B</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">ab</span>.1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">ab</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b0</span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.iff_existsUnique","kind":"theorem","line":108,"name":"UniqueMul.iff_existsUnique","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L108-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.set_subsingleton\"><span class=\"name\">UniqueAdd</span>.<span class=\"name\">set_subsingleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">ab</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">G</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><span class=\"fn\">ab</span>.1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">ab</span>.2</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">B</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">ab</span>.1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">ab</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b0</span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a>.<a href=\"./Mathlib/Data/Set/Subsingleton.html#Set.Subsingleton\">Subsingleton</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.set_subsingleton","kind":"theorem","line":99,"name":"UniqueAdd.set_subsingleton","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L99-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.set_subsingleton\"><span class=\"name\">UniqueMul</span>.<span class=\"name\">set_subsingleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">ab</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">G</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><span class=\"fn\">ab</span>.1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">ab</span>.2</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">B</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">ab</span>.1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">ab</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b0</span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a>.<a href=\"./Mathlib/Data/Set/Subsingleton.html#Set.Subsingleton\">Subsingleton</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.set_subsingleton","kind":"theorem","line":99,"name":"UniqueMul.set_subsingleton","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L99-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.subsingleton\"><span class=\"name\">UniqueAdd</span>.<span class=\"name\">subsingleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">ab</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><span class=\"fn\">ab</span>.1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">ab</span>.2</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">B</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">ab</span>.1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">ab</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b0</span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.subsingleton","kind":"theorem","line":91,"name":"UniqueAdd.subsingleton","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.subsingleton\"><span class=\"name\">UniqueMul</span>.<span class=\"name\">subsingleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">ab</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><span class=\"fn\">ab</span>.1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">ab</span>.2</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">B</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">ab</span>.1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">ab</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b0</span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.subsingleton","kind":"theorem","line":91,"name":"UniqueMul.subsingleton","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L91-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.mt\"><span class=\"name\">UniqueAdd</span>.<span class=\"name\">mt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">G</span>⦄</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">B</span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b0</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b0</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.mt","kind":"theorem","line":85,"name":"UniqueAdd.mt","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L85-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.mt\"><span class=\"name\">UniqueMul</span>.<span class=\"name\">mt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">G</span>⦄</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">B</span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b0</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b0</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.mt","kind":"theorem","line":85,"name":"UniqueMul.mt","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L85-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.of_card_le_one\"><span class=\"name\">UniqueAdd</span>.<span class=\"name\">of_card_le_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hA</span> : <span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hB</span> : <span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hA1</span> : <span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hB1</span> : <span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">a</span> ∈ <span class=\"fn\">A</span>, <span class=\"fn\">∃ <span class=\"fn\">b</span> ∈ <span class=\"fn\">B</span>, <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.of_card_le_one","kind":"theorem","line":78,"name":"UniqueAdd.of_card_le_one","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L78-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.of_card_le_one\"><span class=\"name\">UniqueMul</span>.<span class=\"name\">of_card_le_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hA</span> : <span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hB</span> : <span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hA1</span> : <span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hB1</span> : <span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">a</span> ∈ <span class=\"fn\">A</span>, <span class=\"fn\">∃ <span class=\"fn\">b</span> ∈ <span class=\"fn\">B</span>, <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.of_card_le_one","kind":"theorem","line":78,"name":"UniqueMul.of_card_le_one","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L78-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.of_subsingleton\"><span class=\"name\">UniqueAdd</span>.<span class=\"name\">of_subsingleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.of_subsingleton","kind":"theorem","line":74,"name":"UniqueAdd.of_subsingleton","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L74-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.of_subsingleton\"><span class=\"name\">UniqueMul</span>.<span class=\"name\">of_subsingleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.of_subsingleton","kind":"theorem","line":74,"name":"UniqueMul.of_subsingleton","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L74-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.mono\"><span class=\"name\">UniqueAdd</span>.<span class=\"name\">mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A' </span><span class=\"fn\">B'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hA</span> : <span class=\"fn\">A</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">A'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hB</span> : <span class=\"fn\">B</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">B'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A'</span> <span class=\"fn\">B'</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\">UniqueAdd</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd.mono","kind":"theorem","line":70,"name":"UniqueAdd.mono","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L70-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.mono\"><span class=\"name\">UniqueMul</span>.<span class=\"name\">mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A' </span><span class=\"fn\">B'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hA</span> : <span class=\"fn\">A</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">A'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hB</span> : <span class=\"fn\">B</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">B'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A'</span> <span class=\"fn\">B'</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\">UniqueMul</a> <span class=\"fn\">A</span> <span class=\"fn\">B</span> <span class=\"fn\">a0</span> <span class=\"fn\">b0</span></span></div></div>","info":{"doc":"","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul.mono","kind":"theorem","line":70,"name":"UniqueMul.mono","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L70-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd\"><span class=\"name\">UniqueAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Let `G` be a Type with addition, let `A B : Finset G` be finite subsets and\nlet `a0 b0 : G` be two elements.  `UniqueAdd A B a0 b0` asserts `a0 + b0` can be written in at\nmost one way as a sum of an element from `A` and an element from `B`. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueAdd","kind":"def","line":59,"name":"UniqueAdd","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L59-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul\"><span class=\"name\">UniqueMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A </span><span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a0 </span><span class=\"fn\">b0</span> : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Let `G` be a Type with multiplication, let `A B : Finset G` be finite subsets and\nlet `a0 b0 : G` be two elements.  `UniqueMul A B a0 b0` asserts `a0 * b0` can be written in at\nmost one way as a product of an element of `A` and an element of `B`. ","docLink":"./Mathlib/Algebra/Group/UniqueProds/Basic.html#UniqueMul","kind":"def","line":56,"name":"UniqueMul","sourceLink":"https://github.com/leanprover-community/mathlib4/blob/a43dd5b1315afdbfd01ad27674f1c37e7ce763e6/Mathlib/Algebra/Group/UniqueProds/Basic.lean#L56-L64"}}],"imports":["Init","Mathlib.Algebra.Group.Equiv.Opposite","Mathlib.Algebra.Group.Finsupp","Mathlib.Algebra.Group.Pi.Lemmas","Mathlib.Algebra.Group.Pointwise.Finset.Basic","Mathlib.Algebra.Group.TypeTags.Basic","Mathlib.Algebra.Group.ULift","Mathlib.Data.DFinsupp.Defs"],"instances":[{"className":"UniqueProds","name":"TwoUniqueProds.toUniqueProds","typeNames":[]},{"className":"UniqueSums","name":"TwoUniqueSums.toUniqueSums","typeNames":[]},{"className":"UniqueProds","name":"Multiplicative.instUniqueProdsOfUniqueSums","typeNames":["Multiplicative"]},{"className":"TwoUniqueProds","name":"Multiplicative.instTwoUniqueProdsOfTwoUniqueSums","typeNames":["Multiplicative"]},{"className":"UniqueSums","name":"Additive.instUniqueSumsOfUniqueProds","typeNames":["Additive"]},{"className":"TwoUniqueSums","name":"Additive.instTwoUniqueSumsOfTwoUniqueProds","typeNames":["Additive"]},{"className":"UniqueProds","name":"UniqueProds.instMulOpposite","typeNames":["MulOpposite"]},{"className":"UniqueSums","name":"UniqueSums.instAddOpposite","typeNames":["AddOpposite"]},{"className":"UniqueProds","name":"UniqueProds.instForall","typeNames":[]},{"className":"UniqueSums","name":"UniqueSums.instForall","typeNames":[]},{"className":"UniqueProds","name":"Prod.instUniqueProds","typeNames":["Prod"]},{"className":"UniqueSums","name":"Prod.instUniqueSums","typeNames":["Prod"]},{"className":"UniqueSums","name":"instUniqueSumsDFinsupp","typeNames":["DFinsupp"]},{"className":"UniqueSums","name":"instUniqueSumsFinsupp","typeNames":["Finsupp"]},{"className":"TwoUniqueProds","name":"TwoUniqueProds.instForall","typeNames":[]},{"className":"TwoUniqueSums","name":"TwoUniqueSums.instForall","typeNames":[]},{"className":"TwoUniqueProds","name":"Prod.instTwoUniqueProds","typeNames":["Prod"]},{"className":"TwoUniqueSums","name":"Prod.instTwoUniqueSums","typeNames":["Prod"]},{"className":"TwoUniqueProds","name":"TwoUniqueProds.instMulOpposite","typeNames":["MulOpposite"]},{"className":"TwoUniqueSums","name":"TwoUniqueSums.instAddOpposite","typeNames":["AddOpposite"]},{"className":"TwoUniqueProds","name":"TwoUniqueProds.of_covariant_right","typeNames":[]},{"className":"TwoUniqueSums","name":"TwoUniqueSums.of_covariant_right","typeNames":[]},{"className":"TwoUniqueProds","name":"TwoUniqueProds.of_covariant_left","typeNames":[]},{"className":"TwoUniqueSums","name":"TwoUniqueSums.of_covariant_left","typeNames":[]},{"className":"TwoUniqueSums","name":"instTwoUniqueSumsDFinsupp","typeNames":["DFinsupp"]},{"className":"TwoUniqueSums","name":"instTwoUniqueSumsFinsupp","typeNames":["Finsupp"]}],"name":"Mathlib.Algebra.Group.UniqueProds.Basic"}